<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Colin&#39;s Home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-04T02:41:01.146Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Colinblack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql面试</title>
    <link href="http://yoursite.com/2020/03/03/mysql_interview/"/>
    <id>http://yoursite.com/2020/03/03/mysql_interview/</id>
    <published>2020-03-03T12:17:16.000Z</published>
    <updated>2020-03-04T02:41:01.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>一、 MySQL 执行一条查询语句的内部执行过程   </p><ul><li>答案：<br>链接器=》分析器=》优化器=》执行器=》存储引擎    <ol><li>客户端先通过连接器连接到 MySQL 服务器   </li><li>连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器     </li><li>分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器  </li><li>优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好  </li><li>优化器执行完就进入执行器，执行器就开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回   </li></ol><ul><li>详解：<br>查询、更新等语句都会走下面这个图(mysql逻辑架构图)<br><img src="/images/mysql_p1_20200304092002.png" alt="p1"><br>大体上MySQL=Server层+存储引擎层<br>Server层实现的功能：内置函数(日期、时间、数学、加密函数)和跨存储引擎功能(存储过程、触发器、视图)<br>存储引擎层功能：数据存储和提取，架构模式为插件式，最常用的存储引擎InnoDB(5.5.5后默认引擎)、MyISAM、Memory<br>连接器：<br>负责与客户端建立连接，获取权限，维持和管理连接     </li></ul>1.建立连接<br>mysql  -h$ip  -P$port  -u$user -p<br>获取权限<br>如果用户密码不对， 则报错”Access denied for user”， 然后退出<br>如果用户密码认证通过，连接器会到权限表里查出你拥有的权限 (即使管理员修改了你的权限也只能下次重新连接是生效)<br>管理连接<br>查询连接状态<br>show processlist<br>其中Command 为Sleep的表示空闲连接， 如果空闲时间超过wait_timeout则自动断开<br>2.查询缓存<br>以key-value的形式存在内存中，key是查询命令，value是结果<br>缓存利大于弊，查询缓存失效非常频繁，只要对一个表更新，这个表上所有查询缓存都会被清空 , 更新频繁的数据库不适应缓存<br>使用场景：  业务是一张静态表，长时间不更新，例如配置信息<br>设置sql语句默认不查询<br>set session query_cache_type=DEMAND  #当前会话<br>Mysql8.0后没有查询缓存功能<br>3.分析器<br>4.优化器<br>表里有多个索引是，决定用哪个索引，或一个语句有多表关联(join)是，决定各个表连接顺序<br>5.执行器<br>先判断有没有查询权限，没有则返回错误 ， 如果有则使用引擎提供的接口      </li></ul><p>二、 MySQL执行一条更新语句内部的执行过程    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;一、 MySQL 执行一条查询语句的内部执行过程   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;答案：&lt;br&gt;链接器=》分析器=》优化器=》执行器=》存储
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础</title>
    <link href="http://yoursite.com/2020/02/26/mysql%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/26/mysql%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-25T23:27:19.000Z</published>
    <updated>2020-03-01T23:54:03.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li><p>MyISAM 不支持， InnoDB</p></li><li><p>什么是事务<br>用来处理批量的mysql操作， 为了保证数据库的完整性，这些操作要么完全执行，要么完全不执行</p></li><li><p>几个术语<br>回退(rollback) 撤销SQL语句的过程<br>提交(commit) 未存储的SQL语句写入数据库表<br>保留点(savepoint) 事务处理中设置临时占位符(place-holder).可以发布回退 </p></li><li><p>可以执行回退的语句<br>INSERT UPDATE和DELETE</p></li><li><p>事务的4个特性(ACID)<br>原子性: 批量的sql, 要么都发生， 要么都不发生<br>一致性：事务前后的数据保持业务上的合理一致<br>持久性：事务一旦发生不能取消，只能通过补偿性事务来抵消效果<br>隔离性：在事务进行中，其他操作开不到此事务的任何效果   </p></li><li><p>操作命令<br>开启事务：start transaction<br>执行命令： xxx<br>提交事务/回滚事务 commit/rollback<br>设置隔离级别：set session transaction isolation level [read uncommitted |  read committed | repeatable read |serializable] </p></li><li><p>示例  </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建表</span><br><span class="line">mysql&gt; create table account(</span><br><span class="line">    -&gt; uname char(10),</span><br><span class="line">    -&gt; money int)</span><br><span class="line">    -&gt; engine innodb charset utf8;</span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">mysql&gt; insert into account values</span><br><span class="line">    -&gt; (&#39;zhang&#39;, 5000),</span><br><span class="line">    -&gt; (&#39;lisi&#39;, 3000);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;开启事务</span><br><span class="line">start transaction</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更新数据</span><br><span class="line">update account set money &#x3D; money + 100000  where uname&#x3D;&#39;lisi&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查询</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+-------+-------+</span><br><span class="line">| uname | money |</span><br><span class="line">+-------+-------+</span><br><span class="line">| zhang |  5000 |</span><br><span class="line">| lisi  |  3000 |</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置隔离级别</span><br><span class="line">mysql&gt; set session transaction  isolation level read uncommitted</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;提交事务</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure><ul><li><p>隔离级别<br>read uncommit : “脏读”, 读到未提交事务的内容<br>read commited : 一个事务在进行的过程中， 读不到另外一个进行中事务的内容，但是能读到已经完成事务中的内容<br>repeatable read: 可重复读,即在一个事务过程中,所有信息都来自事务开始那一瞬间的信息,不受其他已提交事务的影响. (大多数的系统,用此隔离级别)<br>serializable: 串行化, 所有的事务,必须编号,按顺序一个一个来执行,也就取消了冲突的可能.这样隔离级别最高,但事务相互等待的等待长. 在实用,也不是很多 </p></li><li><p>c++中使用事务</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参考brks</span></span><br><span class="line"><span class="keyword">bool</span> MysqlConnection::transaction(<span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; sql)&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//手动提交</span></span><br><span class="line">mysql_autocommit(mysql_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始事务</span></span><br><span class="line">mysql_query(mysql_, <span class="string">"start transaction"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> iter = sql.begin(), iter != sql.end(); iter++)&#123;</span><br><span class="line">ret = mysql_qurey(mysql_, (*iter).c_ctr());</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//回滚</span></span><br><span class="line">mysqL_query(mysql_, <span class="string">"rollback"</span>);</span><br><span class="line">LOG_ERROR(<span class="string">"excute transaction failed."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != mysql_query(mysql, <span class="string">"commit"</span>))&#123;</span><br><span class="line">LOG_ERROR(<span class="string">"commit transaction failed."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>一组为了完成特定功能的SQL语句集， 经编译后存储在数据库中， 用户通过存储过过程名并传参来调用它</p><ul><li><p>优点<br>增强的sql语音的功能和灵活性<br>存储过程允许标准组件式编程<br>较快的执行速度(存储过程是预编译的)<br>减少网络流量<br>可被作物一种安全机制充分利用   </p></li><li><p>创建步骤<br>选择一个数据库<br>改变分割符：delimiter $$(避免使用;作为结束标记)  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">mysql&gt; delimiter $$</span><br><span class="line"></span><br><span class="line">mysql&gt; create procedure p_hello()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select 'hello';</span><br><span class="line">    -&gt; select 'world';</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; $$;</span><br><span class="line"></span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">mysql&gt; call p_hello;</span><br></pre></td></tr></table></figure></li><li><p>存储过程中的参数<br>in: 输入参数<br>必须在调用存储过程之前指定<br>out: 输出参数<br>可以在存储过程内部改变并返回<br>inout:输入输出参数<br>可以在调用时指定， 并可修改和返回  </p></li></ul><p>in 在存储过程中修值是传入值得一份拷贝，传入的值不会改变</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create procedure v_test1(in p_int int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select p_int;</span><br><span class="line">    -&gt; set p_int = p_int +1;</span><br><span class="line">    -&gt; select p_int;</span><br><span class="line">    -&gt; end;</span><br><span class="line">    -&gt; $$;</span><br><span class="line"></span><br><span class="line">mysql&gt; delimiter </span><br><span class="line">mysql&gt; set @p_int =3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//存储过程里的值被修改</span><br><span class="line">mysql&gt; call v_test1(@p_int);</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| p_int |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     3 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| p_int |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     <span class="number">4</span> |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line">//外面的值没变</span><br><span class="line">mysql&gt; <span class="keyword">select</span> @p_int;</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| @p_int |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">|      3 |</span><br><span class="line">+<span class="comment">--------+</span></span><br></pre></td></tr></table></figure><p>out 不认可传入的值，修改后值会变</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create procedure p_test_out(out v_out_int int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select v_out_int;</span><br><span class="line">    -&gt; set v_out_int=15;</span><br><span class="line">    -&gt; select v_out_int;</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; $$;</span><br><span class="line"></span><br><span class="line">mysql&gt; set @v_out_int=10;</span><br><span class="line">    -&gt; $$;</span><br><span class="line">mysql&gt; call p_test_out(@v_out_int);</span><br><span class="line">    -&gt; $$;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| v_out_int |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|      NULL |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| v_out_int |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|        <span class="number">15</span> |</span><br><span class="line">+<span class="comment">-----------+</span></span><br></pre></td></tr></table></figure><p>inout 类似于引用，认可传入的值， 修改后会改变</p><p>在存储过程里面定义变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create procedure p_vartest()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare a varchar(20) default 'abc';</span><br><span class="line">    -&gt; select a;</span><br><span class="line">    -&gt; end;</span><br><span class="line">    -&gt; $$;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p_vartest;</span><br><span class="line">    -&gt; $$;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| a    |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| abc  |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>c++中使用存储过程  </li><li>创建存储过程  </li><li>初始化mysql: mysql_init   </li><li>链接mysql: mysql_real_connect   </li><li>调用存储过程: mysql_real_qurey, 第二个参数，”call xxx(xxx)”</li><li>释放资源与连接：mysql_free_result， mysql_close   </li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>由查询结果形成的一张虚拟表， 如果某个查询结果出现的非常频繁， 要经常拿这个查询结果来做子查询<br>视图本身不包含数据， 它返回的数据是从其他表中检索出来的</p><ul><li>作用   </li></ul><ol><li>权限控制：如某几个列允许用户查询，其他的列不允许， 可以通过视图开放其中一列或几列           </li><li>简化复杂的查询</li></ol><ul><li><p>视图能否更新，删除，添加<br>如果视图的每一行是和物理表一一对应的才可以<br>如果view的行是由物理表多行经过计算的到的结果，view不可以更新  </p></li><li><p>视图放在哪儿（视图算法） </p></li></ul><ol><li>对于简单的查询形成的view, 再对view查询时，如where, order等， 可以把建视图的语句+查询视图的语句合并成=》查物理的语句，这种视图算法叫merge(合并)   </li><li>视图的语句本身比较复杂，很难再和查询视图的语句合并，mysql先执行视图的创建语句，把结果集形成内存中的临时表，然后再去查临时表(temptable)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MyISAM 不支持， InnoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是事务&lt;br&gt;用来处理批量的mysql操作， 
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>cpp并发</title>
    <link href="http://yoursite.com/2020/02/20/cpp%E5%B9%B6%E5%8F%91/"/>
    <id>http://yoursite.com/2020/02/20/cpp%E5%B9%B6%E5%8F%91/</id>
    <published>2020-02-20T14:20:11.000Z</published>
    <updated>2020-02-24T15:14:54.699Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="c-11中创建线程"><a href="#c-11中创建线程" class="headerlink" title="c++11中创建线程"></a>c++11中创建线程</h2><p>创建线程的几种方式</p><ul><li>使用全局函数或类静态函数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">threadFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"subThread"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(threadFunc)</span></span>;</span><br></pre></td></tr></table></figure></li><li>使用函数对象<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span> <span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"subThread"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Obj b;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(b)</span></span>;</span><br></pre></td></tr></table></figure></li><li>使用lambda<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> l = []&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"subThread"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t3</span><span class="params">(l)</span></span>;</span><br></pre></td></tr></table></figure>join<br>阻塞等待线程结束</li></ul><p>detach<br>线程分离，一般不使用此函数主进程结束即使子线程还在运行仍然会被终止，使用此函数，线程会被c＋＋运行时库接管，成为守护线程.</p><p>joinable<br>是否可以join或detach</p><h2 id="线程传参"><a href="#线程传参" class="headerlink" title="线程传参"></a>线程传参</h2><ul><li>使用detach带来的陷阱<br>线程函数中无论是引用传递还是值传递编译器都会拷贝副本，所以detach下传递int&amp;安全，传递char*不安全(主线程退出内存释放掉了)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; i, <span class="keyword">char</span>* pmybuf)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; pmybuf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> mybuf[] = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="function">thread <span class="title">mytobj</span><span class="params">(myprint, mvar, mybuf)</span></span>;</span><br><span class="line">mytobj.detach();</span><br></pre></td></tr></table></figure></li></ul><p>避免隐式转换<br>从char* 到 string转换时机不确定，可能主线程退出后再发生转换此时char*指向内存已销毁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="built_in">string</span>&amp; pmybuf)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; pmybuf.c_str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> mybuf[] = <span class="string">"hello world"</span>; </span><br><span class="line"><span class="function">thread <span class="title">mytobj</span><span class="params">(myprint, mvar, mybuf)</span></span>; <span class="comment">//改为thread mytobj(myprint, mvar, string(mybuf))可以看到内存拷贝发生在主线程退出前</span></span><br><span class="line">mytobj.detach();</span><br></pre></td></tr></table></figure><ul><li>传递类对象、智能指针、函数对象, 成员函数作为线程参数<br>线程函数传递引用类型参数前需加const<br>需要使用std::ref才能传递myobj的引用 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">    A(<span class="keyword">int</span> a) : m_i(a)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"A()"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a):m_i(a.m_i)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; A(constA&amp; ) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~A()&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"~A()"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">const</span> A&amp; a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; a.m_i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">A <span class="title">myobj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//thread mytobj(myprint, myobj); </span></span><br><span class="line"><span class="function">thread <span class="title">mytobj</span><span class="params">(myprint, <span class="built_in">std</span>::ref(myobj))</span></span>; </span><br><span class="line">mytobj.join();</span><br></pre></td></tr></table></figure></li></ul><p>传递std::unique_ptr使用std::move</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; pzn)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; p(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">//thread mytobj(myprint, myobj); 这样操作有问题unique_ptr是独占指针 </span></span><br><span class="line"><span class="function">thread <span class="title">mytobj</span><span class="params">(myprint, <span class="built_in">std</span>::move(myobj))</span></span>; </span><br><span class="line">mytobj.join();</span><br></pre></td></tr></table></figure><p>函数对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">myobj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">mytobj</span><span class="params">(myobj, <span class="number">15</span>)</span></span>; <span class="comment">//会有拷贝构造</span></span><br><span class="line"><span class="function">thread <span class="title">mytobj</span><span class="params">(<span class="built_in">std</span>::ref(myobj), <span class="number">15</span>)</span></span>; <span class="comment">//没有拷贝构造</span></span><br><span class="line">mytobj.join();</span><br></pre></td></tr></table></figure><p>用成员函数指针做线程函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">thread_work</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">std</span>::this_thread::get_id() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A <span class="title">myobj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">mytobj</span><span class="params">(&amp;A::thread_work, myobj, <span class="number">15</span>)</span></span>; <span class="comment">//会有拷贝构造</span></span><br><span class="line"><span class="comment">// thread mytobj(&amp;A::thread_work, std::ref(myobj), 15); //没有拷贝构造</span></span><br><span class="line"><span class="comment">// thread mytobj(&amp;A::thread_work, &amp;myobj, 15); //没有拷贝构造</span></span><br><span class="line">mytobj.join();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;c-11中创建线程&quot;&gt;&lt;a href=&quot;#c-11中创建线程&quot; class=&quot;headerlink&quot; title=&quot;c++11中创建线程&quot;&gt;&lt;/a&gt;c++11中创建线程&lt;/h2&gt;&lt;p&gt;创建线程的几种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>《Linux内核完全注释》笔记</title>
    <link href="http://yoursite.com/2020/02/18/linux%E5%86%85%E6%A0%B8%E5%AE%8C%E5%85%A8%E6%B3%A8%E9%87%8A/"/>
    <id>http://yoursite.com/2020/02/18/linux%E5%86%85%E6%A0%B8%E5%AE%8C%E5%85%A8%E6%B3%A8%E9%87%8A/</id>
    <published>2020-02-18T11:46:41.000Z</published>
    <updated>2020-02-24T04:05:18.188Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>  <h2 id="第二章-Linux内核体系结构"><a href="#第二章-Linux内核体系结构" class="headerlink" title="第二章 Linux内核体系结构"></a>第二章 Linux内核体系结构</h2><h3 id="Linux内核模式"><a href="#Linux内核模式" class="headerlink" title="Linux内核模式"></a>Linux内核模式</h3><p>操作系统体系结构模式主要分为：<br>整体式单内核(宏内核)<br>层次式微内核  </p><p>单核模式内核层次:<br>调用服务的主程序层<br>执行系统调用的服务层<br>支持系统调用的底层函数<br><img src="/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png" alt="p1">  </p><h3 id="Linux内核系统体系结构"><a href="#Linux内核系统体系结构" class="headerlink" title="Linux内核系统体系结构"></a>Linux内核系统体系结构</h3><p>Linux内核主要由5个模块构成：进程调度模块，内存管理模块，文件系统模块，进程间通信模块，网络接口模块<br>模块间的依赖关系:<br><img src="/images/fc77df7e-b967-4408-934b-ba46535033e2.png" alt="p2">  </p><p>Linux 0.11架构图:<br><img src="/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png" alt="p3">  </p><h3 id="Linux进程控制"><a href="#Linux进程控制" class="headerlink" title="Linux进程控制"></a>Linux进程控制</h3><p>内核态程序是不可抢占的(不会被schedule切换)， 用户态程序可以被抢占<br>一个进程可以在内核态或用户态下执行，内核堆栈和用户堆栈是分开的  </p><h4 id="任务数据结构"><a href="#任务数据结构" class="headerlink" title="任务数据结构"></a>任务数据结构</h4><p>进程上下文：当一个进程在执行时， CPU的所有寄存器中的值、进程的状态以及堆栈中的内容被称为该进程的上下文。<br>睡眠等待状态被分为可中断和不可中断  </p><h4 id="进程五种运行状态"><a href="#进程五种运行状态" class="headerlink" title="进程五种运行状态"></a>进程五种运行状态</h4><p>运行状态：进程正在被CPU执行，或者准备就绪随时可由调度程序执行<br>可中断睡眠状态：当系统产生中断或释放进程正在等待的资源或进程收到一个型号，进程能被唤醒转换到就绪状态<br>不可中断睡眠状态：只有被使用wake_up()明确唤醒时才能转换到可运行的就绪状态<br>暂停状态：当进程收到SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU进入暂停状态，像其发送SIGCONT转换到可运行状态<br>僵死状态：进程已停止运行，但父进程还没有询问其状态<br>进程状态及转换关系：<br><img src="/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png" alt="p4"><br>进程调度发生的情况:<br>进程时间片用完<br>进程自动放弃CPU使用权    </p><p>内核态时进程不能被 抢占，内核执行临界区代码时禁止一切中断  </p><h4 id="进程初始化"><a href="#进程初始化" class="headerlink" title="进程初始化"></a>进程初始化</h4><p>sched_init()：<br>设置任务0运行环境变量<br>预先设置好任务0数据结构个字段<br>在全局描述符表中添加任务0的TTS(任务状态段)描述符和LDT(局部描述符表)的段描述符，并把他们分别加载到tr(任务寄存器)和(ldr)局部描述符表寄存器  </p><p>move_to_user_mod()：<br>把运行特权级从内核态0级变换到用户态3级, 但是任然继续执行原来的代码.  </p><h4 id="创建新进程"><a href="#创建新进程" class="headerlink" title="创建新进程"></a>创建新进程</h4><p>过程：<br>使用fork创建，所有金产能都是通过复制进程0得到， 都是进程0的子进程<br>申请内存<br>复制当前进程数据结构<br>清除信号位图<br>设置时间片<br>设置tss中各寄存器的值  </p><h4 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h4><p>被抢占的进程仍处于TASK_RUNNING, 但是没被cpu执行，抢占发生在用户态，内核态不能被抢占，Linux 0.11 采用优先级排队调度策略<br>schedule 首先在TASK_RUNNING进程中选，谁counter值最大执行谁 如   果这些进程时间片都用完就根据优先权值priority重新分配时间片公式：<br><img src="/images/a0bcedee-f079-4dd0-9643-99de53b48236.png" alt="p5"><br> 如果此时没有其他进程运行，系统就会选择0号进程  </p><h4 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h4><p>switch_to():<br>如果切换的就是当前进程则什么也不做， 否则ljmp新进程的tss地址处， cpu各寄存器状态会保存到原来进程的tss， 然后将新进程的tss寄存器信息恢复到cpu中  </p><p>任务切换操作示意图:<br><img src="/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png" alt="p6">  </p><h4 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h4><p>流程:<br>用户程序调用exit, 内核执行do_exit<br>关闭进程会释放内存，关闭进程打开着的所有文件<br>如果有子进程，让init进出给你作为紫金城的父进程<br>如果进程是会话头进程且控制终端，则释放子进程，并向会话所有进程发送SIGHUP<br>将进程状态至为TASK_ZOMBIE, 并向原父进程发送SIGCHLD<br>调用do_exit  </p><p>进程终止时，其数据结构还保留，因为父进程要用到<br>父进程使用wait或waitpid等待子进程终止  </p><h3 id="Linux内核对内存的使用方法"><a href="#Linux内核对内存的使用方法" class="headerlink" title="Linux内核对内存的使用方法"></a>Linux内核对内存的使用方法</h3><p>Linux 0.11内核物理内存分布：<br><img src="/images/p1_20200224112830.png" alt="p6">  </p><p>Intel CPU两种内存管理系统：内存分段，分页<br>三种地址<br>进程的逻辑地址: 程序产生与段相关的偏移地址<br>CPU的线性地址: 逻辑地址 + 基地址<br>实际物理内存地址: CPU外部地址总线上的寻址物理内存的地址信号<br>如果启用了分页机制，线性地址会使用页目录和页表中的项变换成物理地址，如果没有启用线性地址直接成为物理地址</p><p>分页机制应用：建立一个大而连续的内存空间映像</p><p>虚拟内存，是一种利用二级或外部存储空间，使程序不受物理内存限制的方法，通常要大于物理内存</p><p>虚拟内存实现：<br>程序申请一段内存，如果内存页表中相应页面不存在内存中，CPU产生一个缺页中断，并把引起中断的线性地址放到CR2控制寄存器中， 中断处理程序通过地址把页面从二级存储空间（如硬盘）加载到物理内存， 如果内存已占满，则借助二级存储空间一部分作为交换缓冲区（Swapper）把内存中暂时不用的页面交换到二级缓冲区中，然后吧要求的页面调入内存。</p><p>内存映射<br>虚拟内存通过局部段描述符表(LDT)变换为CPU整个线性地址空间中的地址，再使用也目录表PDT(一级页表)和页表PT(二级页表)映射到物理地址页.</p><h3 id="Linux系统中堆栈的使用方法"><a href="#Linux系统中堆栈的使用方法" class="headerlink" title="Linux系统中堆栈的使用方法"></a>Linux系统中堆栈的使用方法</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  
&lt;h2 id=&quot;第二章-Linux内核体系结构&quot;&gt;&lt;a href=&quot;#第二章-Linux内核体系结构&quot; class=&quot;headerlink&quot; title=&quot;第二章 Linux内核体系结构&quot;&gt;&lt;/a&gt;第二章 Linux内核体系结构&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux内核" scheme="http://yoursite.com/categories/Linux%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>tcp-ip面试</title>
    <link href="http://yoursite.com/2020/02/16/%E9%9D%A2%E8%AF%95/tcp-ip%E9%9D%A2%E8%AF%95/"/>
    <id>http://yoursite.com/2020/02/16/%E9%9D%A2%E8%AF%95/tcp-ip%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-16T05:31:11.000Z</published>
    <updated>2020-03-03T12:22:48.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p>tcp连接是永久的只要没断开<br>tcp连接是指tcp协议栈维护的状态<br>tcp 流式协议，数据是有序的。面向连接可靠，慢，开销大，容易受攻击<br>udp 数据报协议，数据不保证有序。不需要连接， 不可靠，快，开销小</p><a id="more"></a>  <h2 id="三次握手与四次挥手"><a href="#三次握手与四次挥手" class="headerlink" title="三次握手与四次挥手"></a>三次握手与四次挥手</h2><p>三次握手：<br> &nbsp;&nbsp;&nbsp;1.客户端发起连接请求，SYN=1，seq=y, 客户端进入SYN_SENT状态<br> &nbsp;&nbsp;&nbsp;2.服务端收到连接，SYN=1,ack=y+1, seq=q, 服务端进入SYN_RCVD状态<br> &nbsp;&nbsp;&nbsp;3.客户端收到服务端的回应, ACK=1，ack=q+1, 客户端进入ESTABLISHED，服务端收到后也进入ESTABLISHED   </p><p>四次挥手：<br> &nbsp;&nbsp;&nbsp;&nbsp;主动关闭：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.主动关闭方close FIN=1, 进入FIN_WAIT_1状态<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.被动关闭方收到请求, 发送 ACK=1确认后进入CLOSE_WAIT状态，主动关闭方收到后进入FIN_WAIT_2<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.被动关闭close 发送FIN=1, 进入LAST_ACK状态<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.主动关闭方收到后，发送ACK=1，进入TIME_WAIT状态<br> &nbsp;&nbsp;&nbsp;&nbsp;同时关闭：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;双方发送ACK后进入CLOSING，不会有FIN_WAIT_2,LAST_ACK, CLOSEWAIT    </p><p>序号：<br> &nbsp;&nbsp;&nbsp;每个字节的数据都有自己的序号，对端接收的数据是乱序时用来确定顺序  </p><p>ISN:<br> &nbsp;&nbsp;&nbsp;三次握手第一个连接时的序列号     </p><p>判断syn flood攻击：  </p><pre><code>netstat -nap | grep SYN_RECV        </code></pre><p>防止Syn Flood方法：<br> &nbsp;&nbsp;&nbsp;1.清除所有的半连接<br> &nbsp;&nbsp;&nbsp;2.syn cookie(sysctl.conf tcp_syncookies选项)  </p><p>半关闭状态：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动关闭端发送FIN，被动关闭端回ACK后  </p><p>三次握手中握手包丢了会怎么样<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在第三次握手中丢包，服务端会有一个定时器，负责重发，会重发5次，第一次1s，以后时间在上次基础上翻倍，如果客户端还是回ack服务端会发rst  </p><h2 id="三次握手，四次挥手的原因"><a href="#三次握手，四次挥手的原因" class="headerlink" title="三次握手，四次挥手的原因"></a>三次握手，四次挥手的原因</h2><p>三次握手:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.服务端的seq(序号)和ack(确认号)是一起发给客户端的<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.客户端如果不发ack包， 服务端一直会超时重传（防止syn flood攻击）<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.三次握手的本质是为了确认连接双方的初始序列号<br>四次挥手：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.ACK 和 FIN 是分开的<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.TCP是全双工协议，一端可读可写，半关闭只关闭了写端，还可以读数据  </p><h2 id="TIME-WAIT状态是什么，为什么会有，那一方会有"><a href="#TIME-WAIT状态是什么，为什么会有，那一方会有" class="headerlink" title="TIME_WAIT状态是什么，为什么会有，那一方会有"></a>TIME_WAIT状态是什么，为什么会有，那一方会有</h2><p>time_wait:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动关闭的一端发出ACK包后进入的状态，等待2MSL时间后进入CLOSE状态<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动发送 RST段的一方，不会进入TIME_WAIT 状态<br>原因:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.保证TCP全双工通信可靠性<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果有TIME_WAIT，对端没收到ACK包会重发FIN包，在2MSL内会重发ACK包<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果没有TIME_WAIT，主动关闭方直接进入CLOSE状态，收到FIN包时会返回RST错误(ECONNRESET)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果主动关闭方挂掉，对端会一直重发FIN，知道重置连接<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 保证建立新连接时，旧连接重传的包在网络中小时而不影响新连接<br>TIME_WAIT引发的问题:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进程退出后，端口不能再次绑定(解决:SO_REUSEADDR)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.出现大量的TIME_WAIT<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般在高并发短连接，服务器主动关闭socket, 出现大量TIME_WAIT，导致部分用户连不上<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决办法：修改内核相关参数(/etc/sysctl.conf, 重用与快速回收)       </p><h2 id="TCP相关操作"><a href="#TCP相关操作" class="headerlink" title="TCP相关操作"></a>TCP相关操作</h2><p>查看系统支持端口号范围：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /proc/sys/net/ipv4/ip_local_port_range<br>扩大可用端口范围:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo 15000 65000 &gt; /proc/sys/net/ipv4/ip_local_port_range<br>查看tcp连接默认的timeout时长:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /proc/sys/net/ipv4/tcp_fin_timeout<br>缩短timeout的时间:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo 30 &gt; /proc/sys/net/ipv4/tcp_fin_timeout<br>统计tcp各个状态数:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;netstat -ant|awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}’<br>知名服务器端口定义：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/etc/services  </p><h2 id="TCP头部"><a href="#TCP头部" class="headerlink" title="TCP头部"></a>TCP头部</h2><p>固定20 + 可选项40 = 最大60<br>mss在可选项中<br>mss和MTU：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mss: 最大报文段长度，tcp能发的数据长度，只在三次握手的第一次握手发送给对端（一般1460）<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtu: 最大传输单元， 网卡一次发送数据的大小（一般是1500）<br>修改mss iptable<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看mtu netstat -i<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改mtu vim /etc/network/interfaces /etc/init.d/networking restart<br>PUSH:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送方最后发送的TCP段将会被标记为push<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接收方收到push标志到段，将接收缓冲区的内容拷贝到应用进程  </p><p>URG与紧急指针:<br>紧急指针只在URG=1的时候有用<br>紧急指针实际是序列号的偏移量<br>TCP只支持一个字节的紧急数据<br>紧急数据及linux中的带外数据（MSG_OOB）<br>可以在select设置exceptfds，在epoll中EPOLLPRI监听<br>seq:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决乱序<br>ack:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决丢包<br>window:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;流控<br>tcpflag:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tcp状态机<br>tcp头中的窗口是指真个滑动窗口大小吗？  </p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>延时ack：<br> &nbsp;&nbsp;&nbsp;接收数据的一方会根据需要延时发送ack(linux 中动态调节算法在快速ack和延时ack中切换)<br> &nbsp;&nbsp;&nbsp;一般情况下：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.当接收方有数据发送，ack会和数据一起发送<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.如果没有数据会延时200ms，在这期间有数据会和数据一起发送，如果过了时间没有数据，ack会被发送<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.如果延时期间又有第二个数据到来会立即发送ack<br> &nbsp;&nbsp;&nbsp;优点：减少了发送的分段，提高了网络利用率，节省带宽<br> &nbsp;&nbsp;&nbsp;缺点：增大网络延迟<br> &nbsp;&nbsp;&nbsp;关闭延时发送：TCP_QUICKACK<br> &nbsp;&nbsp;&nbsp;注意：每次recv后要重新设置<br>nagle算法:<br> &nbsp;&nbsp;&nbsp;发送数据的一方会累积数据直到接收方发来ack包后才将数据一起发送出去（最多累积到一个mss的大小），为了尽可能的发送大块数据<br> &nbsp;&nbsp;&nbsp;优点：提高了吞吐量<br> &nbsp;&nbsp;&nbsp;缺点：增大网络延时<br> &nbsp;&nbsp;&nbsp;nagle和延时确认都是为了减少小包   </p><p>滑动窗口:<br> &nbsp;&nbsp;&nbsp;目的为了做流量控制，防止对方发送过快导致缓冲区被塞满, 在tcp头的窗口字段确定其大小<br> &nbsp;&nbsp;&nbsp;持续定时器：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当对端窗口为0是，为防止本端死等，会定时发送长度为1的探测报文段（时间层指数增长）<br> &nbsp;&nbsp;&nbsp;问题：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;糊涂窗口综合征：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;滑动窗口变小导致发送的数据量表小，久之导致网络传输效率变低<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决方法:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nagle算法<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clark算法和延时ACK  </p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>网络拥塞:<br> &nbsp;&nbsp;&nbsp;路由器等网络设备来不及处理高数率到来的流量出现的丢包现象<br> &nbsp;&nbsp;&nbsp;判断：1.ack超时 2.连续收到同样的ack  </p><p>慢启动：<br> &nbsp;&nbsp;&nbsp;tcp会将大的数据分成若干小的分组，分为若干次发送，而不是一次全部发出去<br> &nbsp;&nbsp;&nbsp;cwdn按照两倍大小增加，大于慢启动门限是进入拥塞避免算法（指数增长）<br> &nbsp;&nbsp;&nbsp;拥塞窗口（cwdn）<br> &nbsp;&nbsp;&nbsp;慢启动门限（ssthresh）  </p><p>拥塞避免算法<br> &nbsp;&nbsp;&nbsp;cwdn 每次大小加1（线性增长）, 出现拥塞时cwdn和ssthresh被重置（一般ssthresh=cwdn/2, cwdn=1）， 然后进入慢启动算法<br> &nbsp;&nbsp;&nbsp;加法增大，乘法减小  </p><p>快重传：<br> &nbsp;&nbsp;&nbsp;接收方收到一个失序的报文段， 会不断重发相同的ACK（没收到包的序号）<br> &nbsp;&nbsp;&nbsp;发送方连续收到三个相同的Ack, 会立即发送对方Ack的包<br> &nbsp;&nbsp;&nbsp;解决了超时的问题， 但是没有解决重传哪些包的问题（需要sack算法）                            </p><p>快恢复：<br> &nbsp;&nbsp;&nbsp;出现超时重传或快重传（连续三个重复的ACK包)时:<br> &nbsp;&nbsp;&nbsp;ssthresh &nbsp;= cwdn/2<br> &nbsp;&nbsp;&nbsp;cwdn = ssthresh  </p><h2 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h2><p>快速重传与超时重传<br>超时重传:<br> &nbsp;&nbsp;&nbsp;RTO:(超时重传时间，发送方发出一个包，会启动定时器，定时器超时未收到包，则会重发，这个时间成为重传超时)， 由RTT（数据往返时间）根据公式计算出<br> &nbsp;&nbsp;&nbsp;RTO时间指数方式增加<br> &nbsp;&nbsp;&nbsp;定时器超时后，在滑动窗口内没有收到ACK的包都会重传（sack算法）<br>设置重发次数：<br> &nbsp;&nbsp;&nbsp;/proc/sys/net/ipv4/tcp_retries1<br> &nbsp;&nbsp;&nbsp;/proc/sys/net/ipv4/tcp_retries2  </p><h2 id="保活机制"><a href="#保活机制" class="headerlink" title="保活机制"></a>保活机制</h2><p>保活定时器<br>服务端探测死连机制（探测客户端宕机或重启, &nbsp;如果是主动关闭连接）<br>缺点：无法识别客户端宕机和还是报文不可达<br>设置：SO_KEEPALIVE  </p><h2 id="数据在不同层的叫法"><a href="#数据在不同层的叫法" class="headerlink" title="数据在不同层的叫法"></a>数据在不同层的叫法</h2><p>数据链路层 帧<br>网络层 包（tcp）, 报（udp）<br>传输层 段  </p><h2 id="arp是什么，实现，怎么找到MAC-arp欺骗"><a href="#arp是什么，实现，怎么找到MAC-arp欺骗" class="headerlink" title="arp是什么，实现，怎么找到MAC, arp欺骗"></a>arp是什么，实现，怎么找到MAC, arp欺骗</h2><p>利用arp缓存中ip与mac的映射，如果有对方mac可以直接通信，没有发给rap广播， 当对方收到后会将自己的MAC填到包里面返回<br>同时将发送方的ip和mac映射放在arp缓存中<br>arp欺骗: 主要方式是中间人攻击，达到获取通信双方数据又不被发现的效果<br>预防：使用arp网关  </p><h2 id="TCP粘包处理"><a href="#TCP粘包处理" class="headerlink" title="TCP粘包处理"></a>TCP粘包处理</h2><p>利用包体长度，bodylen<br> &nbsp;&nbsp;&nbsp;1. 如果缓冲区里面的消息长度小于消息头长度，不处理<br> &nbsp;&nbsp;&nbsp;2. 如果缓冲区长度大于等于bodylen + headlen, 处理  </p><h2 id="HTTP-请求的过程"><a href="#HTTP-请求的过程" class="headerlink" title="HTTP 请求的过程"></a>HTTP 请求的过程</h2><p>建立TCP连接-&gt;发送请求行-&gt;发送请求头-&gt;（到达服务器）发送状态行-&gt;发送响应头-&gt;发送响应数据-&gt;断TCP连接  </p><p>参考：<br><a href="https://blog.csdn.net/dog250/article/details/13760985" target="_blank" rel="noopener">TCP的TIME_WAIT快速回收与重用</a><br><a href="https://www.cnblogs.com/dadonggg/p/8778318.html" target="_blank" rel="noopener">解决TIME_WAIT过多造成的问题</a><br><a href="https://elf8848.iteye.com/blog/1739571" target="_blank" rel="noopener">TCP/IP TIME_WAIT状态原理</a><br><a href="https://blog.csdn.net/wuji0447/article/details/78356875" target="_blank" rel="noopener">tcp状态介绍最详细–没有之一</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&mid=2666543559&idx=1&sn=83cf0e9367511d6b311909a5b3dfc81e&chksm=80dcfd6cb7ab747af19259cce70621b269c5fae25582af7c57f5be904bc18e216625cf6f4157&mpshare=1&scene=24&srcid=0110n9eggIf8eEIoZnl2Loe5&key=02793bf78abe30c4c571e7a6695d4645e0c3637a779c7915ba755677395083d39ee60f9a9d204e28b6d06d279fff9d0a25171eac0cb3e8f126cf46a027d6459f015c13308729af2f9d27c88c38e270c4&ascene=14&uin=ODI0NTI3MTg0&devicetype=Windows+7&version=62060728&lang=zh_CN&pass_ticket=wXb/sgBYyv1S7izs0CuJXuDgNxtBHPyjdhjnyZMw7twBDQnbBA0IyQV1EnfMvwsI" target="_blank" rel="noopener">“三次握手，四次挥手”你真的懂吗？</a><br><a href="https://blog.csdn.net/wdscq1234/article/details/52430382" target="_blank" rel="noopener">TCP-IP详解：Delay ACK</a><br><a href="https://my.oschina.net/xinxingegeya/blog/485643" target="_blank" rel="noopener">TCP Nagle算法&amp;&amp;延迟确认机制</a><br><a href="https://blog.csdn.net/ce123_zhouwei/article/details/9050797" target="_blank" rel="noopener">TCP中的Nagle算法</a><br><a href="https://blog.csdn.net/wdscq1234/article/details/52444277" target="_blank" rel="noopener">TCP-IP详解：滑动窗口（Sliding Window)</a><br><a href="https://www.zhihu.com/question/32255109" target="_blank" rel="noopener">TCP协议的滑动窗口具体是怎样控制流量的</a><br><a href="https://blog.csdn.net/ordeder/article/details/43243425" target="_blank" rel="noopener">TCP带外数据（URG，MSG_OOB</a><br><a href="https://blog.csdn.net/gbasp2008/article/details/47666421" target="_blank" rel="noopener">带外数据和TCP紧急指针</a><br><a href="https://blog.csdn.net/u012122743/article/details/46484675" target="_blank" rel="noopener">TCP紧急数据</a><br><a href="https://blog.csdn.net/wdscq1234/article/details/52476231" target="_blank" rel="noopener">TCP-IP详解：超时重传机制</a><br><a href="https://blog.csdn.net/wdscq1234/article/details/52503315" target="_blank" rel="noopener">TCP-IP详解：SACK选项（Selective Acknowledgment）</a><br><a href="https://blog.csdn.net/q1007729991/article/details/70185266" target="_blank" rel="noopener">27-TCP 协议（快重传与快恢复）</a><br><a href="https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/" target="_blank" rel="noopener">聊一聊重传次数</a><br><a href="http://www.orczhou.com/index.php/2011/10/tcpip-protocol-start-rto/" target="_blank" rel="noopener">TCP/IP重传超时–RTO</a><br><a href="https://blog.csdn.net/q1007729991/article/details/69091877" target="_blank" rel="noopener">0-Linux 网络编程修炼指南——内功心法</a><br><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">TCP 的那些事儿（上）</a><br><a href="https://zhuanlan.zhihu.com/p/25569676" target="_blank" rel="noopener">从TCP三次握手说起–浅析TCP协议中的疑难杂症（1)</a><br><a href="https://zhuanlan.zhihu.com/p/25596865" target="_blank" rel="noopener">从TCP三次握手说起–浅析TCP协议中的疑难杂症（2）</a><br><a href="http://netsecurity.51cto.com/art/201303/386031.htm" target="_blank" rel="noopener">中间人攻击——ARP欺骗的原理、实战及防御</a><br><a href="https://blog.csdn.net/qq_37969433/article/details/79587026" target="_blank" rel="noopener">ARP欺骗的两种方式</a><br><a href="https://blog.csdn.net/Mary19920410/article/details/72857764" target="_blank" rel="noopener">浅析TCP之头部可选项</a><br><a href="https://blog.csdn.net/mary19920410/article/details/58030147" target="_blank" rel="noopener">TCP报文格式详解</a><br><a href="https://www.cnblogs.com/xiaomayizoe/p/5258754.html" target="_blank" rel="noopener">TCP和UDP的优缺点及区别</a><br><a href="https://blog.csdn.net/freeelinux/article/details/53823731" target="_blank" rel="noopener">muduo库chat server对TCP粘包问题的处理</a><br><a href="https://blog.csdn.net/yusiguyuan/article/details/17270679" target="_blank" rel="noopener">TCP分包方法 &amp;&amp; 粘包处理策略</a><br><a href="https://blog.csdn.net/lu_embedded/article/details/77430050" target="_blank" rel="noopener">Linux 网络编程——TCP 粘包及其解决方案</a><br><a href="https://juejin.im/post/5a8102e0f265da4e710f5910" target="_blank" rel="noopener">HTTP面试题都在这里</a><br><a href="https://www.zhihu.com/question/23202402" target="_blank" rel="noopener">HTTP是一个无状态的协议。这句话里的无状态是什么意思</a><br><a href="https://www.zhihu.com/question/24938934" target="_blank" rel="noopener">服务端是如何主动推送信息到客户端的？</a><br><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&mid=2247484323&idx=1&sn=5513334623b73352034a828badfe985d&chksm=972afa86a05d7390fe96222718fd9ce6c21fe700af7e7f9396449815a5323e7315d96681bcac&scene=0&xtrack=1&key=a539a6045067ac190e5c71cc4876a35ec2cab39ecc57c3618a3c22861a71c8bfa13cb8c4e1190e7ca56b6fa54c00b894874dabfdb24eb7aa3f45382bd07dd271a25982549dfd70f959b71db7aeb5d371&ascene=14&uin=ODI0NTI3MTg0&devicetype=Windows+7&version=62060739&lang=zh_CN&pass_ticket=UG6jIZiPy0h82EWKj8fu5ZN0dIyjwygUpMCiLLSskgXdEE9mhfeXBtYPbOR2lLEE" target="_blank" rel="noopener">程序员过关斩将–面试官再问你Http请求过程，怼回去！</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP和UDP的区别&quot;&gt;&lt;a href=&quot;#TCP和UDP的区别&quot; class=&quot;headerlink&quot; title=&quot;TCP和UDP的区别&quot;&gt;&lt;/a&gt;TCP和UDP的区别&lt;/h2&gt;&lt;p&gt;tcp连接是永久的只要没断开&lt;br&gt;tcp连接是指tcp协议栈维护的状态&lt;br&gt;tcp 流式协议，数据是有序的。面向连接可靠，慢，开销大，容易受攻击&lt;br&gt;udp 数据报协议，数据不保证有序。不需要连接， 不可靠，快，开销小&lt;/p&gt;
    
    </summary>
    
    
      <category term="协议" scheme="http://yoursite.com/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>cpp细节</title>
    <link href="http://yoursite.com/2020/01/08/cpp/cpp%E7%BB%86%E8%8A%82/"/>
    <id>http://yoursite.com/2020/01/08/cpp/cpp%E7%BB%86%E8%8A%82/</id>
    <published>2020-01-08T11:59:12.000Z</published>
    <updated>2020-02-16T05:52:51.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动构造函数中如果有拷贝动态内存要注意将指针赋空"><a href="#移动构造函数中如果有拷贝动态内存要注意将指针赋空" class="headerlink" title="移动构造函数中如果有拷贝动态内存要注意将指针赋空"></a>移动构造函数中如果有拷贝动态内存要注意将指针赋空</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_ptr(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">0</span>))&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"construct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a) : m_ptr(a.m_ptr)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"copy construct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    A(A&amp;&amp; a) : m_ptr(a.m_ptr)&#123;a.m_ptr = <span class="literal">nullptr</span>; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"move construct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~A()&#123;<span class="keyword">delete</span> m_ptr; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"destruct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span>* m_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="重载决议"><a href="#重载决议" class="headerlink" title="重载决议"></a>重载决议</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a_;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">foo(T&amp;&amp; v) : a_&#123;<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(v)&#125;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="keyword">const</span> foo&amp; rhs) : a_&#123;rhs.a_&#125;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">operator</span> <span class="built_in">std</span>::<span class="keyword">uint8_t</span>()&#123;<span class="keyword">return</span> a_;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo bar1&#123;<span class="number">256</span>&#125;, bar2&#123;bar1&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bar1.a_ == bar2.a_)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，编译器会选择会选择移动构造函数而不是拷贝构造，应为如果调用拷贝构造bar1会存在隐式转换.但是如果是默认的拷贝构造则会优先被调用<br><a href="https://stackoverflow.com/questions/53902448/template-constructor-and-copy-constructor" target="_blank" rel="noopener">Template constructor and copy constructor</a></p><h2 id="vector删除性能对比"><a href="#vector删除性能对比" class="headerlink" title="vector删除性能对比"></a>vector删除性能对比</h2><p><a href="https://sourcegraph.com/github.com/colinblack/language/-/blob/c++/stl/vector/vector_pop_back.cc#L14" target="_blank" rel="noopener">vector_pop_back.cc</a></p><h2 id="vector-构造函数"><a href="#vector-构造函数" class="headerlink" title="vector 构造函数"></a>vector 构造函数</h2><p>vector<inv> v(10)　构造一个size(不是capacity)为10的vector</p><h2 id="关联容器的构造函数"><a href="#关联容器的构造函数" class="headerlink" title="关联容器的构造函数"></a>关联容器的构造函数</h2><p>如map set unordered_map 中 使用[]操作符，首先会调无参构造函数，插入元素正确的方式是使用insert, 但是这会调用两次拷贝构造，需使用std::move。使用[]操作符复制是调用的是拷贝操作符，使用insert会调拷贝构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    Item(<span class="keyword">int</span> a): i(a)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a_;</span><br><span class="line">    <span class="keyword">int</span> b_;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Item&gt; v_;</span><br><span class="line">    Demo()</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = <span class="number">0</span>;    </span><br><span class="line">        b_ = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"no param "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Demo(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="built_in">vector</span>&lt;Item&gt;&amp; v)</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = a;    </span><br><span class="line">        b_ = b;</span><br><span class="line">        v_ = v;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"param "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Demo(<span class="keyword">const</span> Demo&amp; obj)</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = obj.a_;    </span><br><span class="line">        b_ = obj.b_;</span><br><span class="line">        v_ = <span class="built_in">std</span>::move(obj.v_);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"copy construct "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Demo&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> Demo&amp; obj)</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = obj.a_;</span><br><span class="line">        b_ = obj.b_;</span><br><span class="line">        v_ = <span class="built_in">std</span>::move(obj.v_);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"copy operator "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Item&gt; v;</span><br><span class="line">    v.push_back(Item(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">unsigned</span>, Demo&gt; m;</span><br><span class="line">    m.insert(&#123;<span class="number">1</span>, Demo(<span class="number">1</span>, <span class="number">2</span>, v)&#125;);</span><br><span class="line">    m[<span class="number">1</span>] = Demo(<span class="number">1</span>, <span class="number">2</span>, v);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m[<span class="number">1</span>].a_ &lt;&lt; <span class="string">" "</span> &lt;&lt; m[<span class="number">1</span>].b_ &lt;&lt; <span class="string">" "</span> &lt;&lt; m[<span class="number">1</span>].v_.size() &lt;&lt; <span class="string">" "</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C中的结构体"><a href="#C中的结构体" class="headerlink" title="C中的结构体"></a>C中的结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fd_set rd;</span><br><span class="line">fd_set all;</span><br><span class="line">ll = rd; <span class="comment">//合法</span></span><br><span class="line">fd_set 是个结构体, 里面有一个整型数组， c++中则会调用拷贝操作符</span><br></pre></td></tr></table></figure><h2 id="STL-中的类型"><a href="#STL-中的类型" class="headerlink" title="STL 中的类型"></a>STL 中的类型</h2><p>SIZE_TYPE：不同平台下长度不一样， 64位下是8字节，unsigned log<br><img src="/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png" alt="size_type"></p><p>这里返回值不能用unsigned去接， 否则找不到会返回-1, 实际find找不到只会返回sting::npos, 显然是类型溢出</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;移动构造函数中如果有拷贝动态内存要注意将指针赋空&quot;&gt;&lt;a href=&quot;#移动构造函数中如果有拷贝动态内存要注意将指针赋空&quot; class=&quot;headerlink&quot; title=&quot;移动构造函数中如果有拷贝动态内存要注意将指针赋空&quot;&gt;&lt;/a&gt;移动构造函数中如果有拷贝动态内存要注意将指针赋空&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A() : m_ptr(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&amp;#123;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;construct&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; A&amp;amp; a) : m_ptr(a.m_ptr)&amp;#123;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;copy construct&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A(A&amp;amp;&amp;amp; a) : m_ptr(a.m_ptr)&amp;#123;a.m_ptr = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;move construct&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~A()&amp;#123;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; m_ptr; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;destruct&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* m_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
  </entry>
  
</feed>
