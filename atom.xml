<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Colin&#39;s Home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-16T11:56:48.139Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Colinblack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>奔跑吧Linux内核入门篇笔记</title>
    <link href="http://yoursite.com/2020/11/16/%E5%A5%94%E8%B7%91%E5%90%A7Linux%E5%86%85%E6%A0%B8%E5%85%A5%E9%97%A8%E7%AF%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/11/16/%E5%A5%94%E8%B7%91%E5%90%A7Linux%E5%86%85%E6%A0%B8%E5%85%A5%E9%97%A8%E7%AF%87%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-16T11:31:08.000Z</published>
    <updated>2020-11-16T11:56:48.139Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="7-内存管理"><a href="#7-内存管理" class="headerlink" title="7. 内存管理"></a>7. 内存管理</h2><h3 id="7-1-从硬件角度看内存管理"><a href="#7-1-从硬件角度看内存管理" class="headerlink" title="7.1 从硬件角度看内存管理"></a>7.1 从硬件角度看内存管理</h3><h4 id="7-1-2-分段机制"><a href="#7-1-2-分段机制" class="headerlink" title="7.1.2  分段机制"></a>7.1.2  分段机制</h4><p>解决地址空间保护问题, 总结为增加一个虚拟内存, 通过cpu提供的地址映射方法将虚拟I地址转换成实际物理地址, 多进程运行时虚拟地址空间相互隔离<br>缺点: 内存使用效率低下, 以进程为单位换入换出, 内存不足时需要将整个进程空间换出到磁盘</p><h4 id="7-1-3-分页机制"><a href="#7-1-3-分页机制" class="headerlink" title="7.1.3 分页机制"></a>7.1.3 分页机制</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;7-内存管理&quot;&gt;&lt;a href=&quot;#7-内存管理&quot; class=&quot;headerlink&quot; title=&quot;7. 内存管理&quot;&gt;&lt;/a&gt;7. 内存管理&lt;/h2&gt;&lt;h3 id=&quot;7-1-从硬件角度看内存管理&quot;&gt;&lt;a href=&quot;#7-1
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux内核" scheme="http://yoursite.com/tags/Linux%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>微服务实战</title>
    <link href="http://yoursite.com/2020/11/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2020/11/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98/</id>
    <published>2020-11-14T10:43:00.000Z</published>
    <updated>2020-11-15T02:49:03.673Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>微服务实战</p><h3 id="PHP电商单体应用准备"><a href="#PHP电商单体应用准备" class="headerlink" title="PHP电商单体应用准备　"></a>PHP电商单体应用准备　</h3><h4 id="基于-Laravel-开源项目-Laracom-快速构建在线商城系统"><a href="#基于-Laravel-开源项目-Laracom-快速构建在线商城系统" class="headerlink" title="基于 Laravel 开源项目 Laracom 快速构建在线商城系统"></a>基于 Laravel 开源项目 Laracom 快速构建在线商城系统</h4><h5 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备　"></a>1. 环境准备　</h5><p>开始之前，需要确保本地具备以下软件:</p><ul><li>PHP 7.1+</li><li>Composer</li><li>Git</li></ul><h5 id="2-安装Homestead"><a href="#2-安装Homestead" class="headerlink" title="2. 安装Homestead"></a>2. 安装Homestead</h5><ol><li><p>安装vagrant<br>直接去官网下载:<br><a href="https://www.vagrantup.com/downloads" target="_blank" rel="noopener">https://www.vagrantup.com/downloads</a></p></li><li><p>将 Homestead Vagrant 盒子 laravel/homesterad 添加到 Vagrant 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure><p>选择３<br><img src="https://i.loli.net/2020/10/25/Bh8J2wVa6ZErOy7.png"/></p></li><li><p>克隆Homestead，克隆完成后，你需要检查 Homestead 的版本标签，因为 master 分支不会总是稳定版本，你可以在 <a href="https://github.com/laravel/homestead/releases" target="_blank" rel="noopener">GitHub Release Page</a> 查找到最新稳定版本然后在本地将其检出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Homestead</span><br><span class="line">git checkout v11.3.0</span><br></pre></td></tr></table></figure></li><li><p>执行初始化脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash init.sh</span><br></pre></td></tr></table></figure></li><li>配置 Homestead<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Homestead</span><br><span class="line">cp Homestead.yaml.example Homestead.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置如下</span></span><br><span class="line">ip: "192.168.10.10"</span><br><span class="line">   memory: 2048</span><br><span class="line">   cpus: 2</span><br><span class="line">   provider: virtualbox</span><br><span class="line"></span><br><span class="line">   authorize: ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">   keys:</span><br><span class="line">       - ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">   folders:</span><br><span class="line">       - map: /home/cp/data/laracom</span><br><span class="line">         to: /home/vagrant/laracom</span><br><span class="line">         type: "rsync"</span><br><span class="line">         options:</span><br><span class="line">             rsync__args: ["--verbose", "--archive", "--delete", "-zz"]</span><br><span class="line">             rsync__exclude: ["node_modules"]</span><br><span class="line"></span><br><span class="line">   sites:</span><br><span class="line">       - map: laracom.test</span><br><span class="line">         to: /home/vagrant/laracom/public</span><br><span class="line"></span><br><span class="line">   databases:</span><br><span class="line">       - laracom</span><br><span class="line"></span><br><span class="line">   features:</span><br><span class="line">       - mariadb: false</span><br><span class="line">       - ohmyzsh: false</span><br><span class="line">       - webdriver: false</span><br><span class="line">       - backup: true</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash"> ports:</span></span><br><span class="line"><span class="meta">   #</span><span class="bash">     - send: 50000</span></span><br><span class="line"><span class="meta">   #</span><span class="bash">       to: 5000</span></span><br><span class="line"><span class="meta">   #</span><span class="bash">     - send: 7777</span></span><br><span class="line"><span class="meta">   #</span><span class="bash">       to: 777</span></span><br><span class="line"><span class="meta">   #</span><span class="bash">       protocol: udp</span></span><br></pre></td></tr></table></figure></li><li>安装virtualbox  </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  virtualbox</span><br></pre></td></tr></table></figure><h5 id="安装Laracom"><a href="#安装Laracom" class="headerlink" title="安装Laracom"></a>安装Laracom</h5><ol><li>安装Composer<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure></li><li>创建Laracom <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project jsdecena/laracom --prefer-dist  --ignore  -platform-reqs</span><br></pre></td></tr></table></figure></li><li><p>进入Laracom根目录，修改环境配置文件.env</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意是laracom根目录</span></span><br><span class="line">cd ~/laracom</span><br><span class="line"></span><br><span class="line">＃.env文件中修改如下</span><br><span class="line">   APP_URL=http://laracom.test</span><br><span class="line"></span><br><span class="line">   DB_CONNECTION=mysql</span><br><span class="line">   DB_HOST=127.0.0.1</span><br><span class="line">   DB_PORT=3306</span><br><span class="line">   DB_DATABASE=laracom</span><br><span class="line">   DB_USERNAME=homestead</span><br><span class="line">   DB_PASSWORD=secret</span><br></pre></td></tr></table></figure></li><li><p>安装前端依赖并编译前端资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li><li><p>配置Homestead<br>　参考2.5中的配置</p></li><li><p>重启虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure></li><li><p>登录虚拟机, 进入项目根目录运行数据库迁移和填充命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br><span class="line">   cd /home/vagrant/laracom</span><br><span class="line">   composer install</span><br><span class="line">   php artisan migrate --seed</span><br></pre></td></tr></table></figure><p>　执行数据库迁移时如果.env中配置的数据库没有创建(上面的配置数据库为laracom)要自行创建<br>　<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> laracom</span><br></pre></td></tr></table></figure></p></li><li><p>生成文件上传目录软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan storage:link</span><br></pre></td></tr></table></figure></li><li><p>访问构建的网页<br>　　在浏览器中通过 <a href="http://laracom.test" target="_blank" rel="noopener">http://laracom.test</a> 访问</p></li></ol><p>参考:<br>  <a href="https://xueyuanjun.com/post/19915.html" target="_blank" rel="noopener">重量级开发环境：Homestead</a><br>  <a href="https://xueyuanjun.com/post/20000" target="_blank" rel="noopener">基于 Laravel 开源项目 Laracom 快速构建在线商城系统</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;微服务实战&lt;/p&gt;
&lt;h3 id=&quot;PHP电商单体应用准备&quot;&gt;&lt;a href=&quot;#PHP电商单体应用准备&quot; class=&quot;headerlink&quot; title=&quot;PHP电商单体应用准备　&quot;&gt;&lt;/a&gt;PHP电商单体应用准备　&lt;/h3&gt;&lt;h4 
      
    
    </summary>
    
    
      <category term="微服务" scheme="http://yoursite.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode题解</title>
    <link href="http://yoursite.com/2020/08/27/leetcode%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/08/27/leetcode%E9%A2%98%E8%A7%A3/</id>
    <published>2020-08-26T23:33:46.000Z</published>
    <updated>2020-11-15T02:49:03.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a>5.最长回文子串</h4><p>状态转移方程:<br>子串长度大于２:</p><script type="math/tex; mode=display">P(i,j) = P(i+1, j-1) ∧ (Si == Sj)</script><p>否则:</p><script type="math/tex; mode=display">\begin{cases} P(i,i) = true \\ P(i, i+1) = (Si == Si+1) \end{cases}</script><p>遍历方式:</p><ol><li>斜着遍历</li><li>从上至下遍历</li></ol><h4 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91.解码方法"></a>91.解码方法</h4><p>状态转移方程:</p><script type="math/tex; mode=display">f(i)=\begin{cases} 1, \quad i = 0\\ f(i-1)+f(i-2)\{i-1=1 or i-1=2  and i < 7\},\quad i>0 \end{cases}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h3&gt;&lt;h4 id=&quot;5-最长回文子串&quot;&gt;&lt;a href=&quot;#5-最长回文子串&quot; class=&quot;headerlink&quot; title=&quot;5
      
    
    </summary>
    
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://yoursite.com/2020/08/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2020-08-26T22:10:02.000Z</published>
    <updated>2020-11-16T11:22:15.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tcp中的异常处理"><a href="#Tcp中的异常处理" class="headerlink" title="　Tcp中的异常处理　"></a>　Tcp中的异常处理　</h2><p>当客户段因位置原因崩溃或异常退出后，内核会发给服务端一条rst消息, 此时epoll变为可读，read 到rst报错, 一下情况会收到对端rst消息:</p><ol><li>connect一个不存在的端口，客户端会收到一条RST，报错Connection refused</li><li>程序崩溃或异常退出，会向对端发送</li><li>对端断电重启，send数据时会收到来自对端的RST</li><li>close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由                SO_LINGER选项来控制的</li></ol><p>有些情况服务端感知不到客户端断开:</p><ol><li>客户端断电或者网络异常　</li><li>拔掉网线<br>这个时候服务端可能存在资源泄露的情况, 直至服务端资源耗尽拒绝提供服务, 解决方法加心跳</li></ol><h3 id="Tcp半开连接"><a href="#Tcp半开连接" class="headerlink" title="Tcp半开连接"></a>Tcp半开连接</h3><p><a href="https://blog.csdn.net/larry_zeng1/article/details/78437050" target="_blank" rel="noopener">https://blog.csdn.net/larry_zeng1/article/details/78437050</a></p><p>引用:<br>    <a href="https://segmentfault.com/a/1190000017411330" target="_blank" rel="noopener">断开TCP连接</a><br>    <a href="https://cloud.tencent.com/developer/news/24414" target="_blank" rel="noopener">TCP 异常关闭研究分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tcp中的异常处理&quot;&gt;&lt;a href=&quot;#Tcp中的异常处理&quot; class=&quot;headerlink&quot; title=&quot;　Tcp中的异常处理　&quot;&gt;&lt;/a&gt;　Tcp中的异常处理　&lt;/h2&gt;&lt;p&gt;当客户段因位置原因崩溃或异常退出后，内核会发给服务端一条rst消息, 此时e
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>linux内核</title>
    <link href="http://yoursite.com/2020/08/09/linux%E5%86%85%E6%A0%B8/"/>
    <id>http://yoursite.com/2020/08/09/linux%E5%86%85%E6%A0%B8/</id>
    <published>2020-08-09T12:07:41.000Z</published>
    <updated>2020-11-15T02:49:03.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理　"></a>内存管理　</h2><h4 id="物理内存管理"><a href="#物理内存管理" class="headerlink" title="物理内存管理　"></a>物理内存管理　</h4><h3 id="页"><a href="#页" class="headerlink" title="页"></a>页</h3><h3 id="区域"><a href="#区域" class="headerlink" title="区域　"></a>区域　</h3><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配　"></a>内存分配　</h3><h3 id="Slab-Slub-Slob"><a href="#Slab-Slub-Slob" class="headerlink" title="Slab, Slub, Slob"></a>Slab, Slub, Slob</h3><h3 id="高端内存"><a href="#高端内存" class="headerlink" title="高端内存　"></a>高端内存　</h3><h3 id="Per-CPU"><a href="#Per-CPU" class="headerlink" title="Per-CPU"></a>Per-CPU</h3><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存　"></a>虚拟内存　</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内存管理&quot;&gt;&lt;a href=&quot;#内存管理&quot; class=&quot;headerlink&quot; title=&quot;内存管理　&quot;&gt;&lt;/a&gt;内存管理　&lt;/h2&gt;&lt;h4 id=&quot;物理内存管理&quot;&gt;&lt;a href=&quot;#物理内存管理&quot; class=&quot;headerlink&quot; title=&quot;物理内
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux内核" scheme="http://yoursite.com/tags/Linux%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>interview</title>
    <link href="http://yoursite.com/2020/08/03/interview/"/>
    <id>http://yoursite.com/2020/08/03/interview/</id>
    <published>2020-08-03T12:16:31.000Z</published>
    <updated>2020-11-15T07:28:46.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列　"></a>消息队列　</h2><h3 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列　"></a>为什么使用消息队列　</h3><ol><li><p>解耦<br>解耦前:<br><img src="https://i.loli.net/2020/11/15/L2mjEoezUJ87sGy.png" alt="interview_2020080401"><br>解耦后:<br><img src="https://i.loli.net/2020/11/15/S1gNdUCF8ZEbM5X.png" alt="interview_2020080402">  </p></li><li><p>异步<br>同步:<br><img src="https://i.loli.net/2020/11/15/9Z3ipqUPI1R4AaQ.png" alt="interview_2020080403">  </p></li></ol><p>异步:<br><img src="https://i.loli.net/2020/11/15/toDG9L1z3yEOu5B.png" alt="interview_2020080404">  </p><ol><li>削峰<br>削峰前:<br><img src="https://i.loli.net/2020/11/15/Fc8ISDesT2o3dGV.png" alt="interview_2020080405">  </li></ol><p>削峰后:<br><img src="https://i.loli.net/2020/11/15/ENX4bsKlcG7DhwC.png" alt="interview_2020080406">  </p><h3 id="消息队列优缺点"><a href="#消息队列优缺点" class="headerlink" title="消息队列优缺点　　"></a>消息队列优缺点　　</h3><p><img src="https://i.loli.net/2020/11/15/BbnIu4KMaYrSeZv.png" alt="interview_2020080407">  </p><h3 id="kafka-activemq-rabbitmq-rocketmq都有哪些优缺点"><a href="#kafka-activemq-rabbitmq-rocketmq都有哪些优缺点" class="headerlink" title="kafka, activemq, rabbitmq, rocketmq都有哪些优缺点　　"></a>kafka, activemq, rabbitmq, rocketmq都有哪些优缺点　　</h3><div class="table-container"><table><thead><tr><th style="text-align:left">特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td style="text-align:left">单机吞吐量</td><td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td><td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td><td>10万级，RocketMQ也是可以支撑高吞吐的一种MQ</td><td>10万级别，这是kafka最大的优点，就是吞吐量高。 一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td style="text-align:left">topic数量对吞吐量的影响</td><td></td><td></td><td>topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降 这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic</td><td>topic从几十个到几百个的时候，吞吐量会大幅度下降 所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源</td></tr><tr><td style="text-align:left">时效性</td><td>ms级</td><td>微秒级，这是rabbitmq的一大特点，延迟是最低的</td><td>ms级</td><td>延迟在ms级以内</td></tr><tr><td style="text-align:left">可用性</td><td>高，基于主从架构实现高可用性</td><td>高，基于主从架构实现高可用性</td><td>非常高，分布式架构</td><td>非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td style="text-align:left">消息可靠性</td><td>有较低的概率丢失数据</td><td></td><td>经过参数优化配置，可以做到0丢失</td><td>经过参数优化配置，消息可以做到0丢失</td></tr><tr><td style="text-align:left">功能支持</td><td>MQ领域的功能极其完备</td><td>基于erlang开发，所以并发能力很强，性能极其好，延时很低</td><td>MQ功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td></tr><tr><td style="text-align:left">优劣势总结</td><td>非常成熟，功能强大，在业内大量的公司以及项目中都有应用 偶尔会有较低概率丢失消息 而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本 而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用</td><td>erlang语言开发，性能极其好，延时很低； 吞吐量到万级，MQ功能比较完备 而且开源提供的管理界面非常棒，用起来很好用 社区相对比较活跃，几乎每个月都发布几个版本分 在国内一些互联网公司近几年用rabbitmq也比较多一些 但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。 而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。 而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。</td><td>接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障 日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景 而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码 还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的</td><td>kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展 同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量 而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略 这个特性天然适合大数据实时计算以及日志收集</td></tr></tbody></table></div><p>消息队列技术选型　<br>中小型公司　RabbitMQ<br>大型公司，基础架构研发实力较强　RocketMQ<br>大数据领域的实时计算、日志采集等场景　Kafka  </p><h3 id="消息队列如何保证高可用"><a href="#消息队列如何保证高可用" class="headerlink" title="消息队列如何保证高可用　"></a>消息队列如何保证高可用　</h3><ul><li>RabbitMQ的高可用性　　<br>　rabbitmq有三种模式：单机模式，普通集群模式，镜像集群模式　</li></ul><ol><li>单机模式　<br>生产没人用单机模式　</li></ol><ol><li><p>普通集群模式　<br><img src="https://i.loli.net/2020/11/15/cSLZMTBUCwDOa5h.png" alt="interview_2020080501">  </p></li><li><p>镜像集群模式<br><img src="https://i.loli.net/2020/11/15/EemrsOtKDALGnBa.png" alt="interview_2020080502"><br>如何开启:在管理控制界面新增策略，要求数据同步到所有节点的，也可以要求就同步到指定数量的节点　　</p></li></ol><ul><li>Kafka的高可用　<br><img src="https://i.loli.net/2020/11/15/SNdLHPMDcuKUnsb.png" alt="interview_2020080503">  </li></ul><h3 id="从消息队列消费到重复数据怎么办"><a href="#从消息队列消费到重复数据怎么办" class="headerlink" title="从消息队列消费到重复数据怎么办　"></a>从消息队列消费到重复数据怎么办　</h3><p>消息队列都可能提供重复数据，这个要自己保证　<br><img src="https://i.loli.net/2020/11/15/xcyIa1hnmzsDbSP.png" alt="interview_2020080504">  </p><p>如何保证数据幂等性　<br><img src="https://i.loli.net/2020/11/15/4179saGnEh8qHXZ.png" alt="interview_2020080505"><br>幂等性: 重复多次请求保证数据状态不出错(例如数据重复,数据改变)<br>方案</p><ol><li>根据主键查，如果数存在则不插入 </li><li>写redis,　天然幂等　</li><li>生产者发送每条数据时，加一个全局唯一的id，类似订单id，消费者拿到id后先根据id查询(比如查redis)<br>,如果没有数据，则将id写入redis,　否则不处理　</li></ol><h3 id="发送消息队列的数据丢了怎么办"><a href="#发送消息队列的数据丢了怎么办" class="headerlink" title="发送消息队列的数据丢了怎么办　"></a>发送消息队列的数据丢了怎么办　</h3><h4 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h4><ul><li>生产者弄丢数据　<br>生产者发送数据时可能由于网络问题,　在消息队列收到之前弄丢了，有两种方法解决</li></ul><ol><li><p>rabbitmq事务功能　<br>开启事务(channel.txSelect), 发送消息如果没有被rabbitmq收到，生产者会收到异常,　此时回滚事务(channel.txRollback), 重发, 如果接收到提交事务(channel.txCommit)<br>缺点: 降低吞吐量, 耗性能　</p></li><li><p>confirm 模式　<br>生产者设置confirm后, 每次发消息会分配一个唯一id, 如果写入rabbitmq会传回一个ack消息，如果rabbitmq没有处理，会回调生产者注册的nack接口，然后重试.　生产者可以在内存里维护每个消息id状态, 超过时间没收到消息回调，可以重发 </p></li></ol><p>事务同步，阻塞<br>confirm 异步，非阻塞　</p><ul><li>rabbitmq弄丢数据　<br>开启持久化, 极小概率下rabbitmq没持久化完自己挂了导致少量数据丢失　</li></ul><p>设置持久化方法</p><ol><li>创建queue时持久化，这样能保证持久化元数据，但是不能持久化数据本身</li><li>发送消息时设置deliveryMode=2,此时会将消息持久化到磁盘.<br>必须同时设置这两个持久化,　rabbitmq挂了重启后会从磁盘上恢复queue里面的数据　</li></ol><p>持久化配合confirm<br>只有消息被持久化到磁盘后才ack</p><p>缺点:<br>开启持久化也可能有数据丢失现象, 当消息写到rabbitmq后没来得及持久化, 此时rabbitmq挂了导致数据丢失　</p><ul><li>消费者丢失数据　　<br>收到数据还没消费进程挂了, 数据丢失, 此时使用rabbitmq的ack机制<br>首先关闭rabbitmq自动ack, 自己处理完消息再主动ack</li></ul><p>rabbitmq 丢数据情况　<br>    <img src="https://i.loli.net/2020/08/11/3kZ2WGNTSzxuy7v.png"/></p><h4 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h4><p>kafka 某个broker宕机, 然后重新选举partiton的leader时, 刚好数据没有同步，此时leader挂了,然后选举某了follorer成leader, 造成一部分数据丢失　<br>为保证数据不丢要设置４个参数:</p><ol><li>给topic设置replication.factor&gt;1, 每个partition至少２个副本</li><li>min.insync.replicas&gt;1, 一个leader至少感知一个follower还和自己保持联系</li><li>producer端acks=all, 每条数据必须写入所有replica后才能认为写成功　</li><li>producer端设置retries=Max, 一旦写入失败，无限重试　　</li></ol><p>生产者不会丢数据<br>如果按照上述的思路设置了ack=all，一定不会丢，要求是，leader接收到消息，所有的follower都同步到了消息之后，才认为本次写成功了。如果条件不满足，生产者会不断的重试无限次</p><p>kfka 丢数据情况<br><img src="https://i.loli.net/2020/08/11/BnyzJCSPtmVbTFM.png"/></p><h3 id="如何保证消息的顺序"><a href="#如何保证消息的顺序" class="headerlink" title="如何保证消息的顺序　"></a>如何保证消息的顺序　</h3><h4 id="顺序错乱的场景"><a href="#顺序错乱的场景" class="headerlink" title="顺序错乱的场景　"></a>顺序错乱的场景　</h4><ol><li><p>rabbitmq<br>多个消费者从一个queue里面读数据<br><img src="https://i.loli.net/2020/08/11/nUSD8KyliE7IZMN.png"/></p></li><li><p>kafka<br>－个topic,　一个partition, －个consumer,内存多线程数据乱掉<br><img src="https://i.loli.net/2020/08/11/lU9fbJqWs2YcCLo.png"/></p></li></ol><h4 id="解决"><a href="#解决" class="headerlink" title="解决　"></a>解决　</h4><ol><li><p>rabbitmq<br>拆分多个queue，每个queue一个consumer，或者一个队列对应一个consumer, 内部用内存队列做排队, 分发给底层不同的worker来处理<br><img src="https://i.loli.net/2020/08/11/ZvkeipAzFfbnj8R.png"/></p></li><li><p>kafka<br>一个topic，一个partition，一个consumer，内部单线程消费，写N个内存queue，N个线程分别消费一个内存queue即可<br><img src="https://i.loli.net/2020/08/11/rRAukDibUgj5tqc.png"/></p></li></ol><h3 id="消息积压怎么办"><a href="#消息积压怎么办" class="headerlink" title="消息积压怎么办"></a>消息积压怎么办</h3><ul><li>问题的实质是消费端出了问题，解决思路如下:</li></ul><ol><li>先修复consumer的问题，确保其恢复消费速度，然后将现有cnosumer都停掉</li><li>新建一个topic，partition是原来的10倍，临时建立好原先10倍或者20倍的queue数量</li><li>然后写一个临时的分发数据的consumer程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的10倍数量的queue</li><li>临时征用10倍的机器来部署consumer，每一批consumer消费一个临时queue的数据</li><li>这种做法相当于是临时将queue资源和consumer资源扩大10倍，以正常的10倍速度来消费数据</li><li>等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息</li></ol><ul><li><p>如果使用的是rabbitmq,而且设置了过期时间(TTL)，消息在queue中积压超过一定时间被清理掉了<br>批量重导, 将积压的数据丢掉, 等高峰期过后, 将丢掉的数据找回重新导入mq里</p></li><li><p>如果使用方法１后积压消息很长时间还是没处理, 导致mq快写满　<br>　只能接消费一个丢弃一个, 快速消费数据, 再执行方案2<br>　<img src="https://i.loli.net/2020/08/12/ubWdyjXxhLA4i2P.png"/></p></li></ul><h3 id="如何设计消息队列"><a href="#如何设计消息队列" class="headerlink" title="如何设计消息队列　"></a>如何设计消息队列　</h3><p>　1. mq支持伸缩性, 能快速扩容, 就可以增加吞吐量和容量, 可以参考kafka设计理念做成分布式系统, broker-&gt;topic-&gt;partition, 每个partition放一个机器, 存一部分数据, 如果现在资源不够, 给topic增加partition, 然后后做数据迁移, 增加机器　<br>　2. 要考虑持久化, 顺序写磁盘,　这样没有磁盘随机读写的寻址开销, 性能就提高了(kafka思路)<br>　3. 可用性, 要保证高可用, 参考kafka怎样保证高可用<br>　4. 数据0丢失</p><h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存　"></a>分布式缓存　</h2><h3 id="项目中如何使用缓存"><a href="#项目中如何使用缓存" class="headerlink" title="项目中如何使用缓存　"></a>项目中如何使用缓存　</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;消息队列&quot;&gt;&lt;a href=&quot;#消息队列&quot; class=&quot;headerlink&quot; title=&quot;消息队列　&quot;&gt;&lt;/a&gt;消息队列　&lt;/h2&gt;&lt;h3 id=&quot;为什么使用消息队列&quot;&gt;&lt;a href=&quot;#为什么使用消息队列&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统设计</title>
    <link href="http://yoursite.com/2020/07/29/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2020/07/29/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-07-29T11:49:21.000Z</published>
    <updated>2020-11-15T07:41:38.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求原型设计"><a href="#需求原型设计" class="headerlink" title="需求原型设计"></a>需求原型设计</h3><p>主要设计页面(墨刀原型设计工具)</p><ul><li>前台用户登录页面，商品展示页面，抢购结果页面 </li><li>后台订单管理页面 </li></ul><h3 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h3><ul><li>前端页面需要承载大流量</li><li>在大并发状态下要解决超卖问题</li><li>后端接口需要满足横向扩展<br><img src="https://i.loli.net/2020/11/15/FtBYQHPuaxyLzUC.png" alt="project_seckill"></li></ul><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><ul><li>定义和特征<br>RabbitMQ是面向消息的中间件，用于组件之间的解耦，主要体现在消息的发送者和消费者之间无强依赖关系<br>RabbitMQ特点，高可用, 扩展性, 多语言客户端，管理界面等<br>主要使用场景，流量削峰，异步处理，应用解耦 </li><li>管理命令介绍　<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rabbtmq-plugins list  &#x2F;&#x2F;查看插件</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management  &#x2F;&#x2F;安装管理界面</span><br><span class="line">rabbitmq-plugins disable rabbitmq_management &#x2F;&#x2F;卸载管理界面　</span><br><span class="line">rabbitmqctl list_users  &#x2F;&#x2F;列出已创建的用户</span><br><span class="line">rabbitmqctl set_user_tags　colin administrator　&#x2F;&#x2F;设置用户和密码</span><br><span class="line">rabbitmqctl set_user_tags　colin administrator　&#x2F;&#x2F;设置角色</span><br></pre></td></tr></table></figure></li><li>核心概念<br>VirtualHost<br>Connection<br>Exchange<br>Channel<br>Queue<br>Binding </li></ul><p>*常用工作模式　</p><ol><li><p>Simple模式　<br><img src="https://i.loli.net/2020/11/15/sBLOTY5aGIrV2iN.png" alt="project_seckill02">  </p></li><li><p>Work, 工作模式<br>　一个消息只能被一个消费者获取　<br><img src="https://i.loli.net/2020/11/15/rAZk5BtOSqgluYQ.png" alt="project_seckill_2020073101"></p></li><li><p>Publish/Subscribe 订阅模式<br>消息被路由投递给多个队列，一个消息被多个消费者获取<br><img src="https://i.loli.net/2020/11/15/TSKRGmzy6i8XfcM.png" alt="project_seckill_2020080201"></p></li><li><p>Routing, 路由模式　<br>一个消息被多个消费者获取，并且消息的目标队列可被生产者指定<br><img src="https://i.loli.net/2020/11/15/5ob4Hif3r9KtDml.png" alt="project_seckill_2020080202"></p></li></ol><ol><li>Topic模式<br>用BindingKey 以通配符， (#：一个或多个词，*：一个词)的方式指定<br><img src="https://i.loli.net/2020/11/15/TSKRGmzy6i8XfcM.png" alt="project_seckill_2020080203"></li></ol><ol><li>RPC模式</li></ol><h3 id="后台功能开发"><a href="#后台功能开发" class="headerlink" title="后台功能开发　　"></a>后台功能开发　　</h3><ul><li>商品模型设计开发　　</li><li>商品增删改查功能开发</li><li>后台商品管理页面　</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;需求原型设计&quot;&gt;&lt;a href=&quot;#需求原型设计&quot; class=&quot;headerlink&quot; title=&quot;需求原型设计&quot;&gt;&lt;/a&gt;需求原型设计&lt;/h3&gt;&lt;p&gt;主要设计页面(墨刀原型设计工具)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前台用户登录页面，商品展示页面，抢购结果页面 &lt;
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/categories/project/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>c++中对象数组初始化问题</title>
    <link href="http://yoursite.com/2020/07/26/cpp%E4%B8%AD%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/07/26/cpp%E4%B8%AD%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-26T02:10:32.000Z</published>
    <updated>2020-11-15T02:49:03.669Z</updated>
    
    <content type="html"><![CDATA[<p>如果对象数组中没有默认构造函数，要像下面这样初始化:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span>* p)</span><br><span class="line">       : p_(p)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *p_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   A a[<span class="number">3</span>] = &#123;&amp;i, &amp;i, &amp;i&#125;; <span class="comment">//如果有100万个元素就要写100万个&amp;i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>有两种解决思路</p><ul><li>使用std::array 和 std::index_sequence</li><li>利用宏自动生成100万个&amp;i</li></ul><h3 id="利用-std-array-和-std-index-sequence"><a href="#利用-std-array-和-std-index-sequence" class="headerlink" title="利用 std::array 和 std::index_sequence"></a>利用 std::array 和 std::index_sequence</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">foo_t</span>(<span class="keyword">int</span>* i)</span><br><span class="line">     : i_(i)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo_t"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foo_t</span>(<span class="keyword">const</span> <span class="keyword">foo_t</span>&amp; obj)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo_t copy"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">        i_ = obj.i_; </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">int</span>* i_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foo_t</span> make_foo(<span class="keyword">int</span>* i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">foo_t</span>(i);  <span class="comment">//这里如果使用std::forward等于将右值转为左值,左值生成一个副本，多了一次拷贝</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span>...Is&gt;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">foo_t</span>, <span class="keyword">sizeof</span>...(Is)&gt; make_foos(<span class="built_in">std</span>::index_sequence&lt;Is...&gt;, <span class="keyword">int</span>* i) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; (Is, make_foo(i))... &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">foo_t</span>, N&gt; make_foos(<span class="keyword">int</span>* i) &#123;</span><br><span class="line">    <span class="keyword">return</span> make_foos(<span class="built_in">std</span>::make_index_sequence&lt;N&gt;(), i);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">foo_t</span>, 10&gt; a = make_foos&lt;<span class="number">10</span>&gt;(&amp;i);  <span class="comment">//返回值不会有拷贝，详见rvo</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方式也有缺陷，当元素为100万时编译速度很慢, gcc异常退出 </p><h3 id="使用宏展开"><a href="#使用宏展开" class="headerlink" title="使用宏展开"></a>使用宏展开</h3><p>参考ttl库的实现<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_0(m,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_1(m,p) m(1,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_2(m,p) m(2,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_3(m,p) m(3,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_4(m,p) m(4,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_5(m,p) m(5,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_6(m,p) m(6,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_7(m,p) m(7,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_8(m,p) m(8,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_9(m,p) m(9,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_LAST_REPEAT_10(m,p) m(10,p)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_0(m,l,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_1(m,l,p) TTL_REPEAT_0(m,l,p) m(1,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_2(m,l,p) TTL_REPEAT_1(m,l,p) m(2,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_3(m,l,p) TTL_REPEAT_2(m,l,p) m(3,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_4(m,l,p) TTL_REPEAT_3(m,l,p) m(4,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_5(m,l,p) TTL_REPEAT_4(m,l,p) m(5,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_6(m,l,p) TTL_REPEAT_5(m,l,p) m(6,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_7(m,l,p) TTL_REPEAT_6(m,l,p) m(7,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_8(m,l,p) TTL_REPEAT_7(m,l,p) m(8,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_9(m,l,p) TTL_REPEAT_8(m,l,p) m(9,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT_10(m,l,p) TTL_REPEAT_9(m,l,p) m(10,p)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_0 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_1 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_2 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_3 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_4 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_5 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_6 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_7 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_8 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_9 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_CNTDEC_10 9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_APPEND( x, y ) TTL_APPEND1(x,y) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_APPEND1( x, y ) x ## y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_DEC(n) TTL_APPEND(TTL_CNTDEC_, n)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_REPEAT(n, m, l, p) TTL_APPEND(TTL_REPEAT_, TTL_DEC(n))(m,l,p) TTL_APPEND(TTL_LAST_REPEAT_,n)(l,p)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_TPARAM(n,t)  t,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_TPARAM_END(n,t) t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_TPARAMSX(n,t) TTL_REPEAT(n, TTL_TPARAM, TTL_TPARAM_END, t)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TTL_TPARAMS(n, T) TTL_TPARAMSX(n,T)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING( x ) TO_STRING1( x )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING1( x ) #x</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span>* i)</span><br><span class="line">    :i_(i)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * i_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  std::cout &lt;&lt; TO_STRING(TTL_TPARAMSX(1, &amp;i)) &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    A a[<span class="number">10</span>] = &#123;TTL_TPARAMSX(<span class="number">10</span>, &amp;i)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用placement-new"><a href="#使用placement-new" class="headerlink" title="使用placement new"></a>使用placement new</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span>* p)</span><br><span class="line">        : p_(p)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *p_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> elemType = <span class="built_in">std</span>::aligned_storage&lt;<span class="keyword">sizeof</span>(A), <span class="keyword">alignof</span>(A)&gt;::type;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> count = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    elemType a[count];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; count: ++idx) &#123;</span><br><span class="line">         <span class="keyword">new</span> (&amp;a[idx]) A(&amp;i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; count: ++idx) &#123;</span><br><span class="line">         <span class="keyword">reinterpret_cast</span>&lt;A&amp;&gt;(a[idx]).~A();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://stackoverflow.com/questions/63068079/initialize-an-array-of-object-in-c" target="_blank" rel="noopener">initialize an array of object in c++ </a><br><a href="http://www.cppblog.com/kevinlynx/archive/2008/03/19/44828.aspx" target="_blank" rel="noopener">代码自动生成-宏带来的奇技淫巧</a><br><a href="https://zhou-yuxin.github.io/articles/2016/%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%AE%8F%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E7%8E%B0/index.html" target="_blank" rel="noopener">用C语言宏批量生成代码的思考与实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果对象数组中没有默认构造函数，要像下面这样初始化:&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://yoursite.com/2020/07/04/mysql/"/>
    <id>http://yoursite.com/2020/07/04/mysql/</id>
    <published>2020-07-04T14:10:21.000Z</published>
    <updated>2020-11-15T07:37:09.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#新建数据库</span><br><span class="line">CREATE DATABASE 名</span><br><span class="line">#显示当前使用的数据库</span><br><span class="line">select database();</span><br><span class="line"># 查询数据库支持的存储引擎  </span><br><span class="line">show engines;</span><br><span class="line">#删除表  </span><br><span class="line">DROP TABLES 名</span><br></pre></td></tr></table></figure><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#语法  </span><br><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] table_name [(create_definition,…)] [table_options]</span><br><span class="line">[select_statement] </span><br><span class="line">#TEMPORARY：表示创建临时表，在当前会话结束后将自动消失</span><br><span class="line">#IF NOT EXISTS：在建表前，先判断表是否存在，只有该表不存在时才创建</span><br><span class="line">#create_definition：建表语句的关键部分，用于定义表中各列的属性</span><br><span class="line">#table_options：表的配置选项，例如：表的默认存储引擎、字符集</span><br><span class="line">#select_statement：通过select语句建表</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">create table contacts(</span><br><span class="line">    id int not null auto_increment primay key,</span><br><span class="line">    name varchar(30),</span><br><span class="line">    phone varchar(20)</span><br><span class="line">) engine&#x3D;innodb default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure><h4 id="字段操作"><a href="#字段操作" class="headerlink" title="字段操作"></a>字段操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#添加</span><br><span class="line">alter table stat_online_players add time char(12);</span><br><span class="line">#删除, 如果是主键, 必须先删掉主键约束</span><br><span class="line">alter table stat_online_players drop column hour, drop column minute;</span><br><span class="line">#修改字段  </span><br><span class="line">alter table base modify recover_time int(10) NOT NULL DEFAULT &#39;0&#39;;</span><br><span class="line"></span><br><span class="line">#修改字段名 </span><br><span class="line">alter table base change barrier archive_chip binary(24) ;</span><br></pre></td></tr></table></figure><ul><li>删除带主键约束的行<br><img src="/images/mysql_20200705_1.png" alt="p1"></li></ul><ul><li>删除主键约束<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table stat_online_players drop primary key; #增加主键约束（要先删掉数据吗?)</span><br><span class="line">alter table stat_online_players add primary key(zone_id, date);#主键要先删再加才行</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#INSERT 插入单条数据：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (field1, field2, ..., fieldN) <span class="keyword">VALUES</span> (value1, value2, ..., valueN)</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> contacts(<span class="keyword">name</span>, sex, phone) <span class="keyword">values</span>(<span class="string">'张三'</span>, <span class="number">1</span>, <span class="string">'11111111111'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#INSERT 插入多条数据：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (field1, field2, ..., fieldN) <span class="keyword">VALUES</span> (valueA1, valueA2, ..., valueAN), (valueB1,</span><br><span class="line">valueB2, ..., valueBN), …, (valueN1, valueN2, ..., valueNN);</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> contacts(<span class="keyword">name</span>, sex, phone) <span class="keyword">values</span>(<span class="string">'李四'</span>, <span class="number">1</span>, <span class="string">'22222222222'</span>), (<span class="string">'lily\'</span>s cat<span class="string">', 2, '</span><span class="number">33333333333</span><span class="string">'), ("jane'</span>s<span class="string">", 2, '44444444444');</span></span><br></pre></td></tr></table></figure><ul><li>注意事项:<br>如果字段是字符型，值必须使用单引号或者双引号，如”value”;如果值本身带单引号或双引号，需要转义<br>如果所有列都要添加数据，insert into语句可以不指定列,即   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (value1, value2, ..., valueN);</span><br></pre></td></tr></table></figure></li><li>insert into 和 replace into 比较<br>数据存在时,  replace 为替换<br>数据不存在时，replace 为插入且效率比insert高</li></ul><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--语法:</span></span><br><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1=newValue1, field2=newValue2 [<span class="keyword">WHERE</span> Clause]</span><br><span class="line"><span class="comment">--eg:</span></span><br><span class="line"><span class="keyword">update</span> contacts <span class="keyword">set</span> sex=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">update</span> contacts <span class="keyword">set</span> sex=<span class="number">2</span>, phone=<span class="string">'55555555555'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>注意事项：<br>可以同时更新一个或多个字段<br>可以通过where子句来指定更新的范围，如果不带where，则更新数据表中的所有记录  </p><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--语法:</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br><span class="line"></span><br><span class="line"><span class="comment">--eg:</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> contacts <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>注意事项：<br>可以通过where子句来指定删除的范围，如果不带where，则删除数据表中的所有记录</p><h5 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法 </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name1, column_name2</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;, ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">[<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125; [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">[<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br></pre></td></tr></table></figure><h6 id="where语句"><a href="#where语句" class="headerlink" title="where语句"></a>where语句</h6><p>在SQL中，insert、update、delete和select后面都能带where子句，用于插入、修改、删除或查询指定条件的记录<br>单条件查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法  </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name 运算符 <span class="keyword">value</span></span><br><span class="line">运算符            描述</span><br><span class="line">=                 等于</span><br><span class="line">&lt;&gt;                或 != 不等于</span><br><span class="line">&gt;                 大于</span><br><span class="line">&lt;                 小于</span><br><span class="line">&gt;=                大于等于</span><br><span class="line">&lt;=                小于等于</span><br><span class="line"><span class="keyword">between</span> <span class="keyword">and</span>       选取介于两个值之间的数据范围；在MySQL中，相当于&gt;=并且&lt;=</span><br><span class="line"></span><br><span class="line"><span class="comment">-- eg</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> salary <span class="keyword">between</span> <span class="number">10000</span> <span class="keyword">and</span> <span class="number">12000</span>;</span><br></pre></td></tr></table></figure><br>多条件查询<br>在where子句中，使用and、or可以把两个或多个过滤条件结合起来<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法  </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> condition1 <span class="keyword">AND</span> condition2 <span class="keyword">OR</span> condition3</span><br><span class="line">运算符              描述</span><br><span class="line"><span class="keyword">and</span>                表示左右两边的条件同时成立</span><br><span class="line"><span class="keyword">or</span>                 表示左右两边只要有一个条件成立</span><br><span class="line"></span><br><span class="line"><span class="comment">-- eg </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> sex=<span class="string">'男'</span> <span class="keyword">and</span> (salary &lt;=<span class="number">4000</span> <span class="keyword">or</span> salary &gt;= <span class="number">10000</span>);</span><br></pre></td></tr></table></figure></p><h6 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h6><p>运算符 IN 允许我们在 WHERE 子句中过滤某个字段的多个值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法 </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">IN</span>(value1, value2, …)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- eg</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><h6 id="like运算符"><a href="#like运算符" class="headerlink" title="like运算符"></a>like运算符</h6><p>在where子句中，有时候我们需要查询包含xxx 字符串的所有记录，这时就需要用到运算符like<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法  </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> ‘%<span class="keyword">value</span>%’ </span><br><span class="line"><span class="comment">-- eg </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%小%'</span>;</span><br></pre></td></tr></table></figure><br>说明<br>LIKE子句中的%类似于正则表达式中的*，匹配任意0个或多个字符<br>LIKE子句中的<em>匹配任意单个字符<br>LIKE子句中如果没有%和</em>，就相当于运算符=的效果</p><h5 id="查询结果排序和分页"><a href="#查询结果排序和分页" class="headerlink" title="查询结果排序和分页　"></a>查询结果排序和分页　</h5><ul><li><p>order by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--语法　</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name1, column_name2</span><br><span class="line"><span class="keyword">FROM</span> table_name1, table_name2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name, column_name [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">--eg </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> empolyee <span class="keyword">order</span> <span class="keyword">by</span> sex, salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>说明：<br>ASC表示按升序排列，DESC表示按降序排列。<br>默认情况下，对列按升序排</p></li><li><p>limit </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法　</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name1, column_name2</span><br><span class="line"><span class="keyword">FROM</span> table_name1, table_name2</span><br><span class="line"><span class="keyword">LIMIT</span> [<span class="keyword">offset</span>,] <span class="keyword">row_count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--eg  </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">limit</span> <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">limit</span> <span class="number">5</span>, <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">limit</span> <span class="number">10</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>说明：<br>offset指定要返回的第一行的偏移量。第一行的偏移量是0，而不是1。<br>row_count指定要返回的最大行数。<br>limit的分页公式:<br>limit (page-1)*row_count, row_count</p></li></ul><h5 id="分组"><a href="#分组" class="headerlink" title="分组　"></a>分组　</h5><ul><li><p>group by<br>示根据某种规则对数据进行分组，它必须配合聚合函数进行使用，对数<br>据进行分组后可以进行count、sum、avg、max和min等运算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法 </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name</span><br><span class="line"></span><br><span class="line"><span class="comment">--eg</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="keyword">count</span>(*) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure><p>说明:<br>  aggregate_function表示聚合函数<br>  group by可以对一列或多列进行分组</p></li><li><p>having<br>WHERE 关键字无法与聚合函数一起使用。HAVING 子句可<br>以对分组后的各组数据进行筛选</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法　</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name</span><br><span class="line"><span class="keyword">HAVING</span> aggregate_function(column_name) <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--eg</span></span><br><span class="line"><span class="keyword">select</span> dept, <span class="keyword">count</span>(*) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> dept <span class="keyword">having</span> <span class="keyword">count</span>(*) &lt; <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li>group_concat<br>group_concat配合group by一起使用，用于将某一列的值按指定的分隔符进行拼接<br>MySQL默认的分隔符为逗号<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法　</span></span><br><span class="line">group_concat([distinct] column_name [order by column_name asc/desc ] [separator '分隔符'])   </span><br><span class="line"></span><br><span class="line"><span class="comment">--eg </span></span><br><span class="line"><span class="keyword">select</span> dept, <span class="keyword">count</span>(*), <span class="keyword">group_concat</span>(<span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">desc</span> separator <span class="string">';'</span>) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br></pre></td></tr></table></figure><h5 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h5></li><li>distinct<br>支持单列和多列　<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column_name, column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- eg</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> username, city <span class="keyword">from</span> footprint;</span><br></pre></td></tr></table></figure></li></ul><h4 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作　　"></a>多表操作　　</h4><h5 id="表连接"><a href="#表连接" class="headerlink" title="表连接　　"></a>表连接　　</h5><p>在多个表之间通过一定的连接条件，使表之间发生关联，进而能从多个表之间获取数据　　　<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 语法  </span></span><br><span class="line"><span class="keyword">SELECT</span> table1.column, table2.column</span><br><span class="line"><span class="keyword">FROM</span> table1, table2</span><br><span class="line"><span class="keyword">WHERE</span> table1.column1 = table2.column2;</span><br></pre></td></tr></table></figure></p><ul><li><p>表连接几种方式　　<br>内连接　join或inner join<br>自连接　同一张表内的连接　<br>外连接　左外连接　left join, 右外连接 right join, 全外连接 full join</p></li><li><p>各种表连接的区别　<br><img src="https://i.loli.net/2020/11/15/FcB6hIZyu9iNspG.png" alt="p20200714_1"><br>交叉连接（cross join）：没有用where子句的交叉连接将产生笛卡尔积，第一个表的行数乘以第二个表的行数等于笛卡尔积<br>和结果集的大小</p></li></ul><h6 id="内连接"><a href="#内连接" class="headerlink" title="内连接　"></a>内连接　</h6><p><img src="https://i.loli.net/2020/08/18/xW1zZPBD2gAykva.png"/><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.stu_no, A.name, B.course, B.score <span class="keyword">from</span> student A <span class="keyword">join</span> score B <span class="keyword">on</span>(A.stu_no = B.stu_no);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> A.stu_no, A.name, B.course, B.score <span class="keyword">from</span> student A <span class="keyword">inner</span> <span class="keyword">join</span> score B <span class="keyword">on</span>(A.stu_no = B.stu_no);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> A.stu_no, A.name, B.course, B.score <span class="keyword">from</span> student A score B <span class="keyword">while</span> A.stu_no = B.stu_no;</span><br></pre></td></tr></table></figure></p><h6 id="左连接"><a href="#左连接" class="headerlink" title="左连接　"></a>左连接　</h6><p><img src="https://i.loli.net/2020/08/18/BtTodxEVWwKn4Gi.png"/><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.stu_no, A.name, B.course, B.score <span class="keyword">from</span> student A <span class="keyword">left</span> <span class="keyword">join</span> score B <span class="keyword">on</span>(A.stu_no = B.stu_no);</span><br></pre></td></tr></table></figure></p><h6 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.stu_no, A.name, B.course, B.score <span class="keyword">from</span> student A score B</span><br></pre></td></tr></table></figure><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接　"></a>自连接　</h5><p>一种特殊的表连接，它是指相互连接的表在物理上同为一张表，但是逻辑上是多张表。自<br>连接通常用于表中的数据有层次结构，如区域表、菜单表、商品分类表等　<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自连接语法</span></span><br><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span> A, <span class="keyword">table</span> B</span><br><span class="line"><span class="keyword">WHERE</span> A.column = B.column;</span><br></pre></td></tr></table></figure><br><img src="https://i.loli.net/2020/08/19/NHFdTWZBmAqSYU2.png"/>  </p><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询　"></a>子查询　</h5><p>又成为内部查询和嵌套查询　<br><img src="https://i.loli.net/2020/08/19/zJZjmYDhnICQ5fq.png"/>　<br>select 学号 姓名 地址 from 学生表 where 学号 in (select 学号 from 成绩表 where 科目=计算机)</p><ul><li><p>子查询in</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IN</span>(</span><br><span class="line"> <span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/19/VITdOj3hgZGqNpX.png"/>   </p></li><li><p>子查询exists</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name1</span><br><span class="line"><span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name2 <span class="keyword">WHERE</span> condition);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/19/gLpx9WRwhtc5Hay.png"/>   </p></li></ul><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理　　"></a>用户管理　　</h4><h5 id="mysql权限体系"><a href="#mysql权限体系" class="headerlink" title="mysql权限体系　"></a>mysql权限体系　</h5><div class="table-container"><table><thead><tr><th>层级</th><th>描述</th></tr></thead><tbody><tr><td>全局层级</td><td>适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。 GRANT ALL ON <em>.</em>和REVOKE ALL ON <em>.</em>只授予和撤销全局权限</td></tr><tr><td>数据库层级</td><td>适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。 GRANT ALL ON db_name.<em>和REVOKE ALL ON db_name.</em>只授予和撤销数据库权限</td></tr><tr><td>表层级</td><td>适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。 GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限</td></tr><tr><td>列层级</td><td>适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指 定与被授权列相同的列</td></tr><tr><td>子程序层级</td><td>CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被 授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级， 并存储在mysql.procs_priv表中</td></tr></tbody></table></div><p>MySQL的权限信息主要存储在以下几张表中，当用户连接数据库时，MySQL会根据这些表对用户<br>进行权限验证</p><div class="table-container"><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td>user</td><td>用户权限表，记录账号、密码及全局性权限信息</td></tr><tr><td>db</td><td>记录数据库相关权限</td></tr><tr><td>table_priv</td><td>用户对某个表拥有的权限</td></tr><tr><td>column_priv</td><td>用户对某表的某个列所拥有的权限</td></tr><tr><td>procs_priv</td><td>用户对存储过程及存储函数的操作权限</td></tr></tbody></table></div><p>在MySQL中，使用CREATE USER来创建用户，用户创建后没有任何权限<br><strong>MySQL的用户账号由两部分组成：用户名和主机名，即用户名@主机名，主机名可以是IP或机器名称, 主机名为%表示允许任何地址的主机远程登录MySQL数据库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#创建用户</span><br><span class="line">CREATE USER &#39;用户名&#39; [@&#39;主机名&#39;] [IDENTIFIED BY &#39;密码&#39;];</span><br><span class="line">#删除用户</span><br><span class="line">DROP USER &#39;用户名&#39; [@&#39;主机名&#39;];</span><br><span class="line">#修改密码</span><br><span class="line">ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure><h5 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理　"></a>权限管理　</h5><p>在MySQL数据库中，使用grant命令授权、revoke命令撤销授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#授权</span><br><span class="line">grant all privileges on databaseName.tableName to &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br><span class="line">#撤销授权</span><br><span class="line">revoke all privileges on databaseName.tableName from &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">#查看权限</span><br><span class="line">show grants for &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br></pre></td></tr></table></figure><h6 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表　"></a>权限列表　</h6><p>使用grant和revoke进行授权、撤销授权时，需要指定具体是哪些权限，这些权限大体可以分为3类，数据类、结构类和管理类</p><div class="table-container"><table><thead><tr><th>数据</th><th>结构</th><th style="text-align:left">管理</th></tr></thead><tbody><tr><td>SELECT INSERT UPDATE DELETE FILE</td><td>CREATE ALTER INDEX DROP CREATE TEMPORARY TABLES SHOW VIEW CREATE ROUTINE ALTER ROUTINE EXECUTE CREATE VIEW EVENT TRIGGER</td><td style="text-align:left">USAGE GRANT SUPER PROCESS RELOAD SHUTDOWN SHOW DATABASES LOCK TABLES REFERENCES REPUCATION CUENT REPUCATION SLAVE CREATE USER</td></tr></tbody></table></div><h6 id="禁止root远程登录"><a href="#禁止root远程登录" class="headerlink" title="禁止root远程登录"></a>禁止root远程登录</h6><ol><li>root是MySQL数据库的超级管理员，几乎拥有所有权限，一旦泄露后果非常严重；</li><li>root是MySQL数据库的默认用户，所有人都知道，如果不禁止远程登录，可以针对root用户暴    力破解密码<br><img src="https://i.loli.net/2020/08/19/7C6q2On1VrbZwaM.png"/>  </li></ol><h6 id="忘记root密码解决"><a href="#忘记root密码解决" class="headerlink" title="忘记root密码解决"></a>忘记root密码解决</h6><p><img src="https://i.loli.net/2020/08/19/oaiRTSve8bZQpF2.png"/><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#关闭权限验证</span><br><span class="line">mysqld --defaults-file&#x3D;&quot;.&#x2F;my.cnf&quot; --console --skip-granttables --shared-memory</span><br><span class="line">#参数--defaults-file的值为配置文件my.cnf的完整路径</span><br></pre></td></tr></table></figure><br>MySQL关闭权限验证后，直接通过 mysql 命令即可连接到数据库，并可正常执行各类操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">#修改root用户的密码</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure></p><ul><li>sql导出数据库  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">＃只导整个库结构:</span><br><span class="line">    mysqldump -uroot -p1234 -d sg17_s0 &gt; sg17_s0.sql</span><br><span class="line">＃导出整个库结构和数据:</span><br><span class="line">    mysqldump -uroot -p1234 sg17_s0 &gt; sg17_s0.sql</span><br><span class="line">＃只导出表结构:</span><br><span class="line">    mysqldump -uroot -p1234 -d sg17_s0 concern &gt; concern.sql</span><br></pre></td></tr></table></figure></li><li><p>sql导入数据库　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source [所在的路径&#x2F;&#x2F;*.sql]</span><br><span class="line">mysql -uabc_f -p abc &lt; abc.sql</span><br></pre></td></tr></table></figure></li><li><p>查看端口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;port&#39;</span><br></pre></td></tr></table></figure></li></ul><ul><li>显示建表语句  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table mainline_task_stat_zkw</span><br></pre></td></tr></table></figure></li></ul><ul><li>调换行的位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table stat_online_players modify player int(10) unsigned after time;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(peoples) as total from tutorial_stage_stat where day_id&#x3D;19;</span><br></pre></td></tr></table></figure></li><li><p>修改表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table stat_key_data_online modify &#96;date&#96; char(12) NOT NULL</span><br></pre></td></tr></table></figure></li><li>按列显示  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from T_Account limit 1\G</span><br></pre></td></tr></table></figure></li><li><p>pymysql </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装(centos 6)：</span><br><span class="line">安装pip: sudo yum -y install epel-release, sudo yum -y install python-pip</span><br><span class="line">安装mypython: yum install -y mysql-devel, python-devel python-setuptools</span><br><span class="line">             pip install MySQL-python</span><br><span class="line">安装mysql.connector包 pip install mysql-connector</span><br></pre></td></tr></table></figure></li><li><p>查看mysql 配置文件的方法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which mysqld</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql --verbose --help | grep -A 1 &#39;Default options&#39;</span><br></pre></td></tr></table></figure></li><li><p>MySQL中文乱码<br><a href="https://mp.weixin.qq.com/s?__biz=MzIzNjg4MTE2Ng==&amp;idx=4&amp;mid=100000774&amp;sn=c4ed7a8c2fee681523c3e30600be4bf8" target="_blank" rel="noopener">彻底解决MySQL中文乱码</a></p></li><li><p>mysql修改数据库表和表中的字段的编码格式的修改<br><a href="https://blog.csdn.net/luo4105/article/details/50804148" target="_blank" rel="noopener">mysql修改数据库表和表中的字段的编码格式的修改</a></p></li><li><p>mysql的latin1支持中文<br><a href="https://blog.csdn.net/congcongsuiyue/article/details/41979643" target="_blank" rel="noopener">mysql的latin1支持中文</a></p></li><li><p>mysql 两表联合查询<br><a href="https://blog.csdn.net/wj123446/article/details/52870114/" target="_blank" rel="noopener">mysql两表联合查询的四种情况</a></p></li><li><p>mysql 设置最大连接数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.第一种：命令行查看和修改最大连接数(max_connections)。</span><br><span class="line">  &gt;mysql -uuser -ppassword(命令行登录MySQL)</span><br><span class="line">  mysql&gt;show variables like &#39;max_connections&#39;;(查可以看当前的最大连接数)</span><br><span class="line">  msyql&gt;set global max_connections&#x3D;1000;(设置最大连接数为1000，可以再次查看是否设置成功)</span><br><span class="line">  mysql&gt;exit  </span><br><span class="line">2.设置&#x2F;etc&#x2F;my.cnf</span><br><span class="line">  注:似乎两者都要设置才会成功</span><br></pre></td></tr></table></figure></li><li><p>查看错误日志路径  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在配置中查看</span><br><span class="line">&#x2F;data&#x2F;mysql&#x2F;var</span><br><span class="line">数据库存放路径</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;message</span><br><span class="line">系统日志</span><br></pre></td></tr></table></figure></li><li><p>数据库遭到攻击<br><a href="https://jason5.cn/blog/ji-%5B%3F%5D-ci-shu-ju-ku-bei-gong-ji-de-jing-li.html" target="_blank" rel="noopener">数据库遭到攻击</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="中间件" scheme="http://yoursite.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>makefile</title>
    <link href="http://yoursite.com/2020/07/04/makefile/"/>
    <id>http://yoursite.com/2020/07/04/makefile/</id>
    <published>2020-07-04T13:40:24.000Z</published>
    <updated>2020-11-15T02:49:03.669Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>makefile中赋值号<br>=  直接赋值<br>:= 把之前的值替换掉<br>?= 如果变量中没值则赋值，有值则不赋值<br>+= 在变量未追加   </p></li><li><p>makefile中的shell<br>作用域<br>目标项冒号后另起一行才是shell代码<br>$(shell  这里是shell代码)    </p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> get_trunk_path  </span><br><span class="line">    trunk_path=`pwd`; \ </span><br><span class="line">    for dir in <span class="variable">$(dirs)</span>; do \ </span><br><span class="line">      if [[ $$&#123;trunk_path&#125; = *$$dir* ]]; then \ </span><br><span class="line">        trunk_path=`echo $$&#123;trunk_path&#125; | sed <span class="string">"s/\/$$dir.*//"</span>`; \</span><br><span class="line">        break; \    </span><br><span class="line">      fi \    </span><br><span class="line">    done; \</span><br><span class="line">    echo $$&#123;trunk_path&#125;</span><br><span class="line"><span class="keyword">endef</span>  </span><br><span class="line"></span><br><span class="line">PATH_PLATFORM_PRJ := <span class="variable">$(<span class="built_in">shell</span> $(<span class="built_in">call</span> get_trunk_path)</span>)</span><br></pre></td></tr></table></figure><p>makefile中的shell，每一行是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行，每行后面加;\ 如上例  </p></li></ul><p>makefile定义的变量使用${var}, shell定义的变量使用$${var}<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//运行方式，直接make</span><br><span class="line">PATH=<span class="string">"data"</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">   echo &#123;PATH&#125;</span><br><span class="line">   PATH=<span class="string">"555"</span>;\</span><br><span class="line">   echo $&#123;PATH&#125;;\ //data</span><br><span class="line">   echo $$&#123;PATH&#125; //555</span><br></pre></td></tr></table></figure><br>makefile中赋值可以这样写var = 123, shell中不能留空格var=123  </p><ul><li>makefile中的模式规则  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%:%.cpp  #冒号左边表示所有的target, 右边表示依赖的cpp文件           </span></span><br><span class="line">  g++ <span class="variable">$&lt;</span> -o <span class="variable">$@</span>   <span class="comment">#"$&lt;"表示了所有依赖目标的挨个值, "$@"表示所有的目标的挨个值</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;makefile中赋值号&lt;br&gt;=  直接赋值&lt;br&gt;:= 把之前的值替换掉&lt;br&gt;?= 如果变量中没值则赋值，有值则不赋值&lt;br&gt;+= 在变量未追加   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;makefile中的shell&lt;br&gt;作用域&lt;br&gt;目标项冒号后
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>shell</title>
    <link href="http://yoursite.com/2020/07/04/shell/"/>
    <id>http://yoursite.com/2020/07/04/shell/</id>
    <published>2020-07-04T11:10:37.000Z</published>
    <updated>2020-11-15T02:49:03.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash                                                                    </span></span><br><span class="line">                                                                               </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ];<span class="keyword">then</span>                                                            </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"arg count must &gt; 1"</span>                                                    </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Uage bash -x example_1.sh [args...]"</span>                                  </span><br><span class="line">   <span class="built_in">exit</span>                                                                        </span><br><span class="line"><span class="keyword">fi</span>                                                                              </span><br><span class="line">                                                                               </span><br><span class="line">arg=<span class="variable">$1</span>                                                                          </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$arg</span> -gt 10 ];<span class="keyword">then</span>                                                          </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$arg</span> &gt; 10"</span>                                                            </span><br><span class="line"><span class="keyword">else</span>                                                                            </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$arg</span> &lt;= 10"</span>                                                            </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li><p>if [[…]] 表示模式匹配   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="variable">$trunk_path</span> = *<span class="variable">$dir</span>* ]]; <span class="keyword">then</span>                     </span><br><span class="line">    trunk_path=`<span class="built_in">echo</span> $<span class="variable">$&#123;trunk_path&#125;</span> | sed <span class="string">"s/\/$<span class="variable">$dir</span>.*//"</span>`  </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>数组，函数传参数，for循环</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"args must &gt; 1"</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Usage bash +x example_2.sh [args...]"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">args=<span class="variable">$@</span></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="variable">$args</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$arg</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func1</span></span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$1</span> <span class="comment">#$1是该函数的第一个参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func1 <span class="string">"hello everybody"</span> <span class="comment">#函数传参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种写法</span></span><br><span class="line"><span class="function"><span class="title">func2</span></span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"bash shell function defination"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func2 <span class="comment">#调用</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">array=(<span class="string">"hello"</span>  <span class="string">"gg"</span> 1 <span class="string">"shit"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"first element is <span class="variable">$&#123;array[0]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"second element is <span class="variable">$&#123;array[1]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"third element is <span class="variable">$&#123;array[2]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"fourth element is <span class="variable">$&#123;array[3]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"all element are <span class="variable">$&#123;array[@]&#125;</span>"</span> <span class="comment">#所有的元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"size of array is <span class="variable">$&#123;#array[@]&#125;</span>"</span> <span class="comment">#数组的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$arg</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>While循环以及其它几种循环、case、表达式expr  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"args must &gt; 1"</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">"Usage bash +x example_2.sh [args...]"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">   <span class="string">"install"</span>)</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"operation is install"</span></span><br><span class="line">   ;;</span><br><span class="line">   </span><br><span class="line">   <span class="string">"uninstall"</span>)</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"operation is uninstall"</span></span><br><span class="line">   ;;</span><br><span class="line">   *)</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"operation is not support"</span></span><br><span class="line">   ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;10; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">if</span> ((i==1));<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">continue</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'seq 5'</span>; <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"loop <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p>脚本之间的引用<br>/lib/lsb/init-functions  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">first.sh</span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"execute first script"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file=first</span><br><span class="line"></span><br><span class="line">second.sh</span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">. first.sh  <span class="comment">##引用脚本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$file</span></span><br></pre></td></tr></table></figure></li><li><p>错误处理<br>$?<br>set -o errexit  //遇到报错不会往下执行<br>command &gt; file 2&gt;&amp;1 //将stdout和stderr合并后重定向到文件  </p></li><li><p>字典</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式1</span></span><br><span class="line"><span class="function"><span class="title">hput</span></span>()&#123;</span><br><span class="line">   <span class="built_in">eval</span> <span class="string">"hkey_<span class="variable">$1</span>"</span>=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hget</span></span>()&#123;</span><br><span class="line">   <span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">'$&#123;'</span><span class="string">"hkey_<span class="variable">$1</span>"</span><span class="string">'&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hput k1 value1</span><br><span class="line">hget k1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line"><span class="built_in">declare</span> -A dic</span><br><span class="line">dic=([key1]=<span class="string">"value1"</span> [key2]=<span class="string">"value2"</span> [key3]=<span class="string">"value3"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;dic["key1"]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!dic[@]&#125;</span> <span class="comment">#打印所有的key</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;dic[@]&#125;</span> <span class="comment">#打印所有的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$&#123;!dic[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$key</span>: <span class="variable">$&#123;dic[$key]&#125;</span><span class="string">""</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li>trap<br>shell脚本执行时产生三个伪信号，可使用trap捕获 ，并输出调试信息   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">信号名              产生原因</span><br><span class="line">EXIT               从一个函数中退出或整个脚本执行完毕</span><br><span class="line">ERR                从一条命令返回非零状态时（代表命令执行不成功） </span><br><span class="line">DEBUG              脚本中每一条命令执行之前</span><br></pre></td></tr></table></figure></li><li>tee　　</li><li>调试钩子　</li><li>shell参数<br>man sh 查看<br>-n 只读取， 不执行， 例如 sh -n *.sh  好像只能检查语法是否有问题<br>-x 进入跟踪方式，打印执行的每一条指令<br>输出的默认值$PS4是”+”，可以设置环境变量export PS4=’+{$LINENO:${FUNCNAME[0]}}’;  echo $PS4 </li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令　 　"></a>命令　 　</h3><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls file | xargs rm  //查看文件并删除</span><br><span class="line">ls -l  *.cpp *.c *.h | awk <span class="string">'&#123;sum+=$5&#125; END &#123;print sum&#125;'</span> // 统计文件大小总和</span><br><span class="line">ls -lt //按时间排列，时间又近及远</span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp s1/conf/ActivityTime.json ./s[2-3]/conf/ -r  //递归拷贝文件</span><br></pre></td></tr></table></figure><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux --sort=lstart    //进程按时间排序</span><br></pre></td></tr></table></figure><h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -p | wcl -c  //查看系统线程数</span><br></pre></td></tr></table></figure><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep Cgi | grep cgi | grep sg17|awk <span class="string">'&#123;printf("kill -9 %s\n", $2);&#125;'</span> | bash</span><br></pre></td></tr></table></figure><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping //是否可达</span><br><span class="line">ping -l src -c <span class="built_in">times</span> dst //多ip情况下指定ip，<span class="built_in">times</span>表示次数</span><br></pre></td></tr></table></figure><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet //端口是否开放</span><br></pre></td></tr></table></figure><h4 id="bg"><a href="#bg" class="headerlink" title="bg"></a>bg</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span>  //将任务放置后台</span><br></pre></td></tr></table></figure><h4 id="fg"><a href="#fg" class="headerlink" title="fg"></a>fg</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fg</span> //将任务放置前台</span><br></pre></td></tr></table></figure><h4 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span> -l  //列出任务pid</span><br></pre></td></tr></table></figure><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> | grep rm //查看删除文件历史</span><br><span class="line">/root/.bash_history //root用户所有历史记录（不同终端）</span><br></pre></td></tr></table></figure><h4 id="getconf"><a href="#getconf" class="headerlink" title="getconf"></a>getconf</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf WORD_BIT //获取cpu字长</span><br></pre></td></tr></table></figure><h4 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd //查看动态库依赖</span><br></pre></td></tr></table></figure><h4 id="whereis-which-locate"><a href="#whereis-which-locate" class="headerlink" title="whereis which locate"></a>whereis which locate</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看软件安装路径</span><br></pre></td></tr></table></figure><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"00:00:00 2018-06-01"</span> +%s //通过日期显示时戳</span><br><span class="line">date -d @1501570226  //通过时间戳显示日期</span><br></pre></td></tr></table></figure><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp | grep 8061 查看端口被哪个进程占用</span><br></pre></td></tr></table></figure><h4 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-I: 第一个寻找头文件目录</span><br><span class="line">-L: 第一个寻找库文件目录</span><br><span class="line">-l: 寻找动态库或静态库</span><br><span class="line">-c: 只编译，不连接</span><br></pre></td></tr></table></figure><h4 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -s -d xx.o   //反汇编</span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.cpp"</span> | xargs grep -w <span class="string">"CLog"</span>                  <span class="comment">#全词匹配查找</span></span><br><span class="line">find -name file                                              <span class="comment">#查找文件名</span></span><br><span class="line">find -iname file                                             <span class="comment">#忽略大小写</span></span><br><span class="line">find  -maxdepth file                                         <span class="comment">#最大递归深度</span></span><br><span class="line">find  -mindepth file                                         <span class="comment">#对消递归深度</span></span><br><span class="line">find  -not  file                                             <span class="comment">#相反匹配</span></span><br><span class="line">find  . -empty                                               <span class="comment">#查找空文件</span></span><br><span class="line">find  -name file -<span class="built_in">exec</span> cmd &#123;&#125; \;                             <span class="comment">#在找到的文件上执行命令</span></span><br><span class="line">find . -<span class="built_in">type</span> f                                               <span class="comment">#查找文件</span></span><br><span class="line">find ~ -size +100M/-100M                                     <span class="comment">#查找满足尺寸文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name *.zip -size +100M -<span class="built_in">exec</span> rm -i &#123;&#125; \;     <span class="comment">#查找删除</span></span><br></pre></td></tr></table></figure><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">"match"</span> file                               <span class="comment">#出除含有匹配字符串之外的所有行</span></span><br><span class="line">grep  <span class="string">"match"</span> file --color=auto                    <span class="comment">#匹配字符串标颜色</span></span><br><span class="line">grep -E <span class="string">"[1-9]+"</span> file; egrep <span class="string">"[1-9]+"</span> file         <span class="comment">#正则匹配</span></span><br><span class="line">grep -o <span class="string">"match"</span> file                               <span class="comment">#只输出匹配的部分</span></span><br><span class="line">grep -c <span class="string">"match"</span> file                               <span class="comment">#输出匹配到的行数</span></span><br><span class="line">grep -b <span class="string">"match"</span> file                               <span class="comment">#匹配字符的偏移量</span></span><br><span class="line">grep -n <span class="string">"match"</span> file                               <span class="comment">#输出匹配到字符的行数</span></span><br><span class="line">grep -l <span class="string">"match"</span> file                               <span class="comment">#列出匹配到字符的文件名</span></span><br><span class="line">grep -r <span class="string">"match"</span> file                               <span class="comment">#递归搜索匹配项</span></span><br><span class="line">grep -i <span class="string">"MATCH"</span> file                               <span class="comment">#忽略大小写</span></span><br><span class="line">grep -w <span class="string">"match"</span> file                               <span class="comment">#全词匹配</span></span><br><span class="line">grep -e <span class="string">"match1"</span> -e <span class="string">"match2"</span> file                  <span class="comment">#多重匹配项</span></span><br><span class="line">grep <span class="string">"match"</span> --include *.&#123;php,html&#125;                <span class="comment">#只在目录中所有的.php和.html文件中递归搜索字符"main()"</span></span><br><span class="line">grep <span class="string">"main()"</span> . -r --exclude <span class="string">"README"</span>              <span class="comment">#在搜索结果中排除所有README文件</span></span><br><span class="line">grep 170501686 coins_20180417.log | grep <span class="string">'change pay log'</span> |grep <span class="string">',cash=-'</span> |awk -F <span class="string">'[=,]'</span> <span class="string">'&#123;a+=$12&#125; END&#123;print a&#125;'</span></span><br><span class="line">grep -E <span class="string">'act=new|act=add'</span> equipment_20180705.log | grep <span class="string">'code=get_world_battle_Kill_rewards'</span> <span class="comment">#找出包含 get_world_battle_Kill_rewards 的行，其中act=new 或act=add</span></span><br><span class="line">grep get_default_error_string /* -rFn --binary-files=without-match  <span class="comment">#只递归匹配文本文件，不匹配二进制文件中的内容</span></span><br></pre></td></tr></table></figure><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $1, $4&#125;'</span> netstat.txt                                                   <span class="comment">#打印1,4列</span></span><br><span class="line">awk <span class="string">'&#123;printf "%-8s %-8s %-8s %-18s %-22s %-15s\n",$1,$2,$3,$4,$5,$6&#125;'</span>  netstat.txt <span class="comment">#格式化输出</span></span><br><span class="line">awk <span class="string">'$3==0 &amp;&amp; $6=="LISTEN"'</span> netstat.txt                                            <span class="comment">#第三列的值为0 &amp;&amp; 第6列的值为LISTEN</span></span><br><span class="line">awk <span class="string">'$3 &gt; 0 &#123;print $0&#125;'</span> netstat.txt                                                <span class="comment">#第三列不为0的所有项</span></span><br><span class="line">awk <span class="string">'$3==0 &amp;&amp; $6=="LISTEN" || NR==1 '</span> netstat.txt                                  <span class="comment">#包括第一行</span></span><br><span class="line">awk <span class="string">'$3==0 &amp;&amp; $6=="LISTEN" || NR==1 &#123;printf "%-20s %-20s %s\n",$4,$5,$6&#125;'</span> netstat.txt   <span class="comment">#加上格式化输出</span></span><br><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;print $1, $2, $5&#125;'</span> /etc/passwd 或 awk -F: <span class="string">'&#123;print $1, $2, $5&#125;'</span> /etc/passwd  <span class="comment">#指定分隔符</span></span><br><span class="line">awk -F<span class="string">'[::]'</span> <span class="string">'&#123;print $1, $2, $5&#125;'</span> /etc/passwd                                 <span class="comment">#指定多个分割符</span></span><br><span class="line">awk <span class="string">'$6 ~ /FIN/ || NR==1 &#123;print NR,$4,$5,$6&#125;'</span> OFS=<span class="string">"\t"</span> netstat.txt       <span class="comment">#匹配FIN状态</span></span><br><span class="line">awk <span class="string">'NR!=1&#123;print &gt; $6&#125;'</span> netstat.txt                                                <span class="comment">#拆分文件</span></span><br><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)printf "%-22s", $i "  ";printf"\n"&#125;'</span> netstat.txt    <span class="comment">#打印出除开第一行的所有行   </span></span><br><span class="line">grep appid <span class="variable">$file</span> | awk -F <span class="string">"="</span> <span class="string">'&#123;print $3&#125;'</span> | sed <span class="string">'s/["/&gt;]//g'</span> | sed <span class="string">'s/ //g'</span> <span class="comment">#过滤掉"/&gt;和空格</span></span><br></pre></td></tr></table></figure><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s/my/cp/g"</span> pet.txt                                          <span class="comment">#将文件中所有的my替换成cp</span></span><br><span class="line">sed -i <span class="string">"s/^/#/g"</span> pet.txt                                            <span class="comment">#在每行最前面加#</span></span><br><span class="line">sed -i <span class="string">"s/$/---/g"</span> pet.txt                                          <span class="comment">#在每行最有面加---</span></span><br><span class="line">sed -i <span class="string">'s/&lt;[^&gt;]*&gt;//g'</span> html.txt                                      <span class="comment">#去掉某html中的tags</span></span><br><span class="line">sed -i <span class="string">"3s/my/your/g"</span> pets.txt                                      <span class="comment">#替换第3行以后的my</span></span><br><span class="line">sed -i <span class="string">"3,6s/my/your/g"</span> pets.txt                                    <span class="comment">#只替换3到6行的my</span></span><br><span class="line">sed -i <span class="string">'s/s/S/1'</span> my.txt                                             <span class="comment">#只替换每一行的第一个s</span></span><br><span class="line">sed -i -e <span class="string">'1,3s/my/your/g'</span> -e <span class="string">'3,$s/This/That/g'</span> my.txt             <span class="comment">#1到3行换成your, 3行以后换成That </span></span><br><span class="line">sed -i s/1527696000/1528560000/g ./s*/conf/ActivityTime.json</span><br></pre></td></tr></table></figure><h4 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsof  -p PID  | wc -l  <span class="comment">#查看进程打开的文件数量</span></span><br><span class="line">lsof  -p PID  |awk <span class="string">'&#123;print $2&#125;'</span>|sort | uniq -c | awk <span class="string">'&#123;sum += $1&#125; END&#123;print sum&#125;'</span> <span class="comment">#查看进程打开的文件数量</span></span><br><span class="line">lsof -i :port  <span class="comment">#查看某个端口的连接情况</span></span><br><span class="line">watch <span class="string">"losf -p PID | wc -l"</span>  <span class="comment">#查看进程打开文件数量的变化情况</span></span><br></pre></td></tr></table></figure><h4 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr  //查看ip地址（可显示mac地址和网卡名称）</span><br></pre></td></tr></table></figure><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"?"</span>  匹配单个字符串</span><br><span class="line"><span class="string">"*"</span>  匹配字符串序列</span><br></pre></td></tr></table></figure><h4 id="正则"><a href="#正则" class="headerlink" title="正则　　"></a>正则　　</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    ERE BRE</span><br><span class="line">    <span class="string">"."</span>  任意单个字符</span><br><span class="line">    <span class="string">"*"</span>  匹配任一字符的任意长度</span><br><span class="line">    <span class="string">"^"</span> 以xx开始字符</span><br><span class="line">    <span class="string">"$"</span> 以xx结尾字符</span><br><span class="line">    <span class="string">"[]"</span> 字符集合</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 实战　  </span></span><br><span class="line">终端遍历目录导入数据库  </span><br><span class="line">终端中执行　　</span><br><span class="line">```sh</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls sg17_s*); <span class="keyword">do</span> $(mysql -u root -p $(basename <span class="variable">$i</span> .sql) &lt; <span class="variable">$i</span>);<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>将所有db.conf 中的密码替换　　　<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name db.conf | xargs sed -i <span class="string">'s/password\ =\ 1234/password\ =\ Ujg5-bc@0520/g'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>go</title>
    <link href="http://yoursite.com/2020/07/04/go/"/>
    <id>http://yoursite.com/2020/07/04/go/</id>
    <published>2020-07-04T07:26:14.000Z</published>
    <updated>2020-11-15T07:26:18.478Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>  <h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ul><li><p>个人<br><img src="https://i.loli.net/2020/11/15/HlRFVzUdw6fktoP.png" alt="p1"></p></li><li><p>公司<br><img src="https://i.loli.net/2020/11/15/ki6RYF3eVdyDba4.png" alt="p2"></p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> fmt -w *.<span class="keyword">go</span>   <span class="comment">//格式化代码 </span></span><br><span class="line"><span class="keyword">go</span> fmt github.com/hello   </span><br><span class="line"><span class="keyword">go</span> run  src/xx/xx.<span class="keyword">go</span>  <span class="comment">//编译+执行</span></span><br><span class="line"><span class="keyword">go</span> build -o /bin/test /src/test  <span class="comment">//编译生成二进制文件， -o指定目录</span></span><br><span class="line"><span class="keyword">go</span> build  github.com/xx   <span class="comment">//注意src目录不用写</span></span><br><span class="line"><span class="keyword">go</span> install  github.com/xx  <span class="comment">//生成可执行文件到bin目录下</span></span><br><span class="line"><span class="keyword">go</span> env <span class="comment">//显示环境变量</span></span><br><span class="line"><span class="keyword">go</span> get <span class="comment">//安装第三方包</span></span><br></pre></td></tr></table></figure><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符以字母或下划线开头，大小写敏感  </p><ul><li>保留关键字  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> <span class="keyword">default</span> <span class="function"><span class="keyword">func</span> <span class="title">interface</span> <span class="title">select</span> <span class="title">case</span> <span class="title">defer</span> <span class="title">go</span> <span class="title">map</span> <span class="title">struct</span> <span class="title">chan</span> <span class="title">else</span> <span class="title">goto</span> <span class="title">package</span> <span class="title">switch</span></span>  </span><br><span class="line"><span class="keyword">const</span> fallthough <span class="keyword">if</span> <span class="keyword">range</span> <span class="keyword">type</span> <span class="keyword">continue</span> <span class="keyword">for</span> <span class="keyword">import</span> <span class="keyword">return</span> <span class="keyword">var</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ul><li>可执行程序的包名必须为main, 且包含一个main函数 </li><li>go build; go install 对于非main包会在GOPATH pkg 中生成静态库文件 </li></ul><ul><li><p>包的别名  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(  </span><br><span class="line">    a  <span class="string">"fmt"</span>  <span class="comment">//a是fmt的别名  </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>访问控制规则<br>大写函数/变量可导出<br>小写函数变量是私有的，外部包不能访问    </p></li><li><p>万能格式输出%v   </p></li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>init函数<br>每个包里都有0个或多个init函数， 在main函数调用之前会执行init<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参数和返回值 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包初始化顺序<br>全局变量 -&gt; init -&gt; main</p></li><li><p>有import的情况<br><img src="https://i.loli.net/2020/11/15/rgVwolRAEvfmWDs.png" alt="go_20200723_1"></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(  </span><br><span class="line">     <span class="string">"test"</span>  <span class="comment">//仅初始化， 不使用包里面的东西  </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>嵌套包的初始化顺序， 最里层包先初始化<br><img src="https://i.loli.net/2020/11/15/hEuc1PAwD2G7CNk.png" alt="p3">  </p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">int8</span> <span class="keyword">int16</span> <span class="keyword">int32</span> <span class="keyword">int64</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">float32</span> <span class="keyword">float64</span></span><br></pre></td></tr></table></figure><h3 id="标识符-1"><a href="#标识符-1" class="headerlink" title="标识符"></a>标识符</h3><p>以字母或<em>开头, 后面跟着字母,</em>或数字  </p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> <span class="keyword">default</span> <span class="function"><span class="keyword">func</span> <span class="title">interface</span> <span class="title">select</span> <span class="title">case</span> <span class="title">defer</span> <span class="title">go</span> <span class="title">map</span> <span class="title">struct</span></span> </span><br><span class="line"><span class="keyword">chan</span> <span class="keyword">else</span> <span class="keyword">goto</span> <span class="keyword">package</span> <span class="keyword">switch</span> <span class="keyword">const</span> fallthough  <span class="keyword">if</span> <span class="keyword">range</span> <span class="keyword">type</span> </span><br><span class="line"><span class="keyword">continue</span> <span class="keyword">for</span> <span class="keyword">import</span> <span class="keyword">return</span> <span class="keyword">var</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>编译时已经确定, const修饰，只读<br>常量必须要赋值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 只能修饰boolean, number(<span class="keyword">int</span>相关， 浮点， <span class="built_in">complex</span>)和<span class="keyword">string</span>  </span><br><span class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = <span class="string">"hello word"</span>  </span><br><span class="line"><span class="keyword">const</span> b = <span class="string">"hello word"</span>  </span><br><span class="line"><span class="keyword">const</span> c = getValue()  <span class="comment">//错误，与c++不同  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//优雅的写法  </span></span><br><span class="line"><span class="keyword">const</span>(  </span><br><span class="line">    a = <span class="number">0</span>  </span><br><span class="line">    b = <span class="number">1</span>  </span><br><span class="line">    c = <span class="number">2</span> </span><br><span class="line">    d     <span class="comment">//2 </span></span><br><span class="line">)  </span><br><span class="line"></span><br><span class="line"><span class="comment">//更加专业的写法 </span></span><br><span class="line"><span class="keyword">const</span>(  </span><br><span class="line">    a = <span class="literal">iota</span> <span class="comment">//0  </span></span><br><span class="line">    b  <span class="comment">//1  </span></span><br><span class="line">    c   <span class="comment">//2  </span></span><br><span class="line">)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(  </span><br><span class="line">    a = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">//1</span></span><br><span class="line">    b  <span class="comment">//2 </span></span><br><span class="line">    c   <span class="comment">//4  </span></span><br><span class="line">)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a  = <span class="literal">iota</span>  <span class="comment">//0</span></span><br><span class="line">    b          <span class="comment">//1 </span></span><br><span class="line">    c          <span class="comment">//2 </span></span><br><span class="line">    d  = <span class="number">8</span>    <span class="comment">//8  </span></span><br><span class="line">    e         <span class="comment">//8 </span></span><br><span class="line">    f  = <span class="literal">iota</span> <span class="comment">//5</span></span><br><span class="line">    g         <span class="comment">//6</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span>  </span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span>  </span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">string</span>  </span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">bool</span>  </span><br><span class="line">d <span class="keyword">int</span> = <span class="number">8</span>  </span><br><span class="line">e <span class="keyword">string</span> = <span class="string">"hello world"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">Var(  </span><br><span class="line">    a <span class="keyword">int</span>  <span class="comment">//默认0  </span></span><br><span class="line">    b <span class="keyword">string</span> <span class="comment">//默认""  </span></span><br><span class="line">    c <span class="keyword">bool</span> <span class="comment">//默认false  </span></span><br><span class="line">    d = <span class="number">8</span>  </span><br><span class="line">    e = <span class="string">"hello world"</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><p>值类型： 基本数据类型int, float, bool, string以及数组和struct，内存在栈中分配<br>引用类型： 指针, slice, map, chan, interface等， 内存在对上分配，GC回收  </p><p>变量的作用域<br>局部变量—生命周期在函数内或语句块内<br>全局变量—生命周期在整个包，大写的可以外部访问<br> a :=1 实际是两条语句: var a int a = 1 go中不能在函数外赋值，所以:= 不能用于函数外   </p><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>var p *int = &amp;a<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传递数组指针和c数组指针类似 </span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(arr *[3]<span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">        (*arr)[<span class="number">0</span>] = <span class="number">90</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </span><br><span class="line">        a := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>&#125;</span><br><span class="line">        modify(&amp;a)</span><br><span class="line">        fmt.Println(a) </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切片是引用类型 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(sls []<span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">     sls[<span class="number">0</span>] = <span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </span><br><span class="line">     a := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>&#125;</span><br><span class="line">     modify(a[:])</span><br><span class="line">     fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h3><p>type(var)<br>int 和 int32是不同类型， 不能直接运算  </p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>两种表示方式<br>1.”” 允许转义<br>2.`` 原生字符串，允许换行  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">== <span class="comment">//比较</span></span><br><span class="line"><span class="built_in">len</span>(str)  <span class="comment">//长度</span></span><br><span class="line">+, fmt.Sprintf <span class="comment">//拼接</span></span><br><span class="line">strings</span><br><span class="line">strings.Contains  <span class="comment">//包含  </span></span><br><span class="line">strings.HasPrefix(s <span class="keyword">string</span>, prefix <span class="keyword">string</span>) <span class="keyword">bool</span> <span class="comment">//判断字符串s是否以prefix开头  </span></span><br><span class="line">strings.HasSuffix(s <span class="keyword">string</span>, suffix <span class="keyword">string</span>) <span class="keyword">bool</span> <span class="comment">//判断字符串s是否以suffix结尾。  </span></span><br><span class="line">strings.Index(s <span class="keyword">string</span>, str <span class="keyword">string</span>) <span class="keyword">int</span>  <span class="comment">//判断str在s中首次出现的位置，如果没有出现，则返回-1  </span></span><br><span class="line">strings.LastIndex(s <span class="keyword">string</span>, str <span class="keyword">string</span>) <span class="keyword">int</span> <span class="comment">//判断str在s中最后出现的位置，如果没有出现，则返回-1  </span></span><br><span class="line">strings.Replace(str <span class="keyword">string</span>, old <span class="keyword">string</span>, <span class="built_in">new</span> <span class="keyword">string</span>, n <span class="keyword">int</span>) <span class="comment">//字符串替换  </span></span><br><span class="line">strings.Count(str <span class="keyword">string</span>, substr <span class="keyword">string</span>)<span class="keyword">int</span> <span class="comment">//字符串计数  </span></span><br><span class="line">strings.ToLower(str <span class="keyword">string</span>)<span class="keyword">string</span> <span class="comment">//转为小写  </span></span><br><span class="line">strings.ToUpper(str <span class="keyword">string</span>)<span class="keyword">string</span> <span class="comment">//转为大写  </span></span><br><span class="line">strings.TrimSpace(str <span class="keyword">string</span>) <span class="comment">//去掉字符串首尾空白字符  </span></span><br><span class="line">strings.Trim(str <span class="keyword">string</span>, cut <span class="keyword">string</span>) <span class="comment">//去掉字符串首尾cut字符  </span></span><br><span class="line">strings.TrimLeft(str <span class="keyword">string</span>, cut <span class="keyword">string</span>) <span class="comment">//去掉字符串首cut字符  </span></span><br><span class="line">strings.TrimRight(str <span class="keyword">string</span>, cut <span class="keyword">string</span>) <span class="comment">//去掉字符串尾cut字符  </span></span><br><span class="line">strings.Field(str <span class="keyword">string</span>) <span class="comment">//返回str空格分隔的所有子串的slice  </span></span><br><span class="line">strings.Split(str <span class="keyword">string</span>, split <span class="keyword">string</span>) <span class="comment">//返回str split分隔的所有子串的slice  </span></span><br><span class="line">strings.Join(s1 []<span class="keyword">string</span>, sep <span class="keyword">string</span>) <span class="comment">//用sep把s1中的所有元素链接起来  </span></span><br><span class="line">strconv.Itoa(i <span class="keyword">int</span>) <span class="comment">//把一个整数i转成字符串  </span></span><br><span class="line">strconv.Atoi(str <span class="keyword">string</span>)(<span class="keyword">int</span>, error) <span class="comment">//把一个字符串转成整数</span></span><br></pre></td></tr></table></figure></li><li>字符串底层是byte数组, 可以和[]byte类型互相转换   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改字符串  </span></span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">"hello"</span></span><br><span class="line">    <span class="keyword">var</span> byteSlice []<span class="keyword">byte</span></span><br><span class="line">    byteSlice = []<span class="keyword">byte</span>(str)</span><br><span class="line">    byteSlice[<span class="number">0</span>] = <span class="string">'0'</span></span><br><span class="line">    str = <span class="keyword">string</span>(byteSlice</span><br></pre></td></tr></table></figure></li><li>rune表示utf8的字符  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> str=<span class="string">"哈"</span></span><br><span class="line"><span class="keyword">var</span> runeSlice []<span class="keyword">rune</span></span><br><span class="line">runeSlice = []<span class="keyword">rune</span>(str)</span><br><span class="line">fmt.Printf(<span class="string">"str 长度:%d, len(str)=%d\n"</span>, <span class="built_in">len</span>(runeSlice), <span class="built_in">len</span>(str) <span class="comment">//1, 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前时间</span></span><br><span class="line">now := time.Now()  </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取时间戳</span></span><br><span class="line">timestamp := time.Now().Unix()</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间戳转time类型  </span></span><br><span class="line">timeobj := time.Unix(timestamp, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">time.Now().Day()，time.Now().Minute()，time.Now().Month()，time.Now().Year()  </span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line">fmt.Printf(“%<span class="number">02</span>d/%<span class="number">02</span>d%<span class="number">02</span>d %<span class="number">02</span>d:%<span class="number">02</span>d:%<span class="number">02</span>d”, now.Year()......)  </span><br><span class="line"><span class="comment">//time.Duration用来表示纳秒  </span></span><br><span class="line"><span class="comment">//一些常量  </span></span><br><span class="line"><span class="keyword">const</span> (  </span><br><span class="line">    Nanosecond  Duration = <span class="number">1</span>  </span><br><span class="line">    Microsecond          = <span class="number">1000</span> * Nanosecond  </span><br><span class="line">    Millisecond          = <span class="number">1000</span> * Microsecond  </span><br><span class="line">    Second               = <span class="number">1000</span> * Millisecond  </span><br><span class="line">    Minute               = <span class="number">60</span> * Second  </span><br><span class="line">    Hour                 = <span class="number">60</span> * Minute  </span><br><span class="line">)  </span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line">now := time.Now()  </span><br><span class="line">fmt.Println(now.Format(“<span class="number">02</span>/<span class="number">1</span>/<span class="number">2006</span> <span class="number">15</span>:<span class="number">04</span>”))  </span><br><span class="line">fmt.Println(now.Format(“<span class="number">2006</span>/<span class="number">1</span>/<span class="number">02</span> <span class="number">15</span>:<span class="number">04</span>”))  </span><br><span class="line">fmt.Println(now.Format(“<span class="number">2006</span>/<span class="number">1</span>/<span class="number">02</span>”))</span><br></pre></td></tr></table></figure><ul><li>定时器  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ticker := time.Tick(<span class="number">1</span>*time.Second)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ticker &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, i) <span class="comment">//打印出当前时间 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if  </span></span><br><span class="line"><span class="keyword">if</span> condition &#123;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition &#123;  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition1 &#123;  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition3 &#123;  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//错误代码</span></span><br><span class="line"><span class="keyword">if</span> condition &#123;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>&#123;     <span class="comment">//else必须和上一个&#125;在一行否则编译不过去  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//switch  </span></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">var</span> &#123;  </span><br><span class="line">    <span class="keyword">case</span> var1:  </span><br><span class="line">    <span class="keyword">fallthrough</span> <span class="comment">//继续往下执行  </span></span><br><span class="line">    <span class="keyword">case</span> var2:  </span><br><span class="line">    <span class="keyword">case</span> var3:  </span><br><span class="line">    <span class="keyword">default</span>:  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//注意没有break  </span></span><br><span class="line">（<span class="number">2</span>）<span class="keyword">switch</span> <span class="keyword">var</span> &#123;  </span><br><span class="line">        <span class="keyword">case</span> var1, var2: <span class="comment">//多条件在一行  </span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">var</span> <span class="number">3</span>:  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">        &#125;  </span><br><span class="line"> (<span class="number">3</span>) <span class="keyword">switch</span>&#123;  <span class="comment">//没有变量  </span></span><br><span class="line">            condition1:  </span><br><span class="line">            condition2:  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">        &#125;  </span><br><span class="line"> (<span class="number">4</span>) <span class="keyword">switch</span> 语句块 &#123;  </span><br><span class="line">     &#125;  </span><br><span class="line"> <span class="comment">//for  </span></span><br><span class="line"> (<span class="number">1</span>) <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>;  i++&#123;  <span class="comment">//注意for没有()  </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"> (<span class="number">2</span>)  <span class="keyword">for</span> 条件&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"> (<span class="number">3</span>) fro <span class="keyword">range</span>  </span><br><span class="line">    str := “hello world,中国”  </span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> str &#123;  </span><br><span class="line">        fmt.Printf(“index[%d] val[%c] <span class="built_in">len</span>[%d]\n”, i, v, <span class="built_in">len</span>([]<span class="keyword">byte</span>(v)))  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中参数列表和返回值列表是可选</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionname</span><span class="params">([parametername <span class="keyword">type</span>])</span> [<span class="title">returntype</span>]</span> &#123; </span><br><span class="line"><span class="comment">//function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不支持重载，一个包不能有两个名字一样的函数<br>函数是一等公民，函数也是一种类型，一个函数可以赋值给变量<br>匿名函数<br>多返回值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>, sub <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sum = a + b</span><br><span class="line">    sub = a - b</span><br><span class="line">    <span class="keyword">return</span>  <span class="comment">//返回sum, sub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum, _ := calc(<span class="number">100</span>, <span class="number">200</span>); <span class="comment">//忽略返回值</span></span><br></pre></td></tr></table></figure></p><p>可变参<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc_v2</span><span class="params">(a <span class="keyword">int</span>, b ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := a</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(b);i++ &#123;</span><br><span class="line">        sum = sum + b[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum := calc_v2(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>当函数返回时，执行defer语句。因此，可以用来做资源清理<br>多个defer语句，按先进后出的方式执行<br>defer语句中的变量，在defer声明时就决定了<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭文件句柄 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    file := open(filename)  </span><br><span class="line">    <span class="keyword">defer</span> file.Close()  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//锁资源释放  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    mc.Lock()  </span><br><span class="line">    <span class="keyword">defer</span> mc.Unlock()  </span><br><span class="line">    <span class="comment">//其他操作  </span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">//数据库连接释放  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    conn := openDatabase()  </span><br><span class="line">    <span class="keyword">defer</span> conn.Close()  </span><br><span class="line">    <span class="comment">//其他操作  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDefer3</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"> <span class="keyword">defer</span> fmt.Printf(<span class="string">"defer i=%d\n"</span>, i)  <span class="comment">//打印结果i=0</span></span><br><span class="line"> i= <span class="number">1000</span></span><br><span class="line"> fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">不需要导入包  </span><br><span class="line"><span class="built_in">close</span>：主要用来关闭channel  </span><br><span class="line"><span class="built_in">len</span>：用来求长度，比如<span class="keyword">string</span>、array、slice、<span class="keyword">map</span>、channel  </span><br><span class="line"><span class="built_in">new</span>：用来对各种类型分配内存，主要用来分配值类型，比如<span class="keyword">int</span>、<span class="keyword">struct</span>。返回的是指针  </span><br><span class="line"><span class="built_in">make</span>：用来对内建类型分配内存，主要用来分配引用类型，比如channel <span class="keyword">map</span> slice  </span><br><span class="line"><span class="built_in">append</span>：用来追加元素到数组、slice中  </span><br><span class="line"><span class="built_in">panic</span>和<span class="built_in">recover</span>：用来做错误处理  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b *[]<span class="keyword">int</span> = <span class="built_in">new</span>([]<span class="keyword">int</span>) </span><br><span class="line"><span class="comment">//*b[0] = 100 error, 需要用make初始化 </span></span><br><span class="line">(*b) = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><ul><li>new和make的区别<br><img src="https://i.loli.net/2020/11/15/7j1iwuRYGMeVDLX.png" alt="p4">  </li></ul><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFunc2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1 := <span class="function"><span class="keyword">func</span> <span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;  <span class="comment">//匿名函数  </span></span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"type of f1=%T\n"</span>, f1) <span class="comment">//%T类型 </span></span><br><span class="line">    sum := f1(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"sum=%d\n"</span>, sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//defer和匿名函数  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFunc4</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"defer i=%d\n"</span>, i) <span class="comment">//i=100</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    i = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型作参数"><a href="#函数类型作参数" class="headerlink" title="函数类型作参数"></a>函数类型作参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(a , b <span class="keyword">int</span>, op <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span><span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//eg1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base += i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmp1 := add(<span class="number">10</span>)</span><br><span class="line">fmt.Println(tmp(<span class="number">1</span>), tmp(<span class="number">2</span>))  <span class="comment">//11, 13</span></span><br><span class="line">tmp2 := add(<span class="number">100</span>) <span class="comment">//101, 103</span></span><br><span class="line">fmt.Println(tmp2(<span class="number">1</span>), tmp2(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//eg2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixFunc</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123; </span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123; </span><br><span class="line"><span class="keyword">return</span> name + suffix </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> name </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func1 := makeSuffixFunc(<span class="string">".bmp"</span>) </span><br><span class="line">func2 := makeSuffixFunc(<span class="string">".jpg"</span>) </span><br><span class="line">fmt.Println(func1(<span class="string">"test"</span>))  <span class="comment">//test.bmp</span></span><br><span class="line">fmt.Println(func2(<span class="string">"test"</span>)) <span class="comment">//test.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>)</span> &#123;</span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base += i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line">sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base -= i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1, f2 := calc(<span class="number">10</span>)</span><br><span class="line">fmt.Println(f1(<span class="number">1</span>), f2(<span class="number">2</span>)) <span class="comment">//11, 9</span></span><br><span class="line">fmt.Println(f1(<span class="number">3</span>), f2(<span class="number">4</span>)) <span class="comment">//12, 8</span></span><br><span class="line">fmt.Println(f1(<span class="number">5</span>), f2(<span class="number">6</span>)) <span class="comment">//13, 7</span></span><br><span class="line">fmt.Println(f1(<span class="number">7</span>), f2(<span class="number">8</span>)) <span class="comment">//14, 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg4</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(i) <span class="comment">//i全=5</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> func1(i <span class="keyword">int</span>)&#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;(i)    <span class="comment">//1,2,3,4,5</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="built_in">len</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">//eg</span></span><br><span class="line"><span class="keyword">var</span> a[<span class="number">5</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>长度是数组类型的一部分，因此，var a[5] int和var a[10]int是不同的类型, 不能a=b<br>数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1<br>访问越界，如果下标在数组合法范围之外，则触发访问越界，会panic<br>数组是值类型，因此改变副本的值，不会改变本身的值 </p></li><li><p>初始化<br>整数数组元素默认初始化是0, 字符串数组默认初始化””, 浮点型是0.0</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age0 [<span class="number">5</span>] <span class="keyword">int</span> = [<span class="number">5</span>] <span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; </span><br><span class="line"><span class="keyword">var</span> age1 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;  </span><br><span class="line"><span class="keyword">var</span> age2 = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;  </span><br><span class="line">age3 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment">//1 2 3 0 0  </span></span><br><span class="line"><span class="keyword">var</span> str = [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="number">3</span>:”hello world”, <span class="number">4</span>:”tom”&#125; <span class="comment">//指定索引赋值</span></span><br></pre></td></tr></table></figure></li><li><p>遍历  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"a[%d]=%d\n"</span>, i, a[i])</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> _, value := <span class="keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, value)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>多维数组 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> age [<span class="number">5</span>][<span class="number">3</span>] <span class="keyword">int</span>  </span><br><span class="line">   <span class="keyword">var</span> age [<span class="number">5</span>][<span class="number">3</span>] <span class="keyword">int</span> = [...][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span> , <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>, a[i][j])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, val := <span class="keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="string">"row[%d]=%v\n"</span>, i, val)</span><br><span class="line"><span class="keyword">for</span> j, val2 := <span class="keyword">range</span> val &#123;</span><br><span class="line">fmt.Printf(<span class="string">"(%d,%d)=%d "</span>,i, j, val2)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>数组拷贝<br>数组是值类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//b初始化时是深拷贝    </span></span><br><span class="line">a := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line">b := a</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1000</span></span><br><span class="line">fmt.Printf(<span class="string">"a=%v\n"</span>, a) <span class="comment">//10, 20, 30</span></span><br><span class="line">fmt.Printf(<span class="string">"b=%v\n"</span>, b) <span class="comment">//1000, 20, 30</span></span><br></pre></td></tr></table></figure></li><li>数组传参 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组在传参的时候会深拷贝   </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(b [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"> b[<span class="number">0</span>] = <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(b [3][3]<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    b[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>基于数组类型做的一层封装，可以自动扩容<br>切片是数组的一个引用，因此切片是引用类型<br>切片的长度可以改变，因此，切片是一个可变的数组  </p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 []类型</span><br><span class="line"><span class="comment">//eg</span></span><br><span class="line"><span class="keyword">var</span> str []<span class="keyword">string</span>  </span><br><span class="line"><span class="keyword">var</span> arr []<span class="keyword">int</span></span><br></pre></td></tr></table></figure><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1 基于数组  </span></span><br><span class="line"><span class="comment">//a[start:end]创建一个包括从start到end-1的切片  </span></span><br><span class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b[]<span class="keyword">int</span> = a[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">//2 3 4 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg</span></span><br><span class="line">a := [...]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line">b := a[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment">//b的长度是2, cap是7</span></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">c := []<span class="keyword">int</span>&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125; <span class="comment">//写长度就是数组</span></span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含start到end之间的元素，但不包含end  </span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span> = arr[start:end]  </span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span> = arr[:end]  <span class="comment">//var slice []int = arr[0:end]</span></span><br><span class="line"><span class="keyword">var</span> slice[]<span class="keyword">int</span> = arr[start:] <span class="comment">//var slice []int = arr[start:len(arr)]</span></span><br><span class="line"><span class="keyword">var</span> slice[]<span class="keyword">int</span> = arr[:] <span class="comment">//var slice []int = arr[0, len(arr)]</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)  </span><br><span class="line">slice  := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)  </span><br><span class="line">slice  := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>, <span class="built_in">cap</span>)  <span class="comment">//如果使用[]访问超过len的空间，需要使用append插入元素, 否则会panic</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/15/BuZSoXcG6U9grfH.png" alt="p6"> </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//将切片追加到另一个切片末尾  </span></span><br><span class="line">   <span class="keyword">var</span> a []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">23</span>, <span class="number">34</span>, <span class="number">45</span>)</span><br><span class="line">a = <span class="built_in">append</span>(a, b...) <span class="comment">//将b展开</span></span><br></pre></td></tr></table></figure><ul><li><p>拷贝</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(a, b) <span class="comment">//不会对被拷贝的切片扩容</span></span><br></pre></td></tr></table></figure></li><li><p>cap<br>cap可以求出slice最大的容量，0 &lt;= len(slice) &lt;= cap(array)，其中array<br>如果要切片最后一个元素去掉，可以这么写: slice = slice[:len(slice)-1]  </p></li><li><p>切片再切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := [...]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line">b := a[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">//len2, cap 7</span></span><br><span class="line">b = b[:<span class="built_in">cap</span>(b)] <span class="comment">//len 7 cap 7</span></span><br></pre></td></tr></table></figure></li><li><p>空切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> a []<span class="keyword">int</span> <span class="comment">//直接操作会panic</span></span><br><span class="line">   <span class="keyword">if</span> a == <span class="literal">nil</span> &#123; <span class="comment">//判空 </span></span><br><span class="line">fmt.Printf(<span class="string">"a is nil\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   a = <span class="built_in">append</span>(a, <span class="number">100</span>) <span class="comment">//对空切片扩容</span></span><br></pre></td></tr></table></figure></li><li><p>传参  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumArray</span><span class="params">(a []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        sum = sum + v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span> = [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>&#125;</span><br><span class="line">sum := sumArray(a[:]</span><br></pre></td></tr></table></figure></li></ul><h3 id="切片的内存布局"><a href="#切片的内存布局" class="headerlink" title="切片的内存布局"></a>切片的内存布局</h3><p><img src="https://i.loli.net/2020/11/15/fLe7xZGiP9TruED.png" alt="p5">  </p><h3 id="string与slice"><a href="#string与slice" class="headerlink" title="string与slice"></a>string与slice</h3><p>string底层就是一个byte的数组，因此，也可以进行切片操作<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str := “hello world”  </span><br><span class="line">s1 := str[<span class="number">0</span>:<span class="number">5</span>]  </span><br><span class="line">fmt.Println(s1)  </span><br><span class="line">s2 := str[<span class="number">5</span>:]  </span><br><span class="line">fmt.Println(s2)</span><br></pre></td></tr></table></figure></p><h3 id="切片示例"><a href="#切片示例" class="headerlink" title="切片示例"></a>切片示例</h3><p><a href="https://github.com/colinblack/go_devel/blob/master/tools/passwd/passwd.go" target="_blank" rel="noopener">生成密码</a></p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key-value的数据结构，又叫字典或关联数组  </span></span><br><span class="line"><span class="comment">//声明是不会分配内存的，初始化需要make  </span></span><br><span class="line"><span class="comment">// map是引用类型  </span></span><br><span class="line"><span class="keyword">var</span> map1 <span class="keyword">map</span>[keytype]valuetype  </span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>  </span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>  </span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>  </span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">//申明时初始化</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;“hello”: “world”&#125;  </span><br><span class="line"><span class="comment">//make初始化</span></span><br><span class="line">a := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>操作  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a[“hello”] = “world”            <span class="comment">//插入和更新  </span></span><br><span class="line">Val, ok := a[“hello”]           <span class="comment">//查找  </span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> a &#123;           <span class="comment">//遍历  </span></span><br><span class="line">    fmt.Println(k,v)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">delete</span>(a, “hello”)              <span class="comment">//删除  </span></span><br><span class="line"><span class="built_in">len</span>(a)                          <span class="comment">//长度  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//slice of map  </span></span><br><span class="line">Items := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">int</span>][<span class="keyword">int</span>], <span class="number">5</span>)  </span><br><span class="line">For I := <span class="number">0</span>; I &lt; <span class="number">5</span>; i++ &#123;  </span><br><span class="line">        items[i] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>][<span class="keyword">int</span>])  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>排序<br>map中key值是无序的<br>a. 先获取所有key，把key进行排序<br>b. 按照排序好的key，进行遍历  </p></li><li><p>翻转<br>初始化另外一个map，把key、value互换即可  </p></li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul><li>线程同步<br>a. import(“sync”)<br>b. 互斥锁, var mu sync.Mutex<br>c. 读写锁, var mu sync.RWMutex  </li></ul><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><ul><li>用来自定义复杂数据结构  </li><li>struct里面可以包含多个字段（属性）  </li><li>struct类型可以定义方法，注意和函数的区分  </li><li>struct类型是值类型  </li><li>struct类型可以嵌套  </li><li>Go没有class类型，只有struct类型  </li><li>结构体内字段地址连续</li><li>struct没有构造函数，一般可以使用工厂模式来解决这个问题  </li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;  </span><br><span class="line">    Name stirng  </span><br><span class="line">    Age <span class="keyword">int</span>  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化 </span></span><br><span class="line">user := student&#123;</span><br><span class="line">    Name : <span class="string">"user"</span>,</span><br><span class="line">    Age  : <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">student</span></span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> &amp;student&#123;  </span><br><span class="line">        Name:name,  </span><br><span class="line">        Age:age,  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">S := <span class="built_in">new</span> (student)  </span><br><span class="line">S := model.NewStudent(“tony”, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li><p>指向结构体的指针 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user *student <span class="comment">//nil</span></span><br><span class="line"><span class="keyword">var</span> user01 *student = &amp;student&#123;&#125;</span><br><span class="line">user01.Name=<span class="string">"user01"</span> <span class="comment">//指针使用.操作，是编译器简化了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user02 *student = &amp;student&#123;</span><br><span class="line">    Name : user02,</span><br><span class="line">    Age  : <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user03 *student = <span class="built_in">new</span>(student)</span><br></pre></td></tr></table></figure></li><li><p>结构体嵌套 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">       Province <span class="keyword">string</span></span><br><span class="line">       City     <span class="keyword">string</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">       Username <span class="keyword">string</span></span><br><span class="line">       Sex      <span class="keyword">string</span></span><br><span class="line">       address  *Address</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">user := &amp;User&#123;</span><br><span class="line">Username: <span class="string">"user01"</span>,</span><br><span class="line">Sex:      <span class="string">"man"</span>,</span><br><span class="line">address: &amp;Address&#123;</span><br><span class="line">Province: <span class="string">"beijing"</span>,</span><br><span class="line">City:     <span class="string">"beijing"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>匿名字段   </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//匿名字段默认采用类型名作为字段名 </span></span><br><span class="line">   <span class="keyword">type</span> User <span class="keyword">struct</span> &#123; </span><br><span class="line">       Username <span class="keyword">string</span></span><br><span class="line">       Sex <span class="keyword">string</span></span><br><span class="line">       Age <span class="keyword">int</span></span><br><span class="line">       AvatarUrl <span class="keyword">string</span></span><br><span class="line">       <span class="keyword">int</span></span><br><span class="line">       <span class="keyword">string</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> s User</span><br><span class="line">   s.<span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">   s.<span class="keyword">string</span>=<span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//嵌套结构体匿名字段 </span></span><br><span class="line">   <span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    Province   <span class="keyword">string</span></span><br><span class="line">   City       <span class="keyword">string</span></span><br><span class="line">   CreateTime <span class="keyword">string</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">   Username <span class="keyword">string</span></span><br><span class="line">   Sex      <span class="keyword">string</span></span><br><span class="line">   *Address</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//方法1</span></span><br><span class="line">   <span class="keyword">var</span> user User</span><br><span class="line">   user.Address = &amp;Address&#123;</span><br><span class="line">Province: <span class="string">"bj"</span>,</span><br><span class="line">City:     <span class="string">"bj"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//方法2</span></span><br><span class="line">   user.Province = <span class="string">"bj01"</span></span><br><span class="line">user.City = <span class="string">"bj01"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//字段冲突解决 </span></span><br><span class="line">   <span class="keyword">type</span> User01 <span class="keyword">struct</span> &#123;</span><br><span class="line">       City     <span class="keyword">string</span></span><br><span class="line">       Username <span class="keyword">string</span></span><br><span class="line">       Sex      <span class="keyword">string</span></span><br><span class="line">       *Address</span><br><span class="line">       *Email</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> user01 User01</span><br><span class="line">   user01.City = <span class="string">"bj"</span> <span class="comment">//此时因为User01中有City被有限房屋， 如果没有再访问Address中City</span></span><br><span class="line">   user.Address.CreateTime = <span class="string">"001"</span> <span class="comment">//Address和Email中都有CreateTime需要指明</span></span><br></pre></td></tr></table></figure></li><li><p>tag<br>结构体的元信息，可以在运⾏的时候通过反射的机制读取出来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123; </span><br><span class="line">    Username <span class="keyword">string</span> <span class="string">`json:”username”,db:”user_name”`</span></span><br><span class="line">    Sex <span class="keyword">string</span> <span class="string">`json:”sex”`</span></span><br><span class="line">    Age <span class="keyword">int</span> <span class="string">`json:”age”`</span></span><br><span class="line">    avatarUrl <span class="keyword">string</span></span><br><span class="line">    CreateTime <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line"></span><br><span class="line">data, _ := json.Marshal(user)</span><br></pre></td></tr></table></figure></li><li>结构体与json序列化  </li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Golang中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(recevier <span class="keyword">type</span>)</span> <span class="title">methodName</span><span class="params">(参数列表)</span><span class="params">(返回值列表)</span></span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name    <span class="keyword">string</span></span><br><span class="line">        Country <span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(p People)</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"name=%s country=%s\n"</span>, p.Name, p.Country)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(p People)</span> <span class="title">Set</span><span class="params">(name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        p.Name = name</span><br><span class="line">        p.Country = country</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">SetV2</span><span class="params">(name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        p.Country = country</span><br><span class="line">        p.Name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 People = People&#123;</span><br><span class="line">Name:    <span class="string">"people01"</span>,</span><br><span class="line">Country: <span class="string">"china"</span>,</span><br><span class="line">&#125;</span><br><span class="line">    p1.Set(<span class="string">"people02"</span>, <span class="string">"enligsh"</span>)  <span class="comment">//传值不能改变p1的成员</span></span><br><span class="line">    (&amp;p1).SetV2(<span class="string">"people02"</span>, <span class="string">"english"</span>) <span class="comment">//要传指针 </span></span><br><span class="line">    p1.SetV2(<span class="string">"people02"</span>, <span class="string">"english"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以为这个包中的任意类型增加方法  </span></span><br><span class="line">    <span class="keyword">type</span> Integer <span class="keyword">int</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(i Integer)</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;  </span><br><span class="line">    Name <span class="keyword">string</span>  </span><br><span class="line">    Next *Student  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>通过匿名字段来实现<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Sex  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span> <span class="title">Talk</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"i'talk, i'm %s\n"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PuruAnimal <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PuruAnimal)</span> <span class="title">Talk</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"buru dongwu talk"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Feet <span class="keyword">string</span></span><br><span class="line">    <span class="comment">//Animal</span></span><br><span class="line">    *Animal   </span><br><span class="line">    *PuruAnimal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span> <span class="title">Eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"dog is eat"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">func (d *Dog) Talk() &#123;</span></span><br><span class="line"><span class="comment">    fmt.Println("dog is talking")</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> d *Dog = &amp;Dog&#123;</span><br><span class="line">        Feet: <span class="string">"four feet"</span>,</span><br><span class="line">        Animal: &amp;Animal&#123;</span><br><span class="line">            Name: <span class="string">"dog"</span>,</span><br><span class="line">            Sex:  <span class="string">"xiong"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d.Eat()</span><br><span class="line">    d.Animal.Talk() </span><br><span class="line">    d.PuruAnimal.Talk()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>Interface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量<br>如果一个变量含有了多个interface类型的方法，那么这个变量就实现了多个接口<br>如果一个变量只含有了1个interface的方部分方法，那么这个变量没有实现这个接口  </p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型可以采用以下方法进行转换<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t <span class="keyword">int</span>  </span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;  </span><br><span class="line">x = t  </span><br><span class="line">y, ok = x.(<span class="keyword">int</span>)   <span class="comment">//转成int，带检查</span></span><br></pre></td></tr></table></figure></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">可以在运行时动态获取变量的相关信息  </span><br><span class="line"><span class="keyword">import</span> (“reflect”)  </span><br><span class="line">reflect.TypeOf，获取变量的类型，返回reflect.Type类型  </span><br><span class="line">reflect.ValueOf，获取变量的值，返回reflect.Value类型  </span><br><span class="line">reflect.Value.Kind，获取变量的类别，返回一个常量  </span><br><span class="line">reflect.Value.Interface()，转换成<span class="keyword">interface</span>&#123;&#125;类型  </span><br><span class="line">reflect.Value.Kind()方法返回的常量</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/15/EhDFwGHMW5iKxO3.png" alt="p7">  </p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">终端读写  </span><br><span class="line">os.Stdin：标准输入  </span><br><span class="line">os.Stdout：标准输出  </span><br><span class="line">os.Stderr：标准错误输出  </span><br><span class="line"></span><br><span class="line">文件写入  </span><br><span class="line">os.OpenFile(“output.dat”,  os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)  </span><br><span class="line">第二个参数：文件打开模式：  </span><br><span class="line"><span class="number">1.</span> os.O_WRONLY：只写  </span><br><span class="line"><span class="number">2.</span> os.O_CREATE：创建文件  </span><br><span class="line"><span class="number">3.</span> os.O_RDONLY：只读  </span><br><span class="line"><span class="number">4.</span>  os.O_RDWR：读写  </span><br><span class="line"><span class="number">5.</span>  os.O_TRUNC ：清空  </span><br><span class="line">第三个参数：权限控制：  </span><br><span class="line">r ——&gt; <span class="number">004</span>  </span><br><span class="line">w——&gt; <span class="number">002</span>  </span><br><span class="line">x——&gt; <span class="number">001</span>  </span><br><span class="line"></span><br><span class="line">命令行参数  </span><br><span class="line">os.Args是一个<span class="keyword">string</span>的切片，用来存储所有的命令行参数</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入包：<span class="keyword">import</span> “encoding/json”  </span><br><span class="line">序列化: json.Marshal(data <span class="keyword">interface</span>&#123;&#125;)  </span><br><span class="line">反序列化: json.UnMarshal(data []<span class="keyword">byte</span>,  v  <span class="keyword">interface</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p>不同goroutine之间如何通信  </p><ul><li>全局变量和锁同步  </li><li>Channel<br>类似unix中的管道<br>先进先出<br>线程安全, 多个goroutine同时访问, 不需要加锁<br>channel是有类型的, 一个整数的channel只能存放整数<br>channel带缓冲区  </li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>文件名必须以_test.go结尾<br>函数名必须以Test开头</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  
&lt;h2 id=&quot;项目构建&quot;&gt;&lt;a href=&quot;#项目构建&quot; class=&quot;headerlink&quot; title=&quot;项目构建&quot;&gt;&lt;/a&gt;项目构建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;个人&lt;br&gt;&lt;img src=&quot;https://i.loli.ne
      
    
    </summary>
    
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>linux内核实战</title>
    <link href="http://yoursite.com/2020/05/07/linux%E5%86%85%E6%A0%B8%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2020/05/07/linux%E5%86%85%E6%A0%B8%E5%AE%9E%E6%88%98/</id>
    <published>2020-05-07T08:13:54.000Z</published>
    <updated>2020-11-15T02:49:03.669Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>  <h3 id="内核C中结构体初始化"><a href="#内核C中结构体初始化" class="headerlink" title="内核C中结构体初始化"></a>内核C中结构体初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> __percpu       __attribute__((noderef, address_space(3)))</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">As</span>&#123;</span> </span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">A</span> <span class="title">gdt</span>[2];</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PER_CPU_DEF_ATTRIBUTES</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFINE_AS \</span></span><br><span class="line">        __percpu PER_CPU_DEF_ATTRIBUTES \</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">As</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">main</span>()&#123;</span></span><br><span class="line">    <span class="comment">//struct As ss =&#123;.gdt=&#123;[0]=&#123;.a= 1, .b = 2&#125;, [1]=&#123;.a=3, .b=4&#125;&#125;&#125;;</span></span><br><span class="line">    DEFINE_AS ss =&#123;.gdt=&#123;[<span class="number">0</span>]=&#123;.a= <span class="number">1</span>, .b = <span class="number">2</span>&#125;, [<span class="number">1</span>]=&#123;.a=<span class="number">3</span>, .b=<span class="number">4</span>&#125;&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ss.gdt[<span class="number">0</span>].a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  
&lt;h3 id=&quot;内核C中结构体初始化&quot;&gt;&lt;a href=&quot;#内核C中结构体初始化&quot; class=&quot;headerlink&quot; title=&quot;内核C中结构体初始化&quot;&gt;&lt;/a&gt;内核C中结构体初始化&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux内核" scheme="http://yoursite.com/tags/Linux%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>muduo笔记</title>
    <link href="http://yoursite.com/2020/04/04/muduo%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/04/04/muduo%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-04T01:10:21.000Z</published>
    <updated>2020-11-15T02:49:03.669Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <ul><li>non-blocking 和 IO multiplexing 一起使用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;ul&gt;
&lt;li&gt;non-blocking 和 IO multiplexing 一起使用&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>linux系统编程</title>
    <link href="http://yoursite.com/2020/03/30/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/30/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</id>
    <published>2020-03-30T01:02:55.000Z</published>
    <updated>2020-11-15T02:49:03.669Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>  <h3 id="exec函数簇和system区别"><a href="#exec函数簇和system区别" class="headerlink" title="exec函数簇和system区别"></a>exec函数簇和system区别</h3><p>exec是新进程复制原来的进程， pid不变， exec后的代码不会被执行   </p><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>守护进程会清理环境变量， 所以守护进程中使用exec执行系统命令时最好加上绝对路径  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  
&lt;h3 id=&quot;exec函数簇和system区别&quot;&gt;&lt;a href=&quot;#exec函数簇和system区别&quot; class=&quot;headerlink&quot; title=&quot;exec函数簇和system区别&quot;&gt;&lt;/a&gt;exec函数簇和system区别&lt;/
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="http://yoursite.com/2020/03/29/%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2020/03/29/%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-03-29T02:24:59.000Z</published>
    <updated>2020-11-15T02:49:03.673Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>定义模板是不会生成代码，只有当实例化时才会生成  </p><h3 id="类型模板参数"><a href="#类型模板参数" class="headerlink" title="类型模板参数"></a>类型模板参数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非类型模板参数"><a href="#非类型模板参数" class="headerlink" title="非类型模板参数"></a>非类型模板参数</h3><p>非类型是指不是泛型， 即基本类型<br>即显示使用&lt;&gt;指定<br>非类型模板参数必须是常量， 因为模板代码在编译期生成</p><ul><li>所有参数都是非类型<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> a, <span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add&lt;<span class="number">1</span>, <span class="number">2</span>&gt;() <span class="comment">//显示指定参数</span></span><br></pre></td></tr></table></figure></li><li>非类型和类型参数混合<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">a</span> , <span class="title">int</span> <span class="title">b</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">c</span>)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)c + a + b;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add&lt;<span class="keyword">int</span>, <span class="number">1</span>, <span class="number">2</span>&gt;(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li>非类型模板也可以不用&lt;&gt;指定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> L1, <span class="keyword">unsigned</span> L1&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcomp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>(&amp;p1)[L1], <span class="keyword">const</span> <span class="keyword">char</span>(&amp;p2)[L2])</span></span>&#123;  <span class="comment">//数组的引用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(p1, p2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strcomp(<span class="string">"test"</span>, <span class="string">"test2"</span>); <span class="comment">//字符串长度由编译器默认推到</span></span><br><span class="line">strcomp&lt;<span class="number">5</span>, <span class="number">6</span>&gt;(<span class="string">"test"</span>, <span class="string">"test2"</span>); <span class="comment">//也可以显示指定</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>类模板编译器不能自动推导参数所以要显示用&lt;&gt;指定  </p><h3 id="类模板成员函数"><a href="#类模板成员函数" class="headerlink" title="类模板成员函数"></a>类模板成员函数</h3><ul><li><p>定义在类内部不用写类型参数   </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>定义在类外部   </p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">A</span>&lt;T&gt;:</span>:func()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非类型模板参数-1"><a href="#非类型模板参数-1" class="headerlink" title="非类型模板参数"></a>非类型模板参数</h3><p>非类型参数不能是浮点数和类<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">V</span> = 100&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">A</span>&lt;T, V&gt;:</span>:func()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="typename使用场景"><a href="#typename使用场景" class="headerlink" title="typename使用场景"></a>typename使用场景</h2><ul><li>模板类型参数   </li><li>使用类的类型成员， 用typename来标示这个类型<br>一般使用::后面跟类型时，编译器默认会当作类的成员变量。为防止这种情况使用必须使用typename(这里不能使用class代替)    </li></ul><p>例1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">mystring</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T* Iterator;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterator <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">mystring</span>&lt;T&gt;:</span>:Iterator mystring&lt;T&gt;::begin()&#123;</span><br><span class="line">    <span class="comment">//....    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉单例模式</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">CHSingleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    CHSingleton()</span><br><span class="line">    &#123;</span><br><span class="line">        _destory.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~CHSingleton()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T *<span class="title">Instance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _instance; &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CDestory</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        CDestory()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"CDestory"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~CDestory()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"~CDestory"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">delete</span> CHSingleton::_instance;</span><br><span class="line">            CHSingleton::_instance = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">thread_local</span> <span class="keyword">static</span> T *_instance;</span><br><span class="line">    <span class="keyword">static</span> CDestory _destory;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">thread_local</span> <span class="title">T</span> *<span class="title">CHSingleton</span>&lt;T&gt;:</span>:_instance = <span class="keyword">new</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">CHSingleton</span>&lt;T&gt;:</span>:CDestory CHSingleton&lt;T&gt;::_destory;</span><br></pre></td></tr></table></figure></p><h2 id="可调用对象做函数模板的默认参数"><a href="#可调用对象做函数模板的默认参数" class="headerlink" title="可调用对象做函数模板的默认参数"></a>可调用对象做函数模板的默认参数</h2><p>c++11以后支持模板函数默认参数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数指针</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Func</span>=<span class="title">func1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">tfunc</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">i</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">j</span>, <span class="title">Func</span> <span class="title">f</span>= <span class="title">func1</span>)&#123;</span></span><br><span class="line">    f(i, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">O</span>=<span class="title">Obj</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">tfunc</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">i</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">j</span>, <span class="title">O</span> <span class="title">o</span>= <span class="title">Obj</span>())&#123;</span></span><br><span class="line">    o(i, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="成员函数模板"><a href="#成员函数模板" class="headerlink" title="成员函数模板"></a>成员函数模板</h2><p>成员函数模板不能是虚函数， </p><h3 id="普通类的成员函数模板"><a href="#普通类的成员函数模板" class="headerlink" title="普通类的成员函数模板"></a>普通类的成员函数模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">func</span>(<span class="title">T</span> <span class="title">t</span>)&#123;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line">a.func(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="类模板中的成员函数模板"><a href="#类模板中的成员函数模板" class="headerlink" title="类模板中的成员函数模板"></a>类模板中的成员函数模板</h3><ul><li>类成员模板函数定义在类内   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">A</span>(<span class="title">T1</span> <span class="title">a</span>, <span class="title">T2</span> <span class="title">b</span>)&#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T3</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">func</span>(<span class="title">T3</span> <span class="title">c</span>)&#123;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    C c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">a.func(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li>类成员模板函数定义在类外  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp&lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>&gt;  //先写类模板申明</span></span><br><span class="line"><span class="class"><span class="title">temp</span>&lt;class T1, class T2&gt; //再写成员函数模板申明 </span></span><br><span class="line"><span class="class"><span class="title">A</span>&lt;C&gt;:</span>:A(T1 a, T2 b)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板显式实例化"><a href="#模板显式实例化" class="headerlink" title="模板显式实例化"></a>模板显式实例化</h2>为防止多个cpp文件中实例化相同的模板类， c++11中使用显示实例化解决<br>每种类型的模板只需实例化一次， 其他的cpp文件声明就行， 只有使用到该类型模板才用实例化  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.cpp</span></span><br><span class="line"><span class="keyword">template</span>  A&lt;<span class="keyword">float</span>&gt;;  <span class="comment">//显式实例化类</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>  <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>;<span class="comment">//显示实例化函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//b.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> A&lt;<span class="keyword">float</span>&gt;; <span class="comment">//显式实例化类声明</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">template</span>  <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>;<span class="comment">//显示实例化函数申明</span></span><br></pre></td></tr></table></figure>类模板的实例化会实例化类模板的所有成员函数， 包括内联和类成员模板函数(vs中)    </li></ul><h2 id="using-定义模板别名"><a href="#using-定义模板别名" class="headerlink" title="using 定义模板别名"></a>using 定义模板别名</h2><ul><li>定义一个值为任意参数的模板别名  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">s_map</span> = <span class="title">std</span>:</span>:<span class="built_in">map</span>&lt;<span class="built_in">string</span>, T&gt;;</span><br><span class="line"></span><br><span class="line">s_map&lt;<span class="keyword">int</span>&gt; m;</span><br><span class="line">m.insert(&#123;<span class="string">"first"</span>, <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure></li><li>定义一个函数指针模板<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">funcptr</span> = <span class="title">bool</span> (*)(<span class="title">T</span>, <span class="title">T</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">funcptr&lt;<span class="keyword">int</span>&gt; f_ptr;</span><br><span class="line">f_ptr = func;</span><br></pre></td></tr></table></figure></li></ul><h2 id="显示指定模板参数"><a href="#显示指定模板参数" class="headerlink" title="显示指定模板参数"></a>显示指定模板参数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>, <span class="title">class</span> <span class="title">T3</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T1</span> <span class="title">sum</span>(<span class="title">T2</span> <span class="title">i</span>, <span class="title">T3</span> <span class="title">j</span>)&#123;</span></span><br><span class="line">    T1 res = i + j;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数2,3能推导出来， 能省略</span></span><br><span class="line"><span class="keyword">auto</span> res = sum&lt;<span class="keyword">double</span>&gt;(<span class="number">200000000</span>, <span class="number">200000000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>, <span class="title">class</span> <span class="title">T3</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T3</span> <span class="title">sum</span>(<span class="title">T1</span> <span class="title">i</span>, <span class="title">T2</span> <span class="title">j</span>)&#123;</span></span><br><span class="line">    T3 res = i + j;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数不能省</span></span><br><span class="line"><span class="keyword">auto</span> res = sum&lt;<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>&gt;(<span class="number">200000000</span>, <span class="number">200000000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;函数模板&quot;&gt;&lt;a href=&quot;#函数模板&quot; class=&quot;headerlink&quot; title=&quot;函数模板&quot;&gt;&lt;/a&gt;函数模板&lt;/h2&gt;&lt;p&gt;定义模板是不会生成代码，只有当实例化时才会生成  &lt;/p&gt;
&lt;h3 id=&quot;类型模板参数
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="泛型" scheme="http://yoursite.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>patchelf</title>
    <link href="http://yoursite.com/2020/03/26/%E5%B7%A5%E5%85%B7/patchelf/"/>
    <id>http://yoursite.com/2020/03/26/%E5%B7%A5%E5%85%B7/patchelf/</id>
    <published>2020-03-26T13:09:29.000Z</published>
    <updated>2020-11-15T02:49:03.673Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PatchELF 是一个用来修改elf格式的动态库和可执行程序的小工具，可以修改动态链接库的库名字，以及链接库的rpath。  </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>wget <a href="https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz" target="_blank" rel="noopener">https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz</a><br>tar -zxvf patchelf-0.10.tar.gz<br>cd patchelf-0.10<br>./configure —prefix=/usr/local<br>make &amp;&amp; make install</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="修改动态库的rpath"><a href="#修改动态库的rpath" class="headerlink" title="修改动态库的rpath"></a>修改动态库的rpath</h3><p>rpath全称是run-time search path。Linux下所有elf格式的文件都包含它，特别是可执行文件。它规定了可执行文件在寻找.so文件时的第一优先位置. linux下在链接共享库的时候可以通过rpath选项来指定运行时共享库加载路径。通过这个选项指定的路径会写到ELF文件dynamic段的RPATH里, 运行时链接器会在此路径下搜索ELF文件所依赖的共享库   </p><p>编译代码时如果不指定所依赖动态库的路径很可能会编译报错<br>有如下解决方法:</p><ul><li>将所依赖的动态库路径添加到LD_LIBRARY_PATH环境变量中</li><li>链接时直接将搜索路径写到rpath中，如:<br>gcc -L. -larith main.c -Wl,-rpath=依赖动态库所在路径 -o main<br>readelf -d main | grep PATH   //查看rpath<br>如果我们拿到的时已经编译好的可执行文件，就不能像方法2一样指定rpath,<br>这时可以使用pathelf, 它可以修改elf文件，如:<br>patchelf  —set-rpath 依赖动态库路径 main 或<br>patchelf  —set-rpath ‘$ORIGIN/lib’ main //ORIGIN会在运行时解析成程序所在路径</li><li>ldd main //查看可执行程序依赖动态库</li></ul><p>—set-rpath 实际上是修改runpath, 关于rpath和runpath的区别，前者不会覆盖LD_LIBARAY_PATH, 后者会推荐使用后者</p><p>—force-rpath pathelf的默认动作是修改runpath, 如果要修改rpath就要加上该字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf [--force-rpath] --set-rpath &quot;&lt;desired-rpath&gt;&quot; &lt;path-to-elf&gt;</span><br></pre></td></tr></table></figure><p><desired-path> 是用逗号分隔的目录列表，例如： /my/libs:/my/other/libs<br>如果指定—force-rpath，则设置RPATH，否则设置RUNPATH    </p><h3 id="修改动态库的名称"><a href="#修改动态库的名称" class="headerlink" title="修改动态库的名称"></a>修改动态库的名称</h3><p>如果有这样的场景: 某一个库依赖了一个第三库库的版本1，另外一个库依赖了同样的这个第三库的版本2，两个库的名字是一样的，程序运行时两个动态库都要加载，但是加载的时候由于第三库版本不一致导致程序运行过程中崩溃。这种情况下就可以通关patchelf修改其中一个的依赖库的名字，从而达到同时加载不同版本的动态库的效果，解决运行中的崩溃问题。<br>相关命令:<br>patchelf —print-needed test.so //查看依赖动态库，假设test.so依赖a.so<br>patchelf —replace-needed a.so b.so test.so //将a.so改成b.so</p><h3 id="删除rpath中未使用的路径"><a href="#删除rpath中未使用的路径" class="headerlink" title="删除rpath中未使用的路径"></a>删除rpath中未使用的路径</h3><pre><code>patchelf --shrink-rpath 可执行文件patchelf --remove-rpath &lt;path-to-elf&gt; //同时删除RPATH和RUNPATH   </code></pre><h3 id="修改动态链接器-dynamic-linker"><a href="#修改动态链接器-dynamic-linker" class="headerlink" title="修改动态链接器(dynamic linker)"></a>修改动态链接器(dynamic linker)</h3><p>在实际运行程序时，经常会遇到一个问题，电脑上安装的glibc版本不符合要求，由于glibc是最底层的库，不可能重新编译glibc，这样会导致系统崩溃。两种方法修改：<br>有代码的情况下，gcc main.c -o main - -Wl —dynamic-linker 动态链接库路径<br>二进制文件情况下，patchelf —set-interpreter 动态链接库路径 可执行文件</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>PatchELF已在i386-linux， x86_64-linux和powerpc-linux上进行了测试。它能在所有32位或64位，大端或小端   Linux平台上运行。稍作修改，它也可以在其他ELF平台上运行   </p><p>关于动态库的搜索：<br><a href="https://blog.csdn.net/FoxBryant/article/details/53389804" target="_blank" rel="noopener">https://blog.csdn.net/FoxBryant/article/details/53389804</a><br><a href="https://blog.csdn.net/dbzhang800/article/details/6918413#commentBox" target="_blank" rel="noopener">https://blog.csdn.net/dbzhang800/article/details/6918413#commentBox</a><br><a href="https://en.wikipedia.org/wiki/Rpath" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Rpath</a></p><pre><code>                                                                                                                         https://nixos.org/patchelf.html                                                                                                                          https://www.dazhuanlan.com/2019/09/24/5d89371175726/                                                                                                                         https://blog.csdn.net/force_eagle/article/details/48263365                                                                                                                         https://www.jianshu.com/p/505a32ccdc91                                                                                                                         http://shibing.github.io/2016/08/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8Erpath/                                                                                                                         https://blog.csdn.net/farmwang/article/details/73195799                                                                                                                     https://cqlin1995.github.io/2018/06/26/%E8%BF%90%E8%A1%8C%E4%B8%8D%E5%90%8Cglibc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%87%E4%BB%B6/</code></pre><p>ORIGIN<br><a href="https://medium.com/@nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98" target="_blank" rel="noopener">https://medium.com/@nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;PatchELF 是一个用来修改elf格式的动态库和可执行程序的小工具，可以修改动态链接库的库名字，以及
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>趣谈linux操作系统笔记</title>
    <link href="http://yoursite.com/2020/03/06/%E8%B6%A3%E8%B0%88linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/06/%E8%B6%A3%E8%B0%88linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-06T08:09:34.000Z</published>
    <updated>2020-11-15T07:35:20.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心原理篇"><a href="#核心原理篇" class="headerlink" title="核心原理篇"></a>核心原理篇</h2><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><ul><li><p>操作系统内核体系结构图<br><img src="https://i.loli.net/2020/11/15/pbBWAYXISkgerhP.png" alt="p1"></p></li><li><p>linux 命令图谱<br><img src="https://i.loli.net/2020/11/15/TurwAvLhRlDn2mN.png" alt="p2"></p></li><li><p>系统调用图谱<br><img src="https://i.loli.net/2020/11/15/HXYI9Bvx4Ff7lJO.png" alt="p3"></p></li></ul><h3 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h3><h4 id="X86架构"><a href="#X86架构" class="headerlink" title="X86架构"></a>X86架构</h4><ul><li>计算机工作模式图<br><img src="https://i.loli.net/2020/11/15/Nox2ZbL5W9QqXB7.png" alt="p4">    </li></ul><ul><li>CPU组成<br>运算单元: 加法、位移<br>控制单元: CPU内部缓存和寄存器组<br>数据单元: 取指令， 根据指令取数据， 计算结果后存放数据  </li></ul><ul><li>X86架构<br><img src="https://i.loli.net/2020/11/15/olItSPWQ4s9vMzu.png" alt="image-20201115153051673">  </li></ul><ul><li>程序执行过程图<br><img src="https://i.loli.net/2020/11/15/iyR6zdnIXJgtDsM.png" alt="p6"></li></ul><ul><li><p>总线<br>地址总线: 位数决定寻址的范围<br>数据总线: 位数决定次能拿多少数据  </p></li><li><p>8086<br>结构图:<br><img src="https://i.loli.net/2020/11/15/8xHsFyU1KAgBc6S.png" alt="p7">  </p></li></ul><p>寄存器:<br>8个16位通用寄存器，用于计算过程中暂存数据， AX、BX、CX、DX、SP、BP、SI、DI, 其中 AX、BX、CX、DX 可以分成两个 8 位的寄存器来使用，分别是 AH、AL、BH、BL、CH、CL、DH、DL<br>16位IP(Instruction Pointer Register), 指令指针寄存器，存放下一条指令在内存中的地址<br>4个16位段寄存器， CS(代码段寄存器)、DS(数据段的寄存器)、SS(栈寄存器)、ES   </p><p>实模式：<br>CS和DS中都存放这段的起始地址， IP中存放代码段偏移地址， 通用寄存器中存放数据段的偏移地址<br>8086的地址总线位20位，寻址方式：起始地址*16+偏移量， 每个段的最大寻址64k  </p><ul><li>80386<br>寄存器:<br>8个32位通用寄存器， 低16位保留了16位和八位的使用方式， 高16位没有分的原因是不兼容之前的架构(8080和8086最大寻址分别是2^16和2^20, 通用寄存器保存地址的偏移量,高16位地址已经大于2^16)<br>32位指令寄存器EIP<br>4个16位段寄存器<br><img src="https://i.loli.net/2020/11/15/gBIZs18zRj5Et2p.png" alt="p8">  </li></ul><p>保护模式：<br>段的起始地址存放在内存的某个地方，这个地方是一个表格，表格里面一项项是段描述符， 这里面才是段的起始地址， 段寄存器里面存放的是表格中的哪一项，即选择子。 CPU从段寄存器中找到表格中的选择子， 然后简介找到段起始地址， 为了更快速的拿到段起始地址， 段寄存器会从内存中拿到 CPU 的描述符高速缓存器中<br><img src="https://i.loli.net/2020/11/15/EBncydGJ17zAo2X.png" alt="p9">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;核心原理篇&quot;&gt;&lt;a href=&quot;#核心原理篇&quot; class=&quot;headerlink&quot; title=&quot;核心原理篇&quot;&gt;&lt;/a&gt;核心原理篇&lt;/h2&gt;&lt;h3 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综
      
    
    </summary>
    
    
      <category term="linux内核" scheme="http://yoursite.com/categories/linux%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql面试</title>
    <link href="http://yoursite.com/2020/03/03/mysql_interview/"/>
    <id>http://yoursite.com/2020/03/03/mysql_interview/</id>
    <published>2020-03-03T12:17:16.000Z</published>
    <updated>2020-11-15T07:38:09.605Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="MySQL-执行一条查询语句的内部执行过程"><a href="#MySQL-执行一条查询语句的内部执行过程" class="headerlink" title="MySQL 执行一条查询语句的内部执行过程"></a>MySQL 执行一条查询语句的内部执行过程</h3><ul><li>答案：<br>链接器=》分析器=》优化器=》执行器=》存储引擎    <ol><li>客户端先通过连接器连接到 MySQL 服务器   </li><li>连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器     </li><li>分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器  </li><li>优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好  </li><li>优化器执行完就进入执行器，执行器就开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回   </li></ol></li></ul><ul><li>详解：<br>查询、更新等语句都会走下面这个图(mysql逻辑架构图)<br><img src="https://i.loli.net/2020/11/15/Pl9BhwNpSVEWzAk.png" alt="p1"><br>大体上MySQL=Server层+存储引擎层<br>Server层实现的功能：内置函数(日期、时间、数学、加密函数)和跨存储引擎功能(存储过程、触发器、视图)<br>存储引擎层功能：数据存储和提取，架构模式为插件式，最常用的存储引擎InnoDB(5.5.5后默认引擎)、MyISAM、Memory<br>连接器：<br>负责与客户端建立连接，获取权限，维持和管理连接<br>建立连接<br>mysql  -h$ip  -P$port  -u$user -p<br>获取权限<br>如果用户密码不对， 则报错”Access denied for user”， 然后退出<br>如果用户密码认证通过，连接器会到权限表里查出你拥有的权限 (即使管理员修改了你的权限也只能下次重新连接是生效)<br>管理连接<br>查询连接状态<br>show processlist<br>其中Command 为Sleep的表示空闲连接， 如果空闲时间超过wait_timeout则自动断开<br>查询缓存：<br>以key-value的形式存在内存中，key是查询命令，value是结果<br>缓存利大于弊，查询缓存失效非常频繁，只要对一个表更新，这个表上所有查询缓存都会被清空 , 更新频繁的数据库不适应缓存<br>使用场景：  业务是一张静态表，长时间不更新，例如配置信息<br>设置sql语句默认不查询<br>set session query_cache_type=DEMAND  #当前会话<br>Mysql8.0后没有查询缓存功能<br>分析器<br>优化器：<br>表里有多个索引是，决定用哪个索引，或一个语句有多表关联(join)时，决定各个表连接顺序<br>执行器：<br>先判断有没有查询权限，没有则返回错误 ， 如果有则使用引擎提供的接口      </li></ul><p>二、 MySQL执行一条更新语句内部的执行过程    </p><ul><li>答案:<br>与查询语句的流程一样：链接器=》分析器=》优化器=》执行器=》存储引擎<br>执行器和存储引擎(innodb)的细节不同：   </li></ul><ol><li>执行器先找引擎取指定主键的数据（B-,b+树）, 如果数据在内存上直接返回给执行器，否则从磁盘读入内存在返回   </li><li>执行器根据更新语句对数据进行操作后调用引擎接口写入  </li><li>引擎将这行数据更新到内存，并将更新操作记录到redo log, 此时redo log处于prepare状态，通知执行器可以提交事务。  </li><li>执行器生成这个操作的binlog, 并将binlog写入磁盘</li><li>执行器调用引擎提交事务接口，引擎讲redo log改为commit状态，更新完成      </li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="主键索引和非主键索引有什么区别（innodb引擎下）"><a href="#主键索引和非主键索引有什么区别（innodb引擎下）" class="headerlink" title="主键索引和非主键索引有什么区别（innodb引擎下）"></a>主键索引和非主键索引有什么区别（innodb引擎下）</h3><ol><li>主键索引叶子节点中存储整行数据, 非主键索引存的是主键</li><li>非主键索引可能存在回表查询， 因此IO操作可能多于主键索引, 索引应该避免回表查询   </li><li>创建方式上，如果表中有主键，会自动生成主键索引。表中无主键，将唯一索引+not null 作为主键<br>如果没有， mysql自动创建rowid, 隐式列。 非主键索引要主动创建</li><li>非主键索引会占用额外的磁盘空间，会降低更新效率   </li></ol><h3 id="为什么建议使用主键自增索引"><a href="#为什么建议使用主键自增索引" class="headerlink" title="为什么建议使用主键自增索引"></a>为什么建议使用主键自增索引</h3><p>表的存储结构， 表空间有段(索引=索引段+数据段)组成， 区=1M=64页， 1页=16k<br>不使用自增索引插入数据时B+树的结构可能也会跟着调整， 可能产生磁盘碎片降低磁盘利用率</p><h3 id="为什么索引使用整型而不是字符串"><a href="#为什么索引使用整型而不是字符串" class="headerlink" title="为什么索引使用整型而不是字符串"></a>为什么索引使用整型而不是字符串</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;MySQL-执行一条查询语句的内部执行过程&quot;&gt;&lt;a href=&quot;#MySQL-执行一条查询语句
      
    
    </summary>
    
    
      <category term="中间件" scheme="http://yoursite.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础</title>
    <link href="http://yoursite.com/2020/02/26/mysql%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/26/mysql%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-25T23:27:19.000Z</published>
    <updated>2020-11-15T02:49:03.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>数值   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">类型      所占字节       说明</span><br><span class="line">tinyint    1            小整数值，如状态</span><br><span class="line">smallint   2            大整数值</span><br><span class="line">mediumint  3            大整数值</span><br><span class="line">int        4            大整数值</span><br><span class="line">bigint     8            极大整数值</span><br><span class="line">float      4            单精度浮点数值</span><br><span class="line">double     8            双精度浮点数值</span><br><span class="line">decimal    Max(D+, M+)  含小数值，例如金额</span><br></pre></td></tr></table></figure></li><li><p>日期    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">类型        所占字节数          说明</span><br><span class="line">date        3                  YYYY-MM-DD</span><br><span class="line">time        3                  HH:MM:SS</span><br><span class="line">year        1                  YYYY</span><br><span class="line">datetime    8                  YYYY-MM-DD HH:MM:SS</span><br><span class="line">timestamp   8                  YYYYMMDDHHMMSS</span><br></pre></td></tr></table></figure></li><li><p>字符串  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类型       所占字节数     说明</span><br><span class="line">char       0~255         定长字段串</span><br><span class="line">varchar    0~65535       变长字符串</span><br><span class="line">text       0~65535       长文本数据</span><br><span class="line">blob                     二进制形式的文本数据</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><ul><li><p>实体完整性<br>求每张表都有唯一标识符，每张表中的主键字段不能为空且不能重复<br>约束方法：唯一性约束、主键约束、标识列  </p></li><li><p>域完整性<br>表中某些列不能输入无效的值, 如数据类型、格式、值域范围、是否允许空值等<br>约束方法：限制数据类型、检查约束、默认值、非空约束  </p></li><li><p>参照完整性<br>求关系中不允许引用不存在的实体<br>约束方法：外键约束  </p></li><li><p>用户自定义完整性<br>针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求<br>约束方法：规则、存储过程、触发器   </p></li></ul><p>唯一性约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以使用关键字 UNIQUE 实现字段的唯一性约束，从而保证实体的完整性  </span></span><br><span class="line"><span class="comment">#UNIQUE 意味着任何两条数据的同一个字段不能有相同值。</span></span><br><span class="line"><span class="comment">#一个表中可以有多个 UNIQUE 约束。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在创建表时添加唯一性约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'主键id'</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">id_number <span class="built_in">varchar</span>(<span class="number">18</span>) <span class="keyword">unique</span> <span class="keyword">comment</span> <span class="string">'身份证号'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>外键约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外键（FOREIGN KEY）约束定义了表之间的一致性关系，用于强制参照完整性</span></span><br><span class="line"><span class="comment">-- 外键约束定义了对同一个表或其他表的列的引用，这些列具有PRIMARY KEY或UNIQUE约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表(主表)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">stu_no <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'学号'</span>,</span><br><span class="line">stu_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">comment</span> <span class="string">'姓名'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--成绩表</span></span><br><span class="line"><span class="comment">--在插入数据时，必须先向主表插入，再向从表插入, 删除数据时正好相反</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sc(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'主键id'</span>,</span><br><span class="line">stu_no <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学号'</span>,</span><br><span class="line">course <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">comment</span> <span class="string">'课程'</span>,</span><br><span class="line">grade <span class="built_in">int</span> <span class="keyword">comment</span> <span class="string">'成绩'</span>,</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(stu_no) <span class="keyword">references</span> stu(stu_no)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数　"></a>函数　</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--数学函数    </span></span><br><span class="line">ABS SQRT MOD SIN COS TAN COT</span><br><span class="line"><span class="comment">--字符串函数 </span></span><br><span class="line">LENGTH LOWER UPPER TRIM SUBSTRING</span><br><span class="line"><span class="comment">-- 日期和时间函数 </span></span><br><span class="line">NOW CURDATE CURTIME SYSDATE DATE_FORMAT YEAR MONTH WEEK</span><br><span class="line"><span class="comment">--聚合函数 </span></span><br><span class="line">COUNT SUM AVG MIN MAX</span><br><span class="line"><span class="comment">--条件判断函数 </span></span><br><span class="line">IF IFNULL CASE WHEN</span><br><span class="line"><span class="comment">--系统信息函数 </span></span><br><span class="line">VERSION DATABASE USER</span><br><span class="line"><span class="comment">-- 加密函数 </span></span><br><span class="line">MD5 SHA1 SHA2</span><br></pre></td></tr></table></figure><ul><li>now<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 返回当期时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">--在实际应用中，大多数业务表都会带一个创建时间create_time字段，用于记录每一条数据的产生时间。在向表</span></span><br><span class="line"><span class="comment">--中插入数据时，就可以在insert语句中使用now()函数</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">id</span>, <span class="keyword">name</span>, create_time) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="keyword">now</span>());</span><br></pre></td></tr></table></figure></li><li>date_format<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--在实际应用中，一般会按照标准格式存储日期/时间，如 2019-12-13 14:15:16 。在查询使用数据时，往往又</span></span><br><span class="line"><span class="comment">--会有不同的格式要求，这时就需要使用date_format()函数进行格式 转换</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, <span class="keyword">date_format</span>(birthday, <span class="string">'%Y/%m/%d'</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>聚合函数　<br>聚合函数是对一组值进行计算，并返回单个值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count 返回符合条件的记录总数</span><br><span class="line">sum 返回指定列的总和，忽略空值</span><br><span class="line">avg 返回指定列的平均值，忽略空值</span><br><span class="line">min 返回指定列的最小值，忽略空值</span><br><span class="line">max 返回指定列的最大值，忽略空值</span><br></pre></td></tr></table></figure></li><li><p>ifnull<br>函数ifnull()用于处理NULL值。<br>ifnull(v1,v2)，如果 v1 的值不为 NULL，则返回 v1，否则返回 v2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>(<span class="number">1</span>/<span class="number">0</span>, <span class="number">0</span>); <span class="comment">--0</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="comment">--1</span></span><br></pre></td></tr></table></figure></li><li>case when<br>流程控制语句，可以在SQL语句中使用case when来获取更加准确和直接的结果<br>SQL中的case when类似于编程语言中的if else或者switch<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line">CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] <span class="keyword">END</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> [expr] <span class="keyword">THEN</span> [result1]…<span class="keyword">ELSE</span> [<span class="keyword">default</span>] <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- as 取别名　</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'男'</span>　<span class="keyword">then</span> <span class="string">'F'</span> <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="string">'M'</span> <span class="keyword">else</span> <span class="string">''</span> <span class="keyword">end</span> <span class="keyword">as</span> sex</span><br></pre></td></tr></table></figure></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志　　"></a>慢查询日志　　</h3><h4 id="mysql的日志类型"><a href="#mysql的日志类型" class="headerlink" title="mysql的日志类型　"></a>mysql的日志类型　</h4><div class="table-container"><table><thead><tr><th>日志</th><th>描述</th></tr></thead><tbody><tr><td>重做日志（redo log）</td><td>重做日志是一种物理格式的日志，记录的是物理数据页面的修改的信息，其redo log是顺序 写入redo log file的物理文件中去的。</td></tr><tr><td>回滚日志（undo log）</td><td>回滚日志是一种逻辑格式的日志，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务 之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。</td></tr><tr><td>二进制日志（binlog）</td><td>二进制日志是一种逻辑格式的日志，以二进制文件的形式记录了数据库中的操作，但不记录 查询语句。</td></tr><tr><td>错误日志（errorlog）</td><td>错误日志记录着mysqld启动和停止，以及服务器在运行过程中发生的错误的相关信息。</td></tr><tr><td>慢查询日志（slow query log）</td><td>慢查询日志记录执行时间过长和没有使用索引的查询语句</td></tr><tr><td>一般查询日志（general log）</td><td>记录了服务器接收到的每一个查询或是命令，无论这些查询或是命令是否正确甚至是否包含 语法错误，general log都会将其记录下来</td></tr><tr><td>中继日志（relay log）</td><td>中继日志类似二进制；可用于复制架构中，使从服务器和主服务器的数据保持一致</td></tr></tbody></table></div><h4 id="慢查询日志属性"><a href="#慢查询日志属性" class="headerlink" title="慢查询日志属性　　"></a>慢查询日志属性　　</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>slow_query_log</td><td>是否开启慢查询日志，1表示开启，0表示关闭。</td></tr><tr><td>slow_query_log_file</td><td>慢查询日志存储路径，可选。 注意：MySQL 5.6之前的版本，参数名为 log-slow-queries</td></tr><tr><td>long_query_time</td><td>阈值，当SQL语句的响应时间超过该阈值就会被记录到日志中。</td></tr><tr><td>log_queries_not_using_indexes</td><td>未使用索引的查询也被记录到慢查询日志中，可选。</td></tr><tr><td>log_output</td><td>日志存储方式，默认为FILE。 log_output=‘FILE’表示将日志存入文件 log_output=‘TABLE’表示将日志存入数据库 log_output=‘FILE,TABLE’表示同时将日志存入文件和数据库</td></tr></tbody></table></div><h4 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志　"></a>开启慢查询日志　</h4><p>慢查询日志可以通过命令临时设置，也可以修改配置文件永久设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查看是否开启慢查询日志</span><br><span class="line">show variables like &#39;slow%&#39;;</span><br><span class="line">#临时开启慢查询日志</span><br><span class="line">set slow_query_log&#x3D;&#39;ON&#39;;</span><br><span class="line">set long_query_time&#x3D;1;</span><br><span class="line">#慢查询日志文件所在位置</span><br><span class="line">show variables like &#39;%datadir%&#39;;</span><br></pre></td></tr></table></figure></p><h3 id="查询分析器"><a href="#查询分析器" class="headerlink" title="查询分析器"></a>查询分析器</h3><p>explain命令可以查看SQL语句的执行计划。当explain与SQL语句一起使用时，MySQL将显示来自<br>优化器的有关语句执行计划的信息。也就是说，MySQL解释了它将如何处理语句，包括有关如何联<br>接表以及以何种顺序联接表的信息</p><h4 id="explain功能"><a href="#explain功能" class="headerlink" title="explain功能　"></a>explain功能　</h4><p>分析出表的读取顺序<br>数据读取操作的操作类型<br>哪些索引可以使用<br>哪些索引被实际使用<br>表之间的引用<br>每张表有多少行被优化器查询</p><h4 id="explain-使用"><a href="#explain-使用" class="headerlink" title="explain 使用　"></a>explain 使用　</h4><p><img src="https://i.loli.net/2020/08/20/QBWxtJcN8Lq2iDg.png"/>   </p><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析　"></a>结果分析　</h4><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>执行select子句或操作表的顺序</td></tr><tr><td>select_type</td><td>查询的类型，如SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION等</td></tr><tr><td>table</td><td>当前行使用的表名</td></tr><tr><td>partitions</td><td>匹配的分区</td></tr><tr><td>type</td><td>连接类型，如system、const、eq_ref、ref、range、index、all等</td></tr><tr><td>possible_keys</td><td>可能使用的索引</td></tr><tr><td>key</td><td>实际使用的索引，NULL表示未使用索引</td></tr><tr><td>key_len</td><td>查询中使用的索引长度</td></tr><tr><td>ref</td><td>列与索引的比较</td></tr><tr><td>rows</td><td>扫描的行数</td></tr><tr><td>filtered</td><td>选取的行数占扫描的行数的百分比，理想的结果是100</td></tr><tr><td>extra</td><td>其他额外信息</td></tr></tbody></table></div><h3 id="索引种类"><a href="#索引种类" class="headerlink" title="索引种类"></a>索引种类</h3><div class="table-container"><table><thead><tr><th>索引种类</th><th>描述</th></tr></thead><tbody><tr><td>普通索引</td><td>最基本的索引，没有任何限制，仅加速查询</td></tr><tr><td>唯一索引</td><td>索引列的值必须唯一，但允许有空值</td></tr><tr><td>主键索引</td><td>一种特殊的唯一索引，不允许有空值 一般是在建表的同时自动创建主键索引</td></tr><tr><td>复合索引</td><td>两个或多个列上的索引被称作复合索引</td></tr><tr><td>全文索引</td><td>对文本内容进行分词索引       </td></tr></tbody></table></div><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><ul><li>创建普通索引<br>CREATE INDEX indexName ON tableName(columnName(length))<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> name_idx <span class="keyword">on</span> base(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure>CREATE UNIQUE INDEX indexName ON tableName(columnName(length))   </li><li><p>创建唯一索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> name_idx <span class="keyword">on</span> base(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建复合索引<br>CREATE INDEX indexName ON tableName(columnName1, columnName2, …)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> muti_idx <span class="keyword">on</span> base(<span class="keyword">name</span>, sex, age);</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>DROP INDEX [indexName] ON tableName;  </p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>SHOW INDEX FROM tableName;  </p><ul><li>使用索引分析器 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> base <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'cp'</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><ul><li>前导列特性（最左前缀）<br>在MySQL中，如果创建了复合索引(name, salary, dept)，就相当于创建了(name, salary, dept)、<br>(name, salary)和(name)三个索引，这被称为复合索引前导列特性， 因此在创建复合索引时应该将<br>最常用作查询条件的列放在最左边，依次递减</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">未使用索引</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> salary=<span class="number">8800</span>;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> dept=<span class="string">'部门A'</span>;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> salary=<span class="number">8800</span> <span class="keyword">and</span> dept=<span class="string">'部门A'</span>;</span><br><span class="line"></span><br><span class="line">    使用索引</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'liufeng'</span>;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'liufeng'</span> <span class="keyword">and</span> salary=<span class="number">8800</span>;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'liufeng'</span> <span class="keyword">and</span> salary=<span class="number">8800</span> <span class="keyword">and</span> dept=<span class="string">'部门A'</span>;</span><br></pre></td></tr></table></figure><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><ul><li><p>什么是覆盖索引<br>即select的数据列只从索引中就能得到，不必读取数据行，也就是只需扫描索引就可以得到查询结果  </p></li><li><p>几点说明  </p></li></ul><ol><li>使用覆盖索引，只需要从索引中就能检索到需要的数据，而不要再扫描数据表；  </li><li>索引的体量往往要比数据表小很多，因此只读取索引速度会非常快，也会极大减少数据访问量；  </li><li>MySQL的查询优化器会在执行查询前判断，是否有一个索引可以覆盖所有的查询列；  </li><li>并非所有类型的索引都可以作为覆盖索引，覆盖索引必须要存储索引列的值。像哈希索引、空间索引、全<br>文索引等并不会真正存储索引列的值  </li><li>当一个查询使用了覆盖索引， 在查询分析器EXPLAIN的Extra列可以看到“Using index”       </li></ol><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ul><li>选择区分度高的列建立索引<br>区分度计算公式：count(distinct col)/count(*)，表示字段不重复的比例   </li><li>避免对索引列进行计算<br>from_unixtime(create_time)=’2014-05-29’ 不会用到索引   </li><li>每次查询每张表仅能使用一个索引  </li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>MyISAM 不支持， InnoDB</li><li><p>什么是事务<br>用来处理批量的mysql操作， 为了保证数据库的完整性，这些操作要么完全执行，要么完全不执行</p></li><li><p>几个术语<br>回退(rollback) 撤销SQL语句的过程<br>提交(commit) 未存储的SQL语句写入数据库表<br>保留点(savepoint) 事务处理中设置临时占位符(place-holder).可以发布回退 </p></li><li><p>可以执行回退的语句<br>INSERT UPDATE和DELETE</p></li><li><p>事务的4个特性(ACID)<br>原子性: 批量的sql, 要么都发生， 要么都不发生<br>一致性：事务前后的数据保持业务上的合理一致<br>持久性：事务一旦发生不能取消，只能通过补偿性事务来抵消效果<br>隔离性：在事务进行中，其他操作开不到此事务的任何效果   </p></li><li><p>操作命令<br>开启事务：start transaction<br>执行命令： xxx<br>提交事务/回滚事务 commit/rollback<br>设置隔离级别：set session transaction isolation level [read uncommitted |  read committed | repeatable read |serializable] </p></li><li><p>示例  </p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//创建表</span><br><span class="line">mysql&gt; create table account(</span><br><span class="line">    -&gt; uname char(10),</span><br><span class="line">    -&gt; money int)</span><br><span class="line">    -&gt; engine innodb charset utf8;</span><br><span class="line">//插入数据</span><br><span class="line">mysql&gt; insert into account values</span><br><span class="line">    -&gt; ('zhang', 5000),</span><br><span class="line">    -&gt; ('lisi', 3000);</span><br><span class="line"></span><br><span class="line">//开启事务</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span></span><br><span class="line"></span><br><span class="line">//更新数据</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = money + <span class="number">100000</span>  <span class="keyword">where</span> uname=<span class="string">'lisi'</span>;</span><br><span class="line"></span><br><span class="line">//查询</span><br><span class="line">mysql&gt; select * from account;</span><br><span class="line">+<span class="comment">-------+-------+</span></span><br><span class="line">| uname | money |</span><br><span class="line">+<span class="comment">-------+-------+</span></span><br><span class="line">| zhang |  5000 |</span><br><span class="line">| lisi  |  3000 |</span><br><span class="line"></span><br><span class="line">//设置隔离级别</span><br><span class="line">mysql&gt; set session transaction  isolation level read uncommitted</span><br><span class="line"></span><br><span class="line">//提交事务</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure><ul><li><p>隔离级别<br>read uncommit : “脏读”, 读到未提交事务的内容<br>read commited : 一个事务在进行的过程中， 读不到另外一个进行中事务的内容，但是能读到已经完成事务中的内容<br>repeatable read: 可重复读,即在一个事务过程中,所有信息都来自事务开始那一瞬间的信息,不受其他已提交事务的影响. (大多数的系统,用此隔离级别)<br>serializable: 串行化, 所有的事务,必须编号,按顺序一个一个来执行,也就取消了冲突的可能.这样隔离级别最高,但事务相互等待的等待长. 在实用,也不是很多 </p></li><li><p>c++中使用事务</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参考brks</span></span><br><span class="line"><span class="keyword">bool</span> MysqlConnection::transaction(<span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; sql)&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//手动提交</span></span><br><span class="line">mysql_autocommit(mysql_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始事务</span></span><br><span class="line">mysql_query(mysql_, <span class="string">"start transaction"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> iter = sql.begin(), iter != sql.end(); iter++)&#123;</span><br><span class="line">ret = mysql_qurey(mysql_, (*iter).c_ctr());</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//回滚</span></span><br><span class="line">mysqL_query(mysql_, <span class="string">"rollback"</span>);</span><br><span class="line">LOG_ERROR(<span class="string">"excute transaction failed."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != mysql_query(mysql, <span class="string">"commit"</span>))&#123;</span><br><span class="line">LOG_ERROR(<span class="string">"commit transaction failed."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>一组为了完成特定功能的SQL语句集， 经编译后存储在数据库中， 用户通过存储过过程名并传参来调用它</p><ul><li><p>优点<br>增强的sql语音的功能和灵活性<br>存储过程允许标准组件式编程<br>较快的执行速度(存储过程是预编译的)<br>减少网络流量<br>可被作物一种安全机制充分利用   </p></li><li><p>创建步骤<br>选择一个数据库<br>改变分割符：delimiter $$(避免使用;作为结束标记)  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">mysql&gt; delimiter $$</span><br><span class="line"></span><br><span class="line">mysql&gt; create procedure p_hello()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select 'hello';</span><br><span class="line">    -&gt; select 'world';</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; $$;</span><br><span class="line"></span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">mysql&gt; call p_hello;</span><br></pre></td></tr></table></figure></li><li><p>存储过程中的参数<br>in: 输入参数<br>必须在调用存储过程之前指定<br>out: 输出参数<br>可以在存储过程内部改变并返回<br>inout:输入输出参数<br>可以在调用时指定， 并可修改和返回<br>in 在存储过程中修值是传入值得一份拷贝，传入的值不会改变</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create procedure v_test1(in p_int int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select p_int;</span><br><span class="line">    -&gt; set p_int = p_int +1;</span><br><span class="line">    -&gt; select p_int;</span><br><span class="line">    -&gt; end;</span><br><span class="line">    -&gt; $$;</span><br><span class="line"></span><br><span class="line">mysql&gt; delimiter </span><br><span class="line">mysql&gt; set @p_int =3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//存储过程里的值被修改</span><br><span class="line">mysql&gt; call v_test1(@p_int);</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| p_int |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     3 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| p_int |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     <span class="number">4</span> |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line">//外面的值没变</span><br><span class="line">mysql&gt; <span class="keyword">select</span> @p_int;</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| @p_int |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">|      3 |</span><br><span class="line">+<span class="comment">--------+</span></span><br></pre></td></tr></table></figure><p>out 不认可传入的值，修改后值会变</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create procedure p_test_out(out v_out_int int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select v_out_int;</span><br><span class="line">    -&gt; set v_out_int=15;</span><br><span class="line">    -&gt; select v_out_int;</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; $$;</span><br><span class="line"></span><br><span class="line">mysql&gt; set @v_out_int=10;</span><br><span class="line">    -&gt; $$;</span><br><span class="line">mysql&gt; call p_test_out(@v_out_int);</span><br><span class="line">    -&gt; $$;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| v_out_int |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|      NULL |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| v_out_int |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|        <span class="number">15</span> |</span><br><span class="line">+<span class="comment">-----------+</span></span><br></pre></td></tr></table></figure><p>inout 类似于引用，认可传入的值， 修改后会改变</p></li></ul><p>在存储过程里面定义变量<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create procedure p_vartest()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare a varchar(20) default 'abc';</span><br><span class="line">    -&gt; select a;</span><br><span class="line">    -&gt; end;</span><br><span class="line">    -&gt; $$;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p_vartest;</span><br><span class="line">    -&gt; $$;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| a    |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| abc  |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><ul><li>c++中使用存储过程  </li><li>创建存储过程  </li><li>初始化mysql: mysql_init   </li><li>链接mysql: mysql_real_connect   </li><li>调用存储过程: mysql_real_qurey, 第二个参数，”call xxx(xxx)”</li><li>释放资源与连接：mysql_free_result， mysql_close   </li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>由查询结果形成的一张虚拟表， 如果某个查询结果出现的非常频繁， 要经常拿这个查询结果来做子查询<br>视图本身不包含数据， 它返回的数据是从其他表中检索出来的</p><ul><li>作用   </li></ul><ol><li>权限控制：如某几个列允许用户查询，其他的列不允许， 可以通过视图开放其中一列或几列           </li><li>简化复杂的查询</li></ol><ul><li><p>视图能否更新，删除，添加<br>如果视图的每一行是和物理表一一对应的才可以<br>如果view的行是由物理表多行经过计算的到的结果，view不可以更新  </p></li><li><p>视图放在哪儿（视图算法） </p></li></ul><ol><li>对于简单的查询形成的view, 再对view查询时，如where, order等， 可以把建视图的语句+查询视图的语句合并成=》查物理的语句，这种视图算法叫merge(合并)   </li><li>视图的语句本身比较复杂，很难再和查询视图的语句合并，mysql先执行视图的创建语句，把结果集形成内存中的临时表，然后再去查临时表(temptable)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数值   &lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="中间件" scheme="http://yoursite.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
</feed>
