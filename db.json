{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/a0bcedee-f079-4dd0-9643-99de53b48236.png","path":"images/a0bcedee-f079-4dd0-9643-99de53b48236.png","modified":1,"renderable":0},{"_id":"source/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png","path":"images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png","modified":1,"renderable":0},{"_id":"source/images/fc77df7e-b967-4408-934b-ba46535033e2.png","path":"images/fc77df7e-b967-4408-934b-ba46535033e2.png","modified":1,"renderable":0},{"_id":"source/images/go_20200408_1.png","path":"images/go_20200408_1.png","modified":1,"renderable":0},{"_id":"source/images/go_20200408_2.png","path":"images/go_20200408_2.png","modified":1,"renderable":0},{"_id":"source/images/go_20200408_4.png","path":"images/go_20200408_4.png","modified":1,"renderable":0},{"_id":"source/images/go_20200408_5.png","path":"images/go_20200408_5.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080402.png","path":"images/interview_2020080402.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080501.png","path":"images/interview_2020080501.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080502.png","path":"images/interview_2020080502.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080505.png","path":"images/interview_2020080505.png","modified":1,"renderable":0},{"_id":"source/images/mysql_20200704_1.png","path":"images/mysql_20200704_1.png","modified":1,"renderable":0},{"_id":"source/images/p1_20200224112830.png","path":"images/p1_20200224112830.png","modified":1,"renderable":0},{"_id":"source/images/project_seckill_2020073002.png","path":"images/project_seckill_2020073002.png","modified":1,"renderable":0},{"_id":"source/images/project_seckill_2020073101.png","path":"images/project_seckill_2020073101.png","modified":1,"renderable":0},{"_id":"source/images/project_seckill_2020080203.png","path":"images/project_seckill_2020080203.png","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/next/source/README.md","path":"README.md","modified":1,"renderable":1},{"_id":"themes/next/source/google41eca6f1588fb155.html","path":"google41eca6f1588fb155.html","modified":1,"renderable":1},{"_id":"themes/next/source/robots.txt","path":"robots.txt","modified":1,"renderable":1},{"_id":"source/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png","path":"images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png","modified":1,"renderable":0},{"_id":"source/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png","path":"images/66dc1980-6148-4883-aa5b-695b3a9e0817.png","modified":1,"renderable":0},{"_id":"source/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png","path":"images/70009bcf-eeea-4c5d-a784-fa561271b33e.png","modified":1,"renderable":0},{"_id":"source/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png","path":"images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png","modified":1,"renderable":0},{"_id":"source/images/go_20200408_3.png","path":"images/go_20200408_3.png","modified":1,"renderable":0},{"_id":"source/images/go_20200706_p1.png","path":"images/go_20200706_p1.png","modified":1,"renderable":0},{"_id":"source/images/go_20200706_p2.png","path":"images/go_20200706_p2.png","modified":1,"renderable":0},{"_id":"source/images/go_20200723_p1.jpg","path":"images/go_20200723_p1.jpg","modified":1,"renderable":0},{"_id":"source/images/interview_2020080401.png","path":"images/interview_2020080401.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080403.png","path":"images/interview_2020080403.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080404.png","path":"images/interview_2020080404.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080405.png","path":"images/interview_2020080405.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080406.png","path":"images/interview_2020080406.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080407.png","path":"images/interview_2020080407.png","modified":1,"renderable":0},{"_id":"source/images/interview_2020080503.png","path":"images/interview_2020080503.png","modified":1,"renderable":0},{"_id":"source/images/linuxkernel_20200307_1.jpeg","path":"images/linuxkernel_20200307_1.jpeg","modified":1,"renderable":0},{"_id":"source/images/linuxkernel_20200308_2.jpeg","path":"images/linuxkernel_20200308_2.jpeg","modified":1,"renderable":0},{"_id":"source/images/project_seckill_2020080201.png","path":"images/project_seckill_2020080201.png","modified":1,"renderable":0},{"_id":"source/images/project_seckill_2020080202.png","path":"images/project_seckill_2020080202.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/4-1.png","path":"images/4-1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4-2.png","path":"images/4-2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4-3.png","path":"images/4-3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4-4.png","path":"images/4-4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-1.png","path":"images/5-1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-10.png","path":"images/5-10.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-2.png","path":"images/5-2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-3.png","path":"images/5-3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-5.png","path":"images/5-5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-7.png","path":"images/5-7.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-8.png","path":"images/5-8.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/adb.png","path":"images/adb.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apktool.png","path":"images/apktool.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg_body.png","path":"images/bg_body.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/build-process.png","path":"images/build-process.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag.png","path":"images/dag.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag1.png","path":"images/dag1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag11.png","path":"images/dag11.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag12.png","path":"images/dag12.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag13.png","path":"images/dag13.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag14.png","path":"images/dag14.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag15.png","path":"images/dag15.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag16.png","path":"images/dag16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag17.png","path":"images/dag17.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag18.png","path":"images/dag18.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag19.png","path":"images/dag19.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag2.png","path":"images/dag2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag20.png","path":"images/dag20.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag21.png","path":"images/dag21.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag22.png","path":"images/dag22.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag23.png","path":"images/dag23.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag26.png","path":"images/dag26.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag3.png","path":"images/dag3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag4.png","path":"images/dag4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag48.png","path":"images/dag48.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag49.png","path":"images/dag49.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag5.png","path":"images/dag5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag50.png","path":"images/dag50.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag6.png","path":"images/dag6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag7.png","path":"images/dag7.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag8.png","path":"images/dag8.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag9.png","path":"images/dag9.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dnspod.png","path":"images/dnspod.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dora-top-small.png","path":"images/dora-top-small.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/gradle-tasks.png","path":"images/gradle-tasks.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hibernate1.png","path":"images/hibernate1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hibernate2.png","path":"images/hibernate2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hibernate3.png","path":"images/hibernate3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/highlight.png","path":"images/highlight.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/ico_facebook.png","path":"images/ico_facebook.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/ico_github.png","path":"images/ico_github.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/ico_google.png","path":"images/ico_google.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/ico_twitter.png","path":"images/ico_twitter.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/jit.png","path":"images/jit.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/latex1.png","path":"images/latex1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/latex2.png","path":"images/latex2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.jpeg","path":"images/logo.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/selector1.png","path":"images/selector1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/selector2.png","path":"images/selector2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/selector3.png","path":"images/selector3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zsh1.png","path":"images/zsh1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zsh2.png","path":"images/zsh2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zsh3.png","path":"images/zsh3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zsh4.png","path":"images/zsh4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zsh5.png","path":"images/zsh5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zsh6.png","path":"images/zsh6.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/dynamic_bg.js","path":"js/dynamic_bg.js","modified":1,"renderable":1},{"_id":"source/images/linuxkernel_20200308_4.jpeg","path":"images/linuxkernel_20200308_4.jpeg","modified":1,"renderable":0},{"_id":"source/images/mysql_20200714_p1.png","path":"images/mysql_20200714_p1.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/404.png","path":"images/404.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-4.png","path":"images/5-4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-6.png","path":"images/5-6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/5-9.png","path":"images/5-9.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/dag10.png","path":"images/dag10.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/drawableimport.png","path":"images/drawableimport.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/elasticsearch_github.png","path":"images/elasticsearch_github.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/indexing source.png","path":"images/indexing source.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/jdgui.png","path":"images/jdgui.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/leak.png","path":"images/leak.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/parcelable_generator.png","path":"images/parcelable_generator.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/preview.png","path":"images/preview.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/volley.png","path":"images/volley.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat-reward-img.jpg","path":"images/wechat-reward-img.jpg","modified":1,"renderable":1},{"_id":"source/images/interview_2020080504.png","path":"images/interview_2020080504.png","modified":1,"renderable":0},{"_id":"source/images/project_seckill_2020080401.png","path":"images/project_seckill_2020080401.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/alipay-reward-img.jpg","path":"images/alipay-reward-img.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apktool2.png","path":"images/apktool2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/codota.png","path":"images/codota.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/holocolor.png","path":"images/holocolor.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/background.jpeg","path":"images/images/background.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/category-list.jpg","path":"images/images/category-list.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/chart.png","path":"images/images/chart.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/comparison-sort-decision-tree.jpg","path":"images/images/comparison-sort-decision-tree.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/diy-design-php-mvc-framework-url-users.png","path":"images/images/diy-design-php-mvc-framework-url-users.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/evbuffer.png","path":"images/images/evbuffer.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/external_link.gif","path":"images/images/external_link.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/external_link_on.gif","path":"images/images/external_link_on.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/gitgit.png","path":"images/images/gitgit.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/hot.gif","path":"images/images/hot.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/icon_square.gif","path":"images/images/icon_square.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/icons.gif","path":"images/images/icons.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/invoke_chain.png","path":"images/images/invoke_chain.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/svn.png","path":"images/images/svn.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/apktool1.png","path":"images/apktool1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/111.gif","path":"images/images/111.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/222.gif","path":"images/images/222.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/333.gif","path":"images/images/333.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/btrace.png","path":"images/images/btrace.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/chat-style.png","path":"images/images/chat-style.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/chat.png","path":"images/images/chat.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/git.gif","path":"images/images/git.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/gradle1.png","path":"images/images/gradle1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/nodejs1.png","path":"images/images/nodejs1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/nodejs2.png","path":"images/images/nodejs2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/tmux.jpg","path":"images/images/tmux.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/tmux2.jpg","path":"images/images/tmux2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/wechat.png","path":"images/images/wechat.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/ashenna.png","path":"images/pages/ashenna.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"source/images/linuxkernel_20200306_2.jpeg","path":"images/linuxkernel_20200306_2.jpeg","modified":1,"renderable":0},{"_id":"source/images/linuxkernel_20200308_3.jpeg","path":"images/linuxkernel_20200308_3.jpeg","modified":1,"renderable":0},{"_id":"source/images/linuxkernel_20200306.jpeg","path":"images/linuxkernel_20200306.jpeg","modified":1,"renderable":0},{"_id":"source/images/mysql_p1_20200304092002.png","path":"images/mysql_p1_20200304092002.png","modified":1,"renderable":0},{"_id":"source/images/linuxkernel_20200308_5.jpeg","path":"images/linuxkernel_20200308_5.jpeg","modified":1,"renderable":0},{"_id":"source/images/project_seckill_2020073001.png","path":"images/project_seckill_2020073001.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/images/es/4.png","path":"images/images/es/4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img4.png","path":"images/images/githubpages/2013-01-20-build-github-blog-page-07-img4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/bootcamp_1_ssh.jpg","path":"images/images/githubpages/bootcamp_1_ssh.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/bootcamp_1_token.jpg","path":"images/images/githubpages/bootcamp_1_token.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/bootcamp_1_win_gitbash.jpg","path":"images/images/githubpages/bootcamp_1_win_gitbash.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-02-img0.png","path":"images/images/githubpages/build-github-blog-page-02-img0.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-02-img1.png","path":"images/images/githubpages/build-github-blog-page-02-img1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-03-img0.png","path":"images/images/githubpages/build-github-blog-page-03-img0.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-04-img0.png","path":"images/images/githubpages/build-github-blog-page-04-img0.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-05-img0.png","path":"images/images/githubpages/build-github-blog-page-05-img0.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-05-img1.png","path":"images/images/githubpages/build-github-blog-page-05-img1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img0.png","path":"images/images/githubpages/build-github-blog-page-06-img0.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img1.png","path":"images/images/githubpages/build-github-blog-page-06-img1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img4.png","path":"images/images/githubpages/build-github-blog-page-06-img4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img5.png","path":"images/images/githubpages/build-github-blog-page-06-img5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/disqus-site.jpg","path":"images/images/githubpages/disqus-site.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/github-account-setting.png","path":"images/images/githubpages/github-account-setting.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/image1.png","path":"images/images/githubpages/image1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level1.png","path":"images/images/githubpages/level1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level10.png","path":"images/images/githubpages/level10.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level11.png","path":"images/images/githubpages/level11.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level12.png","path":"images/images/githubpages/level12.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level2.png","path":"images/images/githubpages/level2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level4.png","path":"images/images/githubpages/level4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level5.png","path":"images/images/githubpages/level5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level6.png","path":"images/images/githubpages/level6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level7.png","path":"images/images/githubpages/level7.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level8.png","path":"images/images/githubpages/level8.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level9.png","path":"images/images/githubpages/level9.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/other-pages.png","path":"images/images/githubpages/other-pages.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/sitemap.jpg","path":"images/images/githubpages/sitemap.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/sitemap2.jpg","path":"images/images/githubpages/sitemap2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/skiplist1.jpg","path":"images/images/githubpages/skiplist1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/skiplist2.jpg","path":"images/images/githubpages/skiplist2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/skiplist3.jpg","path":"images/images/githubpages/skiplist3.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/skiplist4.jpg","path":"images/images/githubpages/skiplist4.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/skiplist5.jpg","path":"images/images/githubpages/skiplist5.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/ssh-key-set.png","path":"images/images/githubpages/ssh-key-set.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/user-pages.png","path":"images/images/githubpages/user-pages.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/http/1.jpeg","path":"images/images/http/1.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/http/2.jpeg","path":"images/images/http/2.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/http/3.jpeg","path":"images/images/http/3.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/http/4.jpeg","path":"images/images/http/4.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/java/2.jpeg","path":"images/images/java/2.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/java/3.jpeg","path":"images/images/java/3.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/node-file-server-output.png","path":"images/images/node-file-server-output.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp1.jpeg","path":"images/images/openfire/xmpp1.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp7.jpeg","path":"images/images/openfire/xmpp7.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/rainingchrome/RainingChrome.pem","path":"images/images/rainingchrome/RainingChrome.pem","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/rainingchrome/rain.jpg","path":"images/images/rainingchrome/rain.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/rainingchrome/update.xml","path":"images/images/rainingchrome/update.xml","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/turn/fold.png","path":"images/images/turn/fold.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/log4j/appender.png","path":"images/pages/log4j/appender.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/log4j/logger.png","path":"images/pages/log4j/logger.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/butterknife.gif","path":"images/butterknife.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/classshark.png","path":"images/classshark.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/es/1.png","path":"images/images/es/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/es/2.png","path":"images/images/es/2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img0.jpeg","path":"images/images/githubpages/2013-01-20-build-github-blog-page-07-img0.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img1.png","path":"images/images/githubpages/2013-01-20-build-github-blog-page-07-img1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img2.png","path":"images/images/githubpages/2013-01-20-build-github-blog-page-07-img2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level3.png","path":"images/images/githubpages/level3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/image001.png","path":"images/images/image001.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/java/1.jpeg","path":"images/images/java/1.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp11.jpeg","path":"images/images/openfire/xmpp11.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp2.jpeg","path":"images/images/openfire/xmpp2.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp3.jpeg","path":"images/images/openfire/xmpp3.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp4.jpeg","path":"images/images/openfire/xmpp4.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp5.jpeg","path":"images/images/openfire/xmpp5.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp6.jpeg","path":"images/images/openfire/xmpp6.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp8.jpeg","path":"images/images/openfire/xmpp8.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp9.jpeg","path":"images/images/openfire/xmpp9.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/turn/code.png","path":"images/images/turn/code.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/turn/fold-sw.png","path":"images/images/turn/fold-sw.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/linux/linux06.png","path":"images/pages/linux/linux06.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"source/images/linuxkernel_20200308_1.jpeg","path":"images/linuxkernel_20200308_1.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/daovoice.png","path":"images/images/daovoice.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/es/3.png","path":"images/images/es/3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-01-img0.png","path":"images/images/githubpages/build-github-blog-page-01-img0.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img2.png","path":"images/images/githubpages/build-github-blog-page-06-img2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph1.jpg","path":"images/images/githubpages/graph/graph1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph11.jpg","path":"images/images/githubpages/graph/graph11.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph2.jpg","path":"images/images/githubpages/graph/graph2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph4.jpg","path":"images/images/githubpages/graph/graph4.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph7.jpg","path":"images/images/githubpages/graph/graph7.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/http/0.jpeg","path":"images/images/http/0.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/openfire/xmpp10.jpeg","path":"images/images/openfire/xmpp10.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/linux/linux05.png","path":"images/pages/linux/linux05.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/cardtable.png","path":"images/images/cardtable.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph3.jpg","path":"images/images/githubpages/graph/graph3.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph5.jpg","path":"images/images/githubpages/graph/graph5.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph6.jpg","path":"images/images/githubpages/graph/graph6.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph9.jpg","path":"images/images/githubpages/graph/graph9.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/linux/linux03.png","path":"images/pages/linux/linux03.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/log4j/logger-trace.png","path":"images/pages/log4j/logger-trace.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/log4j/loggers.png","path":"images/pages/log4j/loggers.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/images/gson_format.gif","path":"images/gson_format.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img3.png","path":"images/images/githubpages/2013-01-20-build-github-blog-page-07-img3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph8.jpg","path":"images/images/githubpages/graph/graph8.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/img2txt.jpg","path":"images/images/img2txt.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/node-source.png","path":"images/images/node-source.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/linux/linux04.png","path":"images/pages/linux/linux04.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph10.jpg","path":"images/images/githubpages/graph/graph10.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/skiplist6.jpg","path":"images/images/githubpages/skiplist6.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/linux/linux02.png","path":"images/pages/linux/linux02.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/pages/linux/linux01.png","path":"images/pages/linux/linux01.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/graph/graph12.jpg","path":"images/images/githubpages/graph/graph12.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/images/githubpages/level13.png","path":"images/images/githubpages/level13.png","modified":1,"renderable":1},{"_id":"source/images/linuxkernel_20200306_1.jpeg","path":"images/linuxkernel_20200306_1.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/images/images/rainingchrome/RainingChrome.crx","path":"images/images/rainingchrome/RainingChrome.crx","modified":1,"renderable":1},{"_id":"themes/next/source/images/capture.gif","path":"images/capture.gif","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1578541420000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1578541420000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1578541420000},{"_id":"themes/next/_config.yml","hash":"81c1bd2d1889bc48cdfe066e7784fff9e6d5c66d","modified":1599056399373},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1578541420000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1578541420000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1578541420000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1578541420000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1578541420000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1578541420000},{"_id":"source/_posts/cpp中对象数组初始化问题.md","hash":"7e19a6511e0faf821ac5f2ad796a6d5dc8169cd5","modified":1595729826012},{"_id":"source/_posts/cpp并发.md","hash":"bd0549bf12a914d1bbb8c2f92e6e677a747c38cd","modified":1582557294000},{"_id":"source/_posts/go.md","hash":"9d014d877fca6dcd57f6edbe367a85d839ce4641","modified":1595851177618},{"_id":"source/_posts/interview.md","hash":"4ad6620d96ace8c1f5c17374ce2f4c6e664aace1","modified":1599057250197},{"_id":"source/_posts/leetcode题解.md","hash":"d346d12b2672b05a7978fc7c162e77433f8a85fb","modified":1599056589454},{"_id":"source/_posts/linux内核.md","hash":"96f3a230454942ada9c40f46393146c7e4947c62","modified":1603261681552},{"_id":"source/_posts/linux内核完全注释.md","hash":"5c6328671f2ba1649425c6875634411b495bbf92","modified":1585530296000},{"_id":"source/_posts/linux内核实战.md","hash":"35a85f3c2ff911c354bd752245867b1a1762a07e","modified":1593861207975},{"_id":"source/_posts/linux系统编程.md","hash":"caf070146234d1acd7c9a68cd2e917edaaf3f696","modified":1603261712046},{"_id":"source/_posts/makefile.md","hash":"8b7b0e8dd49904013475ccc59eeb0e8a7870ecd9","modified":1593871260182},{"_id":"source/_posts/muduo笔记.md","hash":"7ef5cb11b3ce84a059f43f3d97641b11e870d85a","modified":1593845587803},{"_id":"source/_posts/mysql.md","hash":"0bb8b72654aee93c88172d30ea9872132dc092bc","modified":1597846629714},{"_id":"source/_posts/mysql_interview.md","hash":"125389e478b1cadef1da78340ca92b6b4f3e561d","modified":1594078021084},{"_id":"source/_posts/mysql基础.md","hash":"dfc3c5ea5ee19624b8e9d56082c909cc820837c5","modified":1598480073123},{"_id":"source/_posts/shell.md","hash":"e9068c41ecfe187af75c459dba742959e4a14a9f","modified":1593869647357},{"_id":"source/_posts/微服务实战.md","hash":"6d6d15d8c5cac61d55471cf65ad89a9c4961dbc0","modified":1605364823619},{"_id":"source/_posts/模板.md","hash":"ccbb48ea9a0c21faa7abe8fa256ef03bbe1a0883","modified":1605350712986},{"_id":"source/_posts/秒杀系统设计.md","hash":"7547ccdc861534b098a48249be1a7c19538eb135","modified":1596974883582},{"_id":"source/_posts/网络编程.md","hash":"bdbfdb8b621c8a7448af8465b51a02cd8d4f8a9b","modified":1598484768675},{"_id":"source/_posts/趣谈linux操作系统笔记.md","hash":"5a9e4fd9720c2c1e2812e2100f2a444d03d48ef1","modified":1584519693000},{"_id":"source/categories/index.md","hash":"02ff36c3be1f71bf2d52142a55e6cadbad6dded8","modified":1578551493000},{"_id":"source/images/a0bcedee-f079-4dd0-9643-99de53b48236.png","hash":"a18534488415eec320c97d11aff88fda67432ff5","modified":1582027885000},{"_id":"source/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png","hash":"1acfb3e189af31a08856c85d645ed0cba2ec8c32","modified":1578578291000},{"_id":"source/images/fc77df7e-b967-4408-934b-ba46535033e2.png","hash":"e71ab39b571c76328829564a732811fb09100a09","modified":1582027216000},{"_id":"source/images/go_20200408_1.png","hash":"928508c48df522adf710ca60f4fd0c242084267e","modified":1587174185000},{"_id":"source/images/go_20200408_2.png","hash":"17cca148627b0a092d13217d674ecfc232647aa0","modified":1587176907000},{"_id":"source/images/go_20200408_4.png","hash":"822e07b9a08b8618f1c1fd13c180cb2fe80c4d28","modified":1587177439000},{"_id":"source/images/go_20200408_5.png","hash":"6de6eb0a550726f8277ad9708902412a0e06757c","modified":1587178332000},{"_id":"source/images/interview_2020080402.png","hash":"3c0b33011cd49210d01b961a29541eb8b74b597f","modified":1596545456912},{"_id":"source/images/interview_2020080501.png","hash":"a5d35fb939274d58bbfdf3fd39970da866872d85","modified":1596625475133},{"_id":"source/images/interview_2020080502.png","hash":"5b08a6a52a7f0bd9a383b7c896589799d5e5efd1","modified":1596625592025},{"_id":"source/images/interview_2020080505.png","hash":"fd232382c151aa13b986c8d4efc2f4750764bb28","modified":1596628362456},{"_id":"source/images/mysql_20200704_1.png","hash":"49a4666d75f12c1d68f6d45aad28d3539d5a1695","modified":1593925364035},{"_id":"source/images/p1_20200224112830.png","hash":"1a9f6e0b2fd8a6a3cbff4520d6e902745ac4112c","modified":1582515080000},{"_id":"source/images/project_seckill_2020073002.png","hash":"158762bb9e354d41e1925600e28c349e70c68d45","modified":1596117153428},{"_id":"source/images/project_seckill_2020073101.png","hash":"878b86587a647d37d2efe8ca9cc7dca6e65f54d6","modified":1596150757876},{"_id":"source/images/project_seckill_2020080203.png","hash":"bc334b193618d0186b3f8cab422ea55be2a5bcdd","modified":1596354671559},{"_id":"source/tags/index.md","hash":"c398fdfe6874f91da5b0f11c4d406e4926816575","modified":1581832252000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1578541420000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1578541420000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1578541420000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1578541420000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1578541420000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1578541420000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1578541420000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1578541420000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1578541420000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1578541420000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f2de5cc050690e7f8ac53fa89600fc3be5ddfc76","modified":1578541420000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1757e76b8cfa9d20652202655a761e8e8f111db8","modified":1578541420000},{"_id":"themes/next/languages/zh-tw.yml","hash":"910316e32c21281584c0d901f4dc09fa6408df9e","modified":1578541420000},{"_id":"themes/next/layout/_layout.swig","hash":"4eae03580e2693b88fac9ec551806892e837eef8","modified":1578548028000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1578541420000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1578541420000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1578541420000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1578541420000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1578541420000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1578541420000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1578541420000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1578541420000},{"_id":"themes/next/source/404.html","hash":"1e702b2a08cc1a843c790f10427d67f73d233467","modified":1578550572000},{"_id":"themes/next/source/CNAME","hash":"ea4cf00545a2bcee80ac7a25138dc87e223bc00a","modified":1578550577000},{"_id":"themes/next/source/README.md","hash":"169254c45fa4ed7ea11c00541ffb17b0cde39625","modified":1578549797000},{"_id":"themes/next/source/google41eca6f1588fb155.html","hash":"e8e00afcc83b7d59921e3c8d12418d035ba992c1","modified":1578541420000},{"_id":"themes/next/source/robots.txt","hash":"36af73bb61d87ee7d4290c8162f0a84390280d73","modified":1578550589000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1578541420000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1578541420000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1578541420000},{"_id":"source/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png","hash":"a74cf145ca07f38757d5c724a248d5a5020cea35","modified":1582027347000},{"_id":"source/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png","hash":"41b0603bf57c9ec0e85f24d19c264a112fa60b14","modified":1582027030000},{"_id":"source/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png","hash":"cb1721b476c9b7f9cd902eb477ee9d67551ce103","modified":1582027607000},{"_id":"source/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png","hash":"7e1357472cf1bd25acf442bccc4fb589518fcf46","modified":1582028027000},{"_id":"source/images/go_20200408_3.png","hash":"f4af70b86bd602d907f1245402cb32ac371a38dc","modified":1587177255000},{"_id":"source/images/go_20200706_p1.png","hash":"ec342bb3c62688c2e508aeb50f05135901dba51a","modified":1594036505000},{"_id":"source/images/go_20200706_p2.png","hash":"4617ffad56768a5ba76af8610762c1c9e40754b3","modified":1594036634000},{"_id":"source/images/go_20200723_p1.jpg","hash":"2a9f483f58228f30097e53d96458b1a7eaf1ec37","modified":1595507620000},{"_id":"source/images/interview_2020080401.png","hash":"a615c5265fb2ef9aa370421331574e9ef50b0c68","modified":1596545231336},{"_id":"source/images/interview_2020080403.png","hash":"bf08921c185246f4247ad2566aee16fefa53907a","modified":1596545495324},{"_id":"source/images/interview_2020080404.png","hash":"5b10e5554425e27b1c60443569e91daba00639a8","modified":1596545521790},{"_id":"source/images/interview_2020080405.png","hash":"50cb4fca9ceb5ad35a88b9bf44b9caacddc12264","modified":1596545543420},{"_id":"source/images/interview_2020080406.png","hash":"a9a6f950696c7e29d14c705286d1538e6438d6de","modified":1596545569601},{"_id":"source/images/interview_2020080407.png","hash":"1e52e4b5cfb1d8e4a066aba74227399af120c93c","modified":1596551576067},{"_id":"source/images/interview_2020080503.png","hash":"7e9f2934447f1eb15d052a4426d2826bf8abac2c","modified":1596625869352},{"_id":"source/images/linuxkernel_20200307_1.jpeg","hash":"1e3573ac8a955f7b8f00d2c118d1edd5f590d28d","modified":1583585147000},{"_id":"source/images/linuxkernel_20200308_2.jpeg","hash":"4d4a6f2cf436bf3da1bd9937eb459d1b63b39ff3","modified":1583651217000},{"_id":"source/images/project_seckill_2020080201.png","hash":"55a4955fee09a834ee3bd7010f29d8b09d4d9510","modified":1596342663363},{"_id":"source/images/project_seckill_2020080202.png","hash":"d8c2b42e00812aceec91c3d640555b41d673c36f","modified":1596354524227},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"source/_posts/cpp/cpp细节.md","hash":"14b43cdf769e62531a7455d58c51aaf2721b87f9","modified":1599893753904},{"_id":"source/_posts/工具/patchelf.md","hash":"078302933b44c7b5f4bfb43f4c3b7cfb43728b65","modified":1585229149000},{"_id":"source/_posts/面试/tcp-ip面试.md","hash":"18a937766acbd249a1a7ca7112abe37dd0f74ae3","modified":1583238168000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578541420000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578541420000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1578541420000},{"_id":"themes/next/layout/_macro/post.swig","hash":"40c333e6532c040be847816e1bb0bea3ed81ce1a","modified":1578546268000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"fc7a6e2aa07cd6f9ee3eeed109f51f9b0864d221","modified":1578541420000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1578541420000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1578541420000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"107560cfeb6ed79b8e4453111ba36f76e8c6063d","modified":1578541420000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"2771a088008b589c2512aa81e8591ef31da63b6a","modified":1578541420000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ed1d144bc7ec402c26ebbfad1b5214a49d3fccf9","modified":1578541420000},{"_id":"themes/next/layout/_partials/head.swig","hash":"219376990f9eb1ada021c16c34fec9e2fcc29761","modified":1578541420000},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1578541420000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1578541420000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1578541420000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1578541420000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1578541420000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1578541420000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1578541420000},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"59fb1164da849b98ef62e1a996a4d935f5aab74d","modified":1578541420000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1578541420000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1578541420000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1578541420000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1578541420000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1578541420000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1578541420000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1578541420000},{"_id":"themes/next/source/images/4-1.png","hash":"23d23dce17f4886d7a8490090c21c5f576f24614","modified":1578541420000},{"_id":"themes/next/source/images/4-2.png","hash":"be5647be06c98d194182ba925af10014a5c87fa7","modified":1578541420000},{"_id":"themes/next/source/images/4-3.png","hash":"bf52d78a9487c96998d1bf7f6ae79b7fa210a663","modified":1578541420000},{"_id":"themes/next/source/images/4-4.png","hash":"85cbdb8afb7dda563c7695b4c401b75e85a78d4d","modified":1578541420000},{"_id":"themes/next/source/images/5-1.png","hash":"9486834da90ca052d978df2ab144256c8e874833","modified":1578541420000},{"_id":"themes/next/source/images/5-10.png","hash":"e6697d8f69d74e040425e62efef2c661bf7a4bfc","modified":1578541420000},{"_id":"themes/next/source/images/5-2.png","hash":"019efa366cf91df67fccf85ae9d4a1e4158cfc05","modified":1578541420000},{"_id":"themes/next/source/images/5-3.png","hash":"a3477e64df1901153a82d75b28972581cc6b875d","modified":1578541420000},{"_id":"themes/next/source/images/5-5.png","hash":"f0071d8bc26162467e47882d3eea7fee4af357ad","modified":1578541420000},{"_id":"themes/next/source/images/5-7.png","hash":"fc7f5a3b3929460cc46a38a098005d9b87690c1e","modified":1578541420000},{"_id":"themes/next/source/images/5-8.png","hash":"f8920e960d7e3db2db52e983a6a1a8e19ab71fd4","modified":1578541420000},{"_id":"themes/next/source/images/adb.png","hash":"509b5dde61a0380d6bb92fde755395859791a608","modified":1578541420000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1578541420000},{"_id":"themes/next/source/images/apktool.png","hash":"852b31da44544903187d7df987b517866d7c5b97","modified":1578541420000},{"_id":"themes/next/source/images/avatar.gif","hash":"70eeea733629f469f92bd8538b592adb59bb4794","modified":1578541420000},{"_id":"themes/next/source/images/bg_body.png","hash":"b612b1c1588545491bc1ebea4ec4caa11c7e3dd1","modified":1578541420000},{"_id":"themes/next/source/images/build-process.png","hash":"e79f753e4b64194ce14b113bcdd95d3637cc48a6","modified":1578541420000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1578541420000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1578541420000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1578541420000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1578541420000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1578541420000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1578541420000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1578541420000},{"_id":"themes/next/source/images/dag.png","hash":"4633d5a5a35ab47b58b42eb6892a08290316d757","modified":1578541420000},{"_id":"themes/next/source/images/dag1.png","hash":"67f18b5418728a738e0dc7fc57b46dca42b3cdd7","modified":1578541420000},{"_id":"themes/next/source/images/dag11.png","hash":"bcbb12c1fae62bad432647d4466c2d24dd594aa0","modified":1578541420000},{"_id":"themes/next/source/images/dag12.png","hash":"daaf185ebafdb6ae99c84ce28f492b22123b483f","modified":1578541420000},{"_id":"themes/next/source/images/dag13.png","hash":"783e76bce958d7bf6c2a4d3addff6bb659994831","modified":1578541420000},{"_id":"themes/next/source/images/dag14.png","hash":"1e1b8dac06bac357e5e864f4f211b79f596010b9","modified":1578541420000},{"_id":"themes/next/source/images/dag15.png","hash":"2560090cc4bbd12b9754af0a1d8082ebfe4b75f7","modified":1578541420000},{"_id":"themes/next/source/images/dag16.png","hash":"fddd271777dad82e8e0e36963645e70721d3f30c","modified":1578541420000},{"_id":"themes/next/source/images/dag17.png","hash":"028e2d761d352b52a2b4048cae9b41f238ab42b1","modified":1578541420000},{"_id":"themes/next/source/images/dag18.png","hash":"856f7e142570b548a967b32a00457daa30320148","modified":1578541420000},{"_id":"themes/next/source/images/dag19.png","hash":"a4085186eda63a0d561cc3cd94652db549839a0b","modified":1578541420000},{"_id":"themes/next/source/images/dag2.png","hash":"e42cf55371d34351433ad01495259a5a2def398a","modified":1578541420000},{"_id":"themes/next/source/images/dag20.png","hash":"5338ac2a6c480d070554785897945b8c375b5f43","modified":1578541420000},{"_id":"themes/next/source/images/dag21.png","hash":"30e2e3408b06e6e16f2f90ce24def40f419e9816","modified":1578541420000},{"_id":"themes/next/source/images/dag22.png","hash":"712a807db70cb06c9d16086e89214f1d84f72fbd","modified":1578541420000},{"_id":"themes/next/source/images/dag23.png","hash":"d7ed7f8afae0f9e8c2cb354a18aed900a7306433","modified":1578541420000},{"_id":"themes/next/source/images/dag26.png","hash":"58cb6d7d5db1bea5b4881c29a3d2edaa18f14b68","modified":1578541420000},{"_id":"themes/next/source/images/dag3.png","hash":"fe472a5966dee8630b729fa1a57bbabb280c5f7e","modified":1578541420000},{"_id":"themes/next/source/images/dag4.png","hash":"01df26a077916fe2aa4975ff17ebacea9d0b5d77","modified":1578541420000},{"_id":"themes/next/source/images/dag48.png","hash":"00ffaf97e864d4a838b164bfcaad24506757dea6","modified":1578541420000},{"_id":"themes/next/source/images/dag49.png","hash":"13c0a4feeb35c7f25c7a1423c699cd0a831024ab","modified":1578541420000},{"_id":"themes/next/source/images/dag5.png","hash":"bb4c32ec31ebaf20d2f9f82c4a11df9bd9e022d5","modified":1578541420000},{"_id":"themes/next/source/images/dag50.png","hash":"f75deaddf62ece7c1a7dc499a50f86ab9e8dba9a","modified":1578541420000},{"_id":"themes/next/source/images/dag6.png","hash":"5655cab25006ddadf7449df5a617f721ee3223d6","modified":1578541420000},{"_id":"themes/next/source/images/dag7.png","hash":"e953c25b437e8614bed303579b9d725136a3f01e","modified":1578541420000},{"_id":"themes/next/source/images/dag8.png","hash":"c3e1f00b122a6cd08743ba89cc5fbf00cb6d72da","modified":1578541420000},{"_id":"themes/next/source/images/dag9.png","hash":"c0a8d0ce18a79646cdaf5520649aad080a19b74a","modified":1578541420000},{"_id":"themes/next/source/images/dnspod.png","hash":"077db1d9c95c699d3ed582732bd8b4462be4967b","modified":1578541420000},{"_id":"themes/next/source/images/dora-top-small.png","hash":"9e27b1ec561d936f60d53a91aa484dba6e666880","modified":1578541420000},{"_id":"themes/next/source/images/gradle-tasks.png","hash":"69452ba416a9cbd892ea5323a4fda2f21a68b40a","modified":1578541420000},{"_id":"themes/next/source/images/hibernate1.png","hash":"201f4ad7eb8db311f6247e0230fbd0bf1689a8e9","modified":1578541420000},{"_id":"themes/next/source/images/hibernate2.png","hash":"a5545ea00d198cd58e701d6c10541a65b449dc5f","modified":1578541420000},{"_id":"themes/next/source/images/hibernate3.png","hash":"181a6d74e50906be79e8fd44d7b1a6f0fa6e3237","modified":1578541420000},{"_id":"themes/next/source/images/highlight.png","hash":"93c5b37e5de83800e2101d328e733a4a2eba8de3","modified":1578541420000},{"_id":"themes/next/source/images/ico_facebook.png","hash":"35debc88efb7580021fab8a48b04395d116964fc","modified":1578541420000},{"_id":"themes/next/source/images/ico_github.png","hash":"c475916a4c454d9bfce0269d2d332d08950ce3ba","modified":1578541420000},{"_id":"themes/next/source/images/ico_google.png","hash":"32467bdd19b30ddf1691a475b93fee0fa8c9b8a1","modified":1578541420000},{"_id":"themes/next/source/images/ico_twitter.png","hash":"36130a49b33662d7f06ff71f231945134c4b3711","modified":1578541420000},{"_id":"themes/next/source/images/jit.png","hash":"f6e12f4279b6848bbc02ca5cac2c7a5f05b1fb98","modified":1578541420000},{"_id":"themes/next/source/images/latex1.png","hash":"4426fd67dc4130970384286801e0a0a7fd4b1c14","modified":1578541420000},{"_id":"themes/next/source/images/latex2.png","hash":"078bc6297dea3cb77f116a8479d59b1d88708d7f","modified":1578541420000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578541420000},{"_id":"themes/next/source/images/logo.jpeg","hash":"47cd9d568143dae2f93f1abc77d64f8bf07ae979","modified":1578545881000},{"_id":"themes/next/source/images/logo.png","hash":"64c9ce05dcca5852aab1e111231725f3662a06ce","modified":1578541420000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578541420000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1578541420000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1578541420000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1578541420000},{"_id":"themes/next/source/images/selector1.png","hash":"08139a7222fe34fcd6aa8f9844a231fdfd4c1d43","modified":1578541420000},{"_id":"themes/next/source/images/selector2.png","hash":"59cdb0e04730fe00ac0268b5124358b5a9b0ae39","modified":1578541420000},{"_id":"themes/next/source/images/selector3.png","hash":"bf6e4234a71a842434b5b5fb17bfb8f32744a125","modified":1578541420000},{"_id":"themes/next/source/images/zsh1.png","hash":"8fbff9d8a38f25bc0aff44d266245460fb5683dc","modified":1578541420000},{"_id":"themes/next/source/images/zsh2.png","hash":"281df644c4c516760a42f1bf0c10a4127ff38d0c","modified":1578541420000},{"_id":"themes/next/source/images/zsh3.png","hash":"6e7fedae6adf2209e23933c6aceed6e6028fe2ca","modified":1578541420000},{"_id":"themes/next/source/images/zsh4.png","hash":"5ca574141ebdf6eb447551a94fa4648b9a7d106f","modified":1578541420000},{"_id":"themes/next/source/images/zsh5.png","hash":"3a47c7a32de68c32a538c32e812e79ea8bba2635","modified":1578541420000},{"_id":"themes/next/source/images/zsh6.png","hash":"3d17094f4343ce15e9473b6fbc48aee234e59254","modified":1578541420000},{"_id":"themes/next/source/js/dynamic_bg.js","hash":"57e43a7d5263e7736d95531178d4f05a3412c54e","modified":1578548171000},{"_id":"source/images/linuxkernel_20200308_4.jpeg","hash":"1629e856ec5da2b65243f202f073e16cb8bb7dd9","modified":1583668862000},{"_id":"source/images/mysql_20200714_p1.png","hash":"e7b2961c61ec155ac6c3b6c11cfb49fe9c073ee0","modified":1594685701391},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578541420000},{"_id":"themes/next/source/images/404.png","hash":"9c41141a83ab032005b7b7394dd67bf29594925b","modified":1578541420000},{"_id":"themes/next/source/images/5-4.png","hash":"b81e9b2f1d3dd8bd567ef322f0bdf21692ee1da9","modified":1578541420000},{"_id":"themes/next/source/images/5-6.png","hash":"932acf8b9a8a7e683fcd8b5348c7c70feaa4289a","modified":1578541420000},{"_id":"themes/next/source/images/5-9.png","hash":"264a65d2b988d25926b8064ddfadc979464f074f","modified":1578541420000},{"_id":"themes/next/source/images/dag10.png","hash":"9dbc392f37fc12d7887a5d7afbc59df09d247634","modified":1578541420000},{"_id":"themes/next/source/images/drawableimport.png","hash":"7f2ea6aaec441e52b913a9ba3a6872d340446e91","modified":1578541420000},{"_id":"themes/next/source/images/elasticsearch_github.png","hash":"0e6ff24557708c7ae636f9978d02fb187052b412","modified":1578541420000},{"_id":"themes/next/source/images/indexing source.png","hash":"8153d8eabc6eccf93f99d9fa66d5aaa86994945a","modified":1578541420000},{"_id":"themes/next/source/images/jdgui.png","hash":"01578f934d35c2ab2cabf2e3db4c21d78b90b45b","modified":1578541420000},{"_id":"themes/next/source/images/leak.png","hash":"4acc2845f13c33d997cfab2befd9755f89ac4a8d","modified":1578541420000},{"_id":"themes/next/source/images/parcelable_generator.png","hash":"eb66e87a2a9c0f81417b781d3c9a5f6f31297b12","modified":1578541420000},{"_id":"themes/next/source/images/preview.png","hash":"b5faf1f39689ababdd821f9757c3ad1e7cda9169","modified":1578541420000},{"_id":"themes/next/source/images/volley.png","hash":"ac36616c5f632146c47567a8d0087c0475e09b7d","modified":1578541420000},{"_id":"themes/next/source/images/wechat-reward-img.jpg","hash":"895053e2cb225f6d906318c547cd5955f1165d27","modified":1578541420000},{"_id":"source/images/interview_2020080504.png","hash":"07bf5820d7f57c961bf1b5664930b6d839aeeb6a","modified":1596628285649},{"_id":"source/images/project_seckill_2020080401.png","hash":"7a79a3075146a38be91fac77918c018471808c28","modified":1596497285527},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1578541420000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1578541420000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1578541420000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1578541420000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1578541420000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1578541420000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1578541420000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1578541420000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1578541420000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1578541420000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1578541420000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1578541420000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"c8a9f74cbc7c0f00da3013e25f2bde0478dee906","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1578541420000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"bf0e8da9a1650eb62b06c21c9c715ce0c3745c67","modified":1578541420000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1578541420000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1578541420000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1578541420000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1578541420000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"59ba846c1bbe0251ebf36de0f3775b41aef98646","modified":1578541420000},{"_id":"themes/next/source/images/alipay-reward-img.jpg","hash":"1a1d267592ee97e5a1e32a34a0535ad4a33580ac","modified":1578541420000},{"_id":"themes/next/source/images/apktool2.png","hash":"d45c5e720107f434a9d1aa0c71d2d71778eb22ac","modified":1578541420000},{"_id":"themes/next/source/images/codota.png","hash":"12b755a0fcb21d7a337dfeaa50c15d7575478fcd","modified":1578541420000},{"_id":"themes/next/source/images/holocolor.png","hash":"126bcbfc6f9da11dc84816ee458ba6db497d4fd0","modified":1578541420000},{"_id":"themes/next/source/images/images/background.jpeg","hash":"b15e521fe57a7bf04c8b3e5238a7a47a200fee04","modified":1578541420000},{"_id":"themes/next/source/images/images/category-list.jpg","hash":"fb667b2775ce0f002f3607bba80fadfa3fa70732","modified":1578541420000},{"_id":"themes/next/source/images/images/chart.png","hash":"7c03f615c426c89c51714a61cc290836f1180cc6","modified":1578541420000},{"_id":"themes/next/source/images/images/comparison-sort-decision-tree.jpg","hash":"f186d8f00b58670903d6ac23776fb8c284b1cda0","modified":1578541420000},{"_id":"themes/next/source/images/images/diy-design-php-mvc-framework-url-users.png","hash":"9762a10a5678e9a0c90f213b04f86f5418ce72d5","modified":1578541420000},{"_id":"themes/next/source/images/images/evbuffer.png","hash":"f5d76e4c517af8d97b39be205fda0939c35671e9","modified":1578541420000},{"_id":"themes/next/source/images/images/external_link.gif","hash":"fa11fa47062955f24f396e6a594e395513bf4338","modified":1578541420000},{"_id":"themes/next/source/images/images/external_link_on.gif","hash":"3b7262c9f378d6e8e46074dfdc0de0b78573ced4","modified":1578541420000},{"_id":"themes/next/source/images/images/gitgit.png","hash":"b9faa211a3ae53dd51e076a7d4c20497cff4e185","modified":1578541420000},{"_id":"themes/next/source/images/images/hot.gif","hash":"e1faf988dd309c865ff6a2c89638c899a761d984","modified":1578541420000},{"_id":"themes/next/source/images/images/icon_square.gif","hash":"c482b8adf7c2030afc07f7bc16caf9df5dce23f2","modified":1578541420000},{"_id":"themes/next/source/images/images/icons.gif","hash":"478d2722262504858d68e51b433f19c89f4ff9d1","modified":1578541420000},{"_id":"themes/next/source/images/images/invoke_chain.png","hash":"a1b772f8330bbc26197c13cb2552a4b297872bfa","modified":1578541420000},{"_id":"themes/next/source/images/images/svn.png","hash":"4d842c1ee48c5282d3cf3331abcd10af6728816b","modified":1578541420000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1578541420000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1578541420000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1578541420000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1578541420000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1578541420000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1578541420000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1578541420000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1578541420000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1578541420000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1578541420000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1578541420000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1578541420000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1578541420000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1578541420000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1578541420000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1578541420000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1578541420000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1578541420000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1578541420000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1578541420000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1578541420000},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1578541420000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1578541420000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1578541420000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1578541420000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1578541420000},{"_id":"themes/next/source/images/apktool1.png","hash":"8205935d0cab79fba1e15783a9a4e66756a83cc0","modified":1578541420000},{"_id":"themes/next/source/images/images/111.gif","hash":"5c7f16623ae13ee1c6a3e02673449f4485d2976c","modified":1578541420000},{"_id":"themes/next/source/images/images/222.gif","hash":"0e72ea963c56009d500ae4bc96193cebb8a80801","modified":1578541420000},{"_id":"themes/next/source/images/images/333.gif","hash":"22f08b1a833d3344edfab063254d6644092259e3","modified":1578541420000},{"_id":"themes/next/source/images/images/btrace.png","hash":"bc0f8307354368efa30ec69cb847e4e5b9a8831f","modified":1578541420000},{"_id":"themes/next/source/images/images/chat-style.png","hash":"cf30cae78fb3eb8b4c348c9833247ad83e282e33","modified":1578541420000},{"_id":"themes/next/source/images/images/chat.png","hash":"1f343ae1e102fcc0d69072dbe4089adaf32e3326","modified":1578541420000},{"_id":"themes/next/source/images/images/git.gif","hash":"37406202f6fae32a4275c0d5304152f563a41f97","modified":1578541420000},{"_id":"themes/next/source/images/images/gradle1.png","hash":"e2b6ed935302aa9db8cf41a7192ae37f699b6b25","modified":1578541420000},{"_id":"themes/next/source/images/images/nodejs1.png","hash":"c1e7c50f00ede27e22f030299d9d9d4793c4cec2","modified":1578541420000},{"_id":"themes/next/source/images/images/nodejs2.png","hash":"ca75aea64ce029009e4d901c31b8e459ebb0f575","modified":1578541420000},{"_id":"themes/next/source/images/images/tmux.jpg","hash":"ed748eaaf440a6ad1089741cf0a280138522f3d5","modified":1578541420000},{"_id":"themes/next/source/images/images/tmux2.jpg","hash":"279a56abdc6be3576606c97308b2f4ad2b884b47","modified":1578541420000},{"_id":"themes/next/source/images/images/wechat.png","hash":"f74d7de7f71624010c6aa31cec752151f8805e20","modified":1578541420000},{"_id":"themes/next/source/images/pages/ashenna.png","hash":"46ea209d9c1c8862198a685e7013f2a8cfdbb385","modified":1578541420000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1578541420000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1578541420000},{"_id":"source/images/linuxkernel_20200306_2.jpeg","hash":"698c53009fbbf31ef47dbaf7cd8cd2c1a4135d42","modified":1583486340000},{"_id":"source/images/linuxkernel_20200308_3.jpeg","hash":"6ff41b984b7e014eb9dd617199241af2fddb28e0","modified":1583651613000},{"_id":"source/images/linuxkernel_20200306.jpeg","hash":"b2c1b8ebd351c33b7aac5fc89e9137f0cd3bc275","modified":1583482830000},{"_id":"source/images/mysql_p1_20200304092002.png","hash":"3e519e1e5f09431bde5abc94e7428c573f07808e","modified":1583285436000},{"_id":"source/images/linuxkernel_20200308_5.jpeg","hash":"c8e48cedf3a5b4d0aafec72e4039f2a14c5da3d2","modified":1583669764000},{"_id":"source/images/project_seckill_2020073001.png","hash":"792465e46e530bad1dcc1cd66679e80a8013cd07","modified":1596062136063},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"915415a0ec30dfc1a2958d81e84bb767b836b3a8","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1578541420000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1578541420000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1578541420000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1578541420000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1578541420000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1578541420000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1578541420000},{"_id":"themes/next/source/images/images/es/4.png","hash":"c08589095099cf647c7e4ac5277b39ce0b830cef","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img4.png","hash":"403b9e53b35c580dc21b6763fb2cd1d07da9deee","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/bootcamp_1_ssh.jpg","hash":"3c7850abcba9265cc54a23b61c041fe15fd548ca","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/bootcamp_1_token.jpg","hash":"2b340f5df5a472df7511d09a527de118824f7626","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/bootcamp_1_win_gitbash.jpg","hash":"15d85176d1f6d24762ab94c9634e57f261d34f05","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-02-img0.png","hash":"a557bffda4fd65d210772ce54e56071eec9f218d","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-02-img1.png","hash":"9603ca15045be33c454d97f769915945002bfd80","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-03-img0.png","hash":"998cb9eac5e73b9921d6a3a1aa5af4056a9ef6c6","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-04-img0.png","hash":"85b32824f3b3bfff0818da4c95b60a4d54c5dbf7","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-05-img0.png","hash":"fe8c4a2bb57198d2f6e909eb47ad5cba4a8db694","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-05-img1.png","hash":"3dd51fd0d4f817b047fbfa360c7e24ddbebd25e3","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img0.png","hash":"c34080469b54acf13c316965d9e44b7778ff8455","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img1.png","hash":"967e5b6a4bc896feb5861d633677d28d497c1e9b","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img4.png","hash":"346b0dd8b3a6d7039eeddfeb2e2a8ddc06061ad3","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img5.png","hash":"c34b4e585477cecbc501699b7a7c376f6b1dace9","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/disqus-site.jpg","hash":"327912fd3340808ae83f2de4d0af1f536d2c03a4","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/github-account-setting.png","hash":"1a23b76d1b5e9af5362592fd092918a455c18777","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/image1.png","hash":"a557bffda4fd65d210772ce54e56071eec9f218d","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level1.png","hash":"72bbc7abebf60b445d816c3c256e9d13d0f25cdf","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level10.png","hash":"272ecf246582f4dbcd49319ced92a4a19aa3eb08","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level11.png","hash":"1f3ca28e252e4d55e8e1096b9f426fcb7dbc74c7","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level12.png","hash":"177c28594c8a1548c0f386b4e8719acb13aaae0f","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level2.png","hash":"d815a2e8659b9ae0fe567dcfc7ea64a5f0cd03de","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level4.png","hash":"c286c470697e16cce1d320c6745bd4ab71faffc2","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level5.png","hash":"961f68342c92baedeea6297c1dbb7903815b5445","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level6.png","hash":"8426a913b8f1a9f067f090b618b94ebdb6fd7817","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level7.png","hash":"ad1973fe9f0511c0f3ad86456a5b2190d35e5429","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level8.png","hash":"d8601f9676b3693085eb976492e73367a1cb8812","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level9.png","hash":"1807f4443289ed57a8615916f25ae4721086153c","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/other-pages.png","hash":"6eb426e9ff72ee23429ebb6c703cac5858739d70","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/sitemap.jpg","hash":"112e49c46cb288a2984dc9c59f382abc968b4fe7","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/sitemap2.jpg","hash":"bfe5569e0cd7537d6f8d907368b9e7554a36bff9","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/skiplist1.jpg","hash":"dfa471c5760a45ee9d7f5e402710e21a49a7f984","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/skiplist2.jpg","hash":"a6796e9916a957fc4b7c2a1542d25c6294b4622d","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/skiplist3.jpg","hash":"576ef51356c9e18ffee57f9b64d6a69d39d47441","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/skiplist4.jpg","hash":"30687550a31db47db65da031db270e43791e542f","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/skiplist5.jpg","hash":"bbd27f6cc3266f4a218b4276d781188fa155e2bd","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/ssh-key-set.png","hash":"dd8616488ff62643cc061ff81ea47896aeae0962","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/user-pages.png","hash":"998b163d96a1d784a67f8bbfb781aebad4914a01","modified":1578541420000},{"_id":"themes/next/source/images/images/http/1.jpeg","hash":"4cdc84391d6b83470f89b0af3d862854ead66fb5","modified":1578541420000},{"_id":"themes/next/source/images/images/http/2.jpeg","hash":"473ef78a4c1a0ae746024a64c624d411b094afee","modified":1578541420000},{"_id":"themes/next/source/images/images/http/3.jpeg","hash":"6059d56023d4157dba4651ab84ee9b0a73db7c69","modified":1578541420000},{"_id":"themes/next/source/images/images/http/4.jpeg","hash":"e1433050cbdb5cefa0f90cd6a50138fc8a728b47","modified":1578541420000},{"_id":"themes/next/source/images/images/java/2.jpeg","hash":"6fc2585a6fe671cf4649433d687603ac100ffada","modified":1578541420000},{"_id":"themes/next/source/images/images/java/3.jpeg","hash":"39a25f7f54e1f0689d8261275c68ab5977f233e0","modified":1578541420000},{"_id":"themes/next/source/images/images/node-file-server-output.png","hash":"727bcf7f3dc0b5bdca9e02105f2aa5227db3503f","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp1.jpeg","hash":"4cb859aceeb1b2c1675af8228cfb2ca3e78813bf","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp7.jpeg","hash":"2ecf3883e46061728b622d15285fc78bd70228a8","modified":1578541420000},{"_id":"themes/next/source/images/images/rainingchrome/RainingChrome.pem","hash":"93883ce669efb5b332b554acec3aa741b49c5c6c","modified":1578541420000},{"_id":"themes/next/source/images/images/rainingchrome/rain.jpg","hash":"0545ed4fb03dffcf5bed765da1a0ca1902d25031","modified":1578541420000},{"_id":"themes/next/source/images/images/rainingchrome/update.xml","hash":"7e1bb4f211254cfac7a6610baa1e6da19b44c473","modified":1578541420000},{"_id":"themes/next/source/images/images/turn/fold.png","hash":"b7280f9bdca26fb2520d66c809a70b4417a11ebc","modified":1578541420000},{"_id":"themes/next/source/images/pages/log4j/appender.png","hash":"71586030599dbf195591f0380fa3314202fc2c56","modified":1578541420000},{"_id":"themes/next/source/images/pages/log4j/logger.png","hash":"5cfd72153c7fd45df13fe01ab9f1a9bc8ccb5b1b","modified":1578541420000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1578541420000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1578541420000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1578541420000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1578541420000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1578541420000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1578541420000},{"_id":"themes/next/source/images/butterknife.gif","hash":"1c66b41f49f5007a59b619a82bc0e0326828a935","modified":1578541420000},{"_id":"themes/next/source/images/classshark.png","hash":"8414c43333cbeb4fec80037e8d953b119d8c5ce0","modified":1578541420000},{"_id":"themes/next/source/images/images/es/1.png","hash":"d5de1c33ac20b1af2b114fc85fbc8e5effdcfa68","modified":1578541420000},{"_id":"themes/next/source/images/images/es/2.png","hash":"c600b61ce53c41a70181cd64ff71c6ca267980d2","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img0.jpeg","hash":"707208deaa19ff9ca617074d4f6c57b63544bd20","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img1.png","hash":"c5d8e058a8ea01c967e67dcfbff84153ab64e011","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img2.png","hash":"891806282da542b13f00ea2ab9e71a11cbd9c3e0","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level3.png","hash":"2c2da3b928ba33280d3577f9d691fe4e7920b56d","modified":1578541420000},{"_id":"themes/next/source/images/images/image001.png","hash":"b6764e39c9288c8ac1ef0ff415ca3746127f9f79","modified":1578541420000},{"_id":"themes/next/source/images/images/java/1.jpeg","hash":"b6af2f50788c803c13a273786aa3a288e84b29aa","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp11.jpeg","hash":"2d5cff5581db0f7054287e811266d03af3f054bb","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp2.jpeg","hash":"28c1ecd918446c6873ef64980eb7edc288376217","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp3.jpeg","hash":"1e2879a1d23146d7e28c8eaa52ba645f28f051d5","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp4.jpeg","hash":"4bdde3c7e8f77e572514b3d294053bbb4ece3710","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp5.jpeg","hash":"c5e9882fd5be4b4f1794962dc5f022f0e7e38dfc","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp6.jpeg","hash":"3a19522aa5e115d95416ba5f62c67eda45125562","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp8.jpeg","hash":"905bee6371fee9b3e1d65abc25bb02f4a9d8a56e","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp9.jpeg","hash":"8d34c0b01fb20432f037602e72252c144138a197","modified":1578541420000},{"_id":"themes/next/source/images/images/turn/code.png","hash":"efae5c6e92ba2db26eb861ff4dd6b69baccf637b","modified":1578541420000},{"_id":"themes/next/source/images/images/turn/fold-sw.png","hash":"2a24da1ddab77d41a5b66a6444199340b7894ac6","modified":1578541420000},{"_id":"themes/next/source/images/pages/linux/linux06.png","hash":"d1c10774bf41e6ce7a73c1b7b03a5337c7285658","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1578541420000},{"_id":"source/images/linuxkernel_20200308_1.jpeg","hash":"9cd6dc2ce34dca9b9b68482c690665254fac7a87","modified":1583648777000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e99a13846f43754799a88dce2c9f8802f3e66bea","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"d5e46dca7c0773d14012faac3c0c642558ad8a49","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1578541420000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1578541420000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1578541420000},{"_id":"themes/next/source/images/background.jpg","hash":"d7462c4e39fb359a2521cbcb853e6936c0971fc6","modified":1578541420000},{"_id":"themes/next/source/images/images/daovoice.png","hash":"91c8fc9d1187729416e8a54bb1126d88922aae2c","modified":1578541420000},{"_id":"themes/next/source/images/images/es/3.png","hash":"d2ce6b67637c4e11db19d20507bcacf8d3c933af","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-01-img0.png","hash":"59948d6bce8e17370f7d5e89d230f5d803110682","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/build-github-blog-page-06-img2.png","hash":"8088be6841f4d14daf6b3bcd900d2a0bf4c95ea7","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph1.jpg","hash":"c89cb24637edf1c08a85653216f97f608a1ed8fe","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph11.jpg","hash":"d796e58c2564a378b69f57a6803235df7ec1e170","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph2.jpg","hash":"e2cbf64d610fc5f246c5a52ada4cae69d7580e0c","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph4.jpg","hash":"066eb041a2d6e1833cff50fb3445c95829b48a07","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph7.jpg","hash":"d8784fc086d8337075087df620ce5c6665a31e19","modified":1578541420000},{"_id":"themes/next/source/images/images/http/0.jpeg","hash":"4563cad08da119375c9e84a1fd6ad9fc745469c8","modified":1578541420000},{"_id":"themes/next/source/images/images/openfire/xmpp10.jpeg","hash":"9c24c5f839f68e1d069cd97836bcf654b926bd08","modified":1578541420000},{"_id":"themes/next/source/images/pages/linux/linux05.png","hash":"c2551996b2761a681d3472ea491ed220bf5eaf0a","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578541420000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1578541420000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1578541420000},{"_id":"themes/next/source/images/images/cardtable.png","hash":"7e160d40f94d6c627d7e9e80ff7eeab74fd23f22","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph3.jpg","hash":"d837c18ea3bfd43bf19791dc3f011ecca75fb839","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph5.jpg","hash":"03cd187147bfa7e82954163e0d2ce795bf4bcac4","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph6.jpg","hash":"0e7bc85699a102de3f37f3d2ebdd31986c961c94","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph9.jpg","hash":"c1f286a9155e290920cd428779c47f589be1dbbb","modified":1578541420000},{"_id":"themes/next/source/images/pages/linux/linux03.png","hash":"6c0fa0b450f67b7206a6a3b78015e3674127d8d1","modified":1578541420000},{"_id":"themes/next/source/images/pages/log4j/logger-trace.png","hash":"f37498e1ff42faa2f930799e5ffdcb995ac9013d","modified":1578541420000},{"_id":"themes/next/source/images/pages/log4j/loggers.png","hash":"412e83f0b7c58fd88c8155f599ceb135e59acb47","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1578541420000},{"_id":"themes/next/source/images/gson_format.gif","hash":"254a32bf2dc17736f5ad3c4b6689fa159506eefd","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/2013-01-20-build-github-blog-page-07-img3.png","hash":"1a78ea1ce6b73526de1e28e34d84098fcc83f5a9","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph8.jpg","hash":"8478898e264ce79ee04b272ee9c4462b6a68cf7c","modified":1578541420000},{"_id":"themes/next/source/images/images/img2txt.jpg","hash":"89243b3b789b0332725921c02a98ece91199ae45","modified":1578541420000},{"_id":"themes/next/source/images/images/node-source.png","hash":"f80b4f575f2940a85b51a8c474389c9533292dce","modified":1578541420000},{"_id":"themes/next/source/images/pages/linux/linux04.png","hash":"1e5bd18c2a282b9c7895cccd6901745fdc6bbcd6","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph10.jpg","hash":"9562528143a947bb03bc04f5a1c58cd6d62ed49f","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/skiplist6.jpg","hash":"956fe6de73f814fb3871e50eb5d3581cee82a3d5","modified":1578541420000},{"_id":"themes/next/source/images/pages/linux/linux02.png","hash":"1ed006e7580ffa08c7efacf9e4a3df57faaa8e56","modified":1578541420000},{"_id":"themes/next/source/images/pages/linux/linux01.png","hash":"429d7094d7ce04b0df5e3a4863cf62ac84a1f1a0","modified":1578541420000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1578541420000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/graph/graph12.jpg","hash":"9a469a57ff8c30e94e5b0eaeb7edf83b577fb4e1","modified":1578541420000},{"_id":"themes/next/source/images/images/githubpages/level13.png","hash":"74a999f07c372670af35d21924240a2a5dda8a9e","modified":1578541420000},{"_id":"source/images/linuxkernel_20200306_1.jpeg","hash":"30d6cf1755afc5efe4fc06f7f61ea49950378a97","modified":1583483799000},{"_id":"themes/next/source/images/images/rainingchrome/RainingChrome.crx","hash":"7ee45dee57cceab0b456c421259da36330849c9c","modified":1578541420000},{"_id":"themes/next/source/images/capture.gif","hash":"61d04b94eb7428488a3ca52dd8cee49c8334d4a8","modified":1578541420000},{"_id":"public/atom.xml","hash":"efdaa9e1a6b557e08d64b57b1f805818523c9714","modified":1605364847871},{"_id":"public/search.xml","hash":"85730955a7a5acfbf8d9ab888ec634e7c5e69b1d","modified":1605364847871},{"_id":"public/categories/index.html","hash":"63818a30f86586203d06ea05325815a29fa80a0f","modified":1605364847871},{"_id":"public/tags/index.html","hash":"e8cfb1a60aecf65fcde026fd1839fe22ffe60ad4","modified":1605364847871},{"_id":"public/2020/11/14/微服务实战/index.html","hash":"e2f975adb24b591060e3ebe2bd1d3e4a96999894","modified":1605364847871},{"_id":"public/2020/08/27/leetcode题解/index.html","hash":"921e8f680aeb11c3acc80edda162498def4168f6","modified":1605364847871},{"_id":"public/2020/08/27/网络编程/index.html","hash":"8ffe713d7245b780df4f82ac4a6a40eff81d66d8","modified":1605364847871},{"_id":"public/2020/08/09/linux内核/index.html","hash":"c36663c295f9a8127bd281635428f365fb0b7a46","modified":1605364847871},{"_id":"public/2020/08/03/interview/index.html","hash":"5863cb265f7b96d3d86b22328771d86fe8584aa7","modified":1605364847871},{"_id":"public/2020/07/29/秒杀系统设计/index.html","hash":"f46ebc3ac7cec28fc4e9bd415f428849784d7258","modified":1605364847871},{"_id":"public/2020/07/26/cpp中对象数组初始化问题/index.html","hash":"30e71f10474232eeb71af2f80fdc6b3fbe914108","modified":1605364847871},{"_id":"public/2020/07/04/mysql/index.html","hash":"f293fbc1f641ccbd043e865dc59fe1cafbcaf890","modified":1605364847871},{"_id":"public/2020/07/04/makefile/index.html","hash":"0924c68eb33b91a6ceafba72e4f4db49f7263171","modified":1605364847871},{"_id":"public/2020/07/04/shell/index.html","hash":"185688d1d6f80d12bb7ca146b110dc8aaf90f6f8","modified":1605364847871},{"_id":"public/2020/07/04/go/index.html","hash":"0a2dde4f7fccc64e6bdda22ebaea9f50df07582d","modified":1605364847871},{"_id":"public/2020/05/07/linux内核实战/index.html","hash":"ba6cd61ad57b62e205c298ed1aed3b1c03857c1e","modified":1605364847871},{"_id":"public/2020/04/04/muduo笔记/index.html","hash":"11d3b7d7daa3441173d381d8de3293d5e189b8fa","modified":1605364847871},{"_id":"public/2020/03/30/linux系统编程/index.html","hash":"0d79918ff20e0b94166a3c04c42b9dc38875ec7c","modified":1605364847871},{"_id":"public/2020/03/29/模板/index.html","hash":"229fa93e44a99d85295da5bc406c4cc59ebf9f8f","modified":1605364847871},{"_id":"public/2020/03/26/工具/patchelf/index.html","hash":"7934f37bd880c1ec723fe5145773869441b55bd5","modified":1605364847871},{"_id":"public/2020/03/06/趣谈linux操作系统笔记/index.html","hash":"e3e94619c32a9d70a9f400bc46cc8a0b32d4a901","modified":1605364847871},{"_id":"public/2020/03/03/mysql_interview/index.html","hash":"bd1dff6f8fecd06739ed7beec0526c1fd47e3ce5","modified":1605364847871},{"_id":"public/2020/02/26/mysql基础/index.html","hash":"6dfbb34c8be639f2d492d2e98b5b6ec09bc6352d","modified":1605364847871},{"_id":"public/2020/02/20/cpp并发/index.html","hash":"ac6c581eeadc2aac7320f5f1b2ae6272afede9da","modified":1605364847871},{"_id":"public/2020/02/18/linux内核完全注释/index.html","hash":"f32d3975661a45c851ea5ad996dae79579061a92","modified":1605364847871},{"_id":"public/2020/02/16/面试/tcp-ip面试/index.html","hash":"74a97367f85c090390443812d2835cb7558bae3c","modified":1605364847871},{"_id":"public/2020/01/08/cpp/cpp细节/index.html","hash":"c8f57ac2e71870c3a41fd44a3661e92b74ec9d4e","modified":1605364847871},{"_id":"public/categories/c/index.html","hash":"bae324bbbb93b204172e6abf38e25a2840a7592f","modified":1605364847871},{"_id":"public/categories/go/index.html","hash":"a85a4eae968bc2657cead4e623a509b244f5ae84","modified":1605364847871},{"_id":"public/categories/Linux/index.html","hash":"3b263de0ca6b4419d3f8592162b75702b3310ced","modified":1605364847871},{"_id":"public/categories/中间件/index.html","hash":"f3bafeca685560c669296cc20ccc22ba61d7f950","modified":1605364847871},{"_id":"public/categories/微服务/index.html","hash":"f11e3eca820f852e28878b890d9a143f06fa5c96","modified":1605364847871},{"_id":"public/categories/project/index.html","hash":"4c8c0d8a8cd90745aa099b46d2ee47599a662f26","modified":1605364847871},{"_id":"public/categories/linux内核/index.html","hash":"afff68cd24678765a579a799dd03b2730f67f741","modified":1605364847871},{"_id":"public/categories/tools/index.html","hash":"23668aaf346e6ce6a2473b6b86ec281c9ceea14b","modified":1605364847871},{"_id":"public/categories/协议/index.html","hash":"941063d61a01d790df9eabbccaa810e96cd6efbe","modified":1605364847871},{"_id":"public/archives/index.html","hash":"15d199e6451a961d8acfb5a0eb95fc92940bb96c","modified":1605364847871},{"_id":"public/archives/page/2/index.html","hash":"ae9c1b54ce1d63a6aadf6ab8d39638836154308b","modified":1605364847871},{"_id":"public/archives/page/3/index.html","hash":"2c5e5d600087749bffd6917b5711b40cafdab53e","modified":1605364847871},{"_id":"public/archives/2020/index.html","hash":"bb624cbea5238fe3d6415e1f82fc2b2c793a0672","modified":1605364847871},{"_id":"public/archives/2020/page/2/index.html","hash":"5e7082b8613c5fa49347880597f8bfd82f2db0de","modified":1605364847871},{"_id":"public/archives/2020/page/3/index.html","hash":"107b86932c5d98ecb8c409e660275af9d976e76d","modified":1605364847871},{"_id":"public/archives/2020/01/index.html","hash":"d502161914352d7d8fc4b7baaed52ab9d6f09da2","modified":1605364847871},{"_id":"public/archives/2020/02/index.html","hash":"b69015bbb542dd927c0750d5c3e26ed384b37939","modified":1605364847871},{"_id":"public/archives/2020/03/index.html","hash":"1477d436dcae5d8d6fa7e3ddd1880ad42ff197ba","modified":1605364847871},{"_id":"public/archives/2020/04/index.html","hash":"61c81e19a09c47756b7aeb2396843581f56ed358","modified":1605364847871},{"_id":"public/archives/2020/05/index.html","hash":"213ae791ae926a505340a26d110e6916df12653c","modified":1605364847871},{"_id":"public/archives/2020/07/index.html","hash":"da18c6b3dde79bcd381490e8017425fdd42ccef4","modified":1605364847871},{"_id":"public/archives/2020/08/index.html","hash":"c5269433f15ac166fea127beef87d2c43584aaf1","modified":1605364847871},{"_id":"public/archives/2020/11/index.html","hash":"7d6943867e94dd0e96396488bed1109e029ae3ee","modified":1605364847871},{"_id":"public/index.html","hash":"e6a10d4bbde9c69b5bc5d212a633f0e09c7bad19","modified":1605364847871},{"_id":"public/page/2/index.html","hash":"a212ba878da0683900459246277dce0b47d50ba0","modified":1605364847871},{"_id":"public/page/3/index.html","hash":"9eb066c652f13caf50130c3854e7d34fb435267a","modified":1605364847871},{"_id":"public/tags/并发/index.html","hash":"3d4684c210aad2169c96e523a7e03cdc89a6ce48","modified":1605364847871},{"_id":"public/tags/面试/index.html","hash":"194d4b8e38c21b9c146ad8b7f85f77b5b4c3d4fc","modified":1605364847871},{"_id":"public/tags/Linux内核/index.html","hash":"e0d2fdcffcefa52b134f9f912a92c5e8523e9df2","modified":1605364847871},{"_id":"public/tags/网络编程/index.html","hash":"3154c5449380189705815c2258d27c7bba2145e7","modified":1605364847871},{"_id":"public/tags/mysql/index.html","hash":"247cc168a22706887f37102be8bf8f60972297b5","modified":1605364847871},{"_id":"public/tags/go/index.html","hash":"05f0b2c249adb96535c78f6a17a613b22265eb55","modified":1605364847871},{"_id":"public/tags/泛型/index.html","hash":"b6a386181c2d79f9cd55766779777733a73bee83","modified":1605364847871},{"_id":"public/tags/linux/index.html","hash":"14eeb0edf7b18a96f3c00d1c85665f8854e397ab","modified":1605364847871},{"_id":"public/images/a0bcedee-f079-4dd0-9643-99de53b48236.png","hash":"a18534488415eec320c97d11aff88fda67432ff5","modified":1605364847871},{"_id":"public/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png","hash":"1acfb3e189af31a08856c85d645ed0cba2ec8c32","modified":1605364847871},{"_id":"public/images/fc77df7e-b967-4408-934b-ba46535033e2.png","hash":"e71ab39b571c76328829564a732811fb09100a09","modified":1605364847871},{"_id":"public/images/go_20200408_1.png","hash":"928508c48df522adf710ca60f4fd0c242084267e","modified":1605364847871},{"_id":"public/images/go_20200408_2.png","hash":"17cca148627b0a092d13217d674ecfc232647aa0","modified":1605364847871},{"_id":"public/images/go_20200408_4.png","hash":"822e07b9a08b8618f1c1fd13c180cb2fe80c4d28","modified":1605364847871},{"_id":"public/images/go_20200408_5.png","hash":"6de6eb0a550726f8277ad9708902412a0e06757c","modified":1605364847871},{"_id":"public/images/interview_2020080402.png","hash":"3c0b33011cd49210d01b961a29541eb8b74b597f","modified":1605364847871},{"_id":"public/images/interview_2020080501.png","hash":"a5d35fb939274d58bbfdf3fd39970da866872d85","modified":1605364847871},{"_id":"public/images/interview_2020080502.png","hash":"5b08a6a52a7f0bd9a383b7c896589799d5e5efd1","modified":1605364847871},{"_id":"public/images/interview_2020080505.png","hash":"fd232382c151aa13b986c8d4efc2f4750764bb28","modified":1605364847871},{"_id":"public/images/mysql_20200704_1.png","hash":"49a4666d75f12c1d68f6d45aad28d3539d5a1695","modified":1605364847871},{"_id":"public/images/p1_20200224112830.png","hash":"1a9f6e0b2fd8a6a3cbff4520d6e902745ac4112c","modified":1605364847871},{"_id":"public/images/project_seckill_2020073002.png","hash":"158762bb9e354d41e1925600e28c349e70c68d45","modified":1605364847871},{"_id":"public/images/project_seckill_2020073101.png","hash":"878b86587a647d37d2efe8ca9cc7dca6e65f54d6","modified":1605364847871},{"_id":"public/images/project_seckill_2020080203.png","hash":"bc334b193618d0186b3f8cab422ea55be2a5bcdd","modified":1605364847871},{"_id":"public/CNAME","hash":"ea4cf00545a2bcee80ac7a25138dc87e223bc00a","modified":1605364847871},{"_id":"public/robots.txt","hash":"36af73bb61d87ee7d4290c8162f0a84390280d73","modified":1605364847871},{"_id":"public/images/4-1.png","hash":"23d23dce17f4886d7a8490090c21c5f576f24614","modified":1605364847871},{"_id":"public/images/4-2.png","hash":"be5647be06c98d194182ba925af10014a5c87fa7","modified":1605364847871},{"_id":"public/images/4-3.png","hash":"bf52d78a9487c96998d1bf7f6ae79b7fa210a663","modified":1605364847871},{"_id":"public/images/5-1.png","hash":"9486834da90ca052d978df2ab144256c8e874833","modified":1605364847871},{"_id":"public/images/4-4.png","hash":"85cbdb8afb7dda563c7695b4c401b75e85a78d4d","modified":1605364847871},{"_id":"public/images/5-10.png","hash":"e6697d8f69d74e040425e62efef2c661bf7a4bfc","modified":1605364847871},{"_id":"public/images/5-2.png","hash":"019efa366cf91df67fccf85ae9d4a1e4158cfc05","modified":1605364847871},{"_id":"public/images/5-5.png","hash":"f0071d8bc26162467e47882d3eea7fee4af357ad","modified":1605364847871},{"_id":"public/images/5-7.png","hash":"fc7f5a3b3929460cc46a38a098005d9b87690c1e","modified":1605364847871},{"_id":"public/images/5-3.png","hash":"a3477e64df1901153a82d75b28972581cc6b875d","modified":1605364847871},{"_id":"public/images/5-8.png","hash":"f8920e960d7e3db2db52e983a6a1a8e19ab71fd4","modified":1605364847871},{"_id":"public/images/adb.png","hash":"509b5dde61a0380d6bb92fde755395859791a608","modified":1605364847871},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1605364847871},{"_id":"public/images/avatar.gif","hash":"70eeea733629f469f92bd8538b592adb59bb4794","modified":1605364847871},{"_id":"public/images/apktool.png","hash":"852b31da44544903187d7df987b517866d7c5b97","modified":1605364847871},{"_id":"public/images/bg_body.png","hash":"b612b1c1588545491bc1ebea4ec4caa11c7e3dd1","modified":1605364847871},{"_id":"public/images/build-process.png","hash":"e79f753e4b64194ce14b113bcdd95d3637cc48a6","modified":1605364847871},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1605364847871},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1605364847871},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1605364847871},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1605364847871},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1605364847871},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1605364847871},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1605364847871},{"_id":"public/images/dag.png","hash":"4633d5a5a35ab47b58b42eb6892a08290316d757","modified":1605364847871},{"_id":"public/images/dag1.png","hash":"67f18b5418728a738e0dc7fc57b46dca42b3cdd7","modified":1605364847871},{"_id":"public/images/dag11.png","hash":"bcbb12c1fae62bad432647d4466c2d24dd594aa0","modified":1605364847871},{"_id":"public/images/dag12.png","hash":"daaf185ebafdb6ae99c84ce28f492b22123b483f","modified":1605364847871},{"_id":"public/images/dag13.png","hash":"783e76bce958d7bf6c2a4d3addff6bb659994831","modified":1605364847871},{"_id":"public/images/dag14.png","hash":"1e1b8dac06bac357e5e864f4f211b79f596010b9","modified":1605364847871},{"_id":"public/images/dag15.png","hash":"2560090cc4bbd12b9754af0a1d8082ebfe4b75f7","modified":1605364847871},{"_id":"public/images/dag16.png","hash":"fddd271777dad82e8e0e36963645e70721d3f30c","modified":1605364847871},{"_id":"public/images/dag17.png","hash":"028e2d761d352b52a2b4048cae9b41f238ab42b1","modified":1605364847871},{"_id":"public/images/dag18.png","hash":"856f7e142570b548a967b32a00457daa30320148","modified":1605364847871},{"_id":"public/images/dag19.png","hash":"a4085186eda63a0d561cc3cd94652db549839a0b","modified":1605364847871},{"_id":"public/images/dag2.png","hash":"e42cf55371d34351433ad01495259a5a2def398a","modified":1605364847871},{"_id":"public/images/dag20.png","hash":"5338ac2a6c480d070554785897945b8c375b5f43","modified":1605364847871},{"_id":"public/images/dag21.png","hash":"30e2e3408b06e6e16f2f90ce24def40f419e9816","modified":1605364847871},{"_id":"public/images/dag22.png","hash":"712a807db70cb06c9d16086e89214f1d84f72fbd","modified":1605364847871},{"_id":"public/images/dag23.png","hash":"d7ed7f8afae0f9e8c2cb354a18aed900a7306433","modified":1605364847871},{"_id":"public/images/dag26.png","hash":"58cb6d7d5db1bea5b4881c29a3d2edaa18f14b68","modified":1605364847871},{"_id":"public/images/dag3.png","hash":"fe472a5966dee8630b729fa1a57bbabb280c5f7e","modified":1605364847871},{"_id":"public/images/dag4.png","hash":"01df26a077916fe2aa4975ff17ebacea9d0b5d77","modified":1605364847871},{"_id":"public/images/dag48.png","hash":"00ffaf97e864d4a838b164bfcaad24506757dea6","modified":1605364847871},{"_id":"public/images/dag49.png","hash":"13c0a4feeb35c7f25c7a1423c699cd0a831024ab","modified":1605364847871},{"_id":"public/images/dag5.png","hash":"bb4c32ec31ebaf20d2f9f82c4a11df9bd9e022d5","modified":1605364847871},{"_id":"public/images/dag50.png","hash":"f75deaddf62ece7c1a7dc499a50f86ab9e8dba9a","modified":1605364847871},{"_id":"public/images/dag6.png","hash":"5655cab25006ddadf7449df5a617f721ee3223d6","modified":1605364847871},{"_id":"public/images/dag7.png","hash":"e953c25b437e8614bed303579b9d725136a3f01e","modified":1605364847871},{"_id":"public/images/dag8.png","hash":"c3e1f00b122a6cd08743ba89cc5fbf00cb6d72da","modified":1605364847871},{"_id":"public/images/dag9.png","hash":"c0a8d0ce18a79646cdaf5520649aad080a19b74a","modified":1605364847871},{"_id":"public/images/dora-top-small.png","hash":"9e27b1ec561d936f60d53a91aa484dba6e666880","modified":1605364847871},{"_id":"public/images/dnspod.png","hash":"077db1d9c95c699d3ed582732bd8b4462be4967b","modified":1605364847871},{"_id":"public/images/gradle-tasks.png","hash":"69452ba416a9cbd892ea5323a4fda2f21a68b40a","modified":1605364847871},{"_id":"public/images/hibernate1.png","hash":"201f4ad7eb8db311f6247e0230fbd0bf1689a8e9","modified":1605364847871},{"_id":"public/images/hibernate2.png","hash":"a5545ea00d198cd58e701d6c10541a65b449dc5f","modified":1605364847871},{"_id":"public/images/hibernate3.png","hash":"181a6d74e50906be79e8fd44d7b1a6f0fa6e3237","modified":1605364847871},{"_id":"public/images/highlight.png","hash":"93c5b37e5de83800e2101d328e733a4a2eba8de3","modified":1605364847871},{"_id":"public/images/ico_facebook.png","hash":"35debc88efb7580021fab8a48b04395d116964fc","modified":1605364847871},{"_id":"public/images/ico_github.png","hash":"c475916a4c454d9bfce0269d2d332d08950ce3ba","modified":1605364847871},{"_id":"public/images/ico_google.png","hash":"32467bdd19b30ddf1691a475b93fee0fa8c9b8a1","modified":1605364847871},{"_id":"public/images/ico_twitter.png","hash":"36130a49b33662d7f06ff71f231945134c4b3711","modified":1605364847871},{"_id":"public/images/jit.png","hash":"f6e12f4279b6848bbc02ca5cac2c7a5f05b1fb98","modified":1605364847871},{"_id":"public/images/latex1.png","hash":"4426fd67dc4130970384286801e0a0a7fd4b1c14","modified":1605364847871},{"_id":"public/images/latex2.png","hash":"078bc6297dea3cb77f116a8479d59b1d88708d7f","modified":1605364847871},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1605364847871},{"_id":"public/images/logo.jpeg","hash":"47cd9d568143dae2f93f1abc77d64f8bf07ae979","modified":1605364847871},{"_id":"public/images/logo.png","hash":"64c9ce05dcca5852aab1e111231725f3662a06ce","modified":1605364847871},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1605364847871},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1605364847871},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1605364847871},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1605364847871},{"_id":"public/images/selector1.png","hash":"08139a7222fe34fcd6aa8f9844a231fdfd4c1d43","modified":1605364847871},{"_id":"public/images/selector2.png","hash":"59cdb0e04730fe00ac0268b5124358b5a9b0ae39","modified":1605364847871},{"_id":"public/images/selector3.png","hash":"bf6e4234a71a842434b5b5fb17bfb8f32744a125","modified":1605364847871},{"_id":"public/images/zsh1.png","hash":"8fbff9d8a38f25bc0aff44d266245460fb5683dc","modified":1605364847871},{"_id":"public/images/zsh2.png","hash":"281df644c4c516760a42f1bf0c10a4127ff38d0c","modified":1605364847871},{"_id":"public/images/zsh3.png","hash":"6e7fedae6adf2209e23933c6aceed6e6028fe2ca","modified":1605364847871},{"_id":"public/images/zsh4.png","hash":"5ca574141ebdf6eb447551a94fa4648b9a7d106f","modified":1605364847871},{"_id":"public/images/zsh5.png","hash":"3a47c7a32de68c32a538c32e812e79ea8bba2635","modified":1605364847871},{"_id":"public/images/zsh6.png","hash":"3d17094f4343ce15e9473b6fbc48aee234e59254","modified":1605364847871},{"_id":"public/images/5-4.png","hash":"b81e9b2f1d3dd8bd567ef322f0bdf21692ee1da9","modified":1605364847871},{"_id":"public/images/5-6.png","hash":"932acf8b9a8a7e683fcd8b5348c7c70feaa4289a","modified":1605364847871},{"_id":"public/images/images/background.jpeg","hash":"b15e521fe57a7bf04c8b3e5238a7a47a200fee04","modified":1605364847871},{"_id":"public/images/images/category-list.jpg","hash":"fb667b2775ce0f002f3607bba80fadfa3fa70732","modified":1605364847871},{"_id":"public/images/images/chart.png","hash":"7c03f615c426c89c51714a61cc290836f1180cc6","modified":1605364847871},{"_id":"public/images/images/comparison-sort-decision-tree.jpg","hash":"f186d8f00b58670903d6ac23776fb8c284b1cda0","modified":1605364847871},{"_id":"public/images/images/diy-design-php-mvc-framework-url-users.png","hash":"9762a10a5678e9a0c90f213b04f86f5418ce72d5","modified":1605364847871},{"_id":"public/images/images/evbuffer.png","hash":"f5d76e4c517af8d97b39be205fda0939c35671e9","modified":1605364847871},{"_id":"public/images/images/external_link.gif","hash":"fa11fa47062955f24f396e6a594e395513bf4338","modified":1605364847871},{"_id":"public/images/images/external_link_on.gif","hash":"3b7262c9f378d6e8e46074dfdc0de0b78573ced4","modified":1605364847871},{"_id":"public/images/images/gitgit.png","hash":"b9faa211a3ae53dd51e076a7d4c20497cff4e185","modified":1605364847871},{"_id":"public/images/images/hot.gif","hash":"e1faf988dd309c865ff6a2c89638c899a761d984","modified":1605364847871},{"_id":"public/images/images/icon_square.gif","hash":"c482b8adf7c2030afc07f7bc16caf9df5dce23f2","modified":1605364847871},{"_id":"public/images/images/icons.gif","hash":"478d2722262504858d68e51b433f19c89f4ff9d1","modified":1605364847871},{"_id":"public/images/images/invoke_chain.png","hash":"a1b772f8330bbc26197c13cb2552a4b297872bfa","modified":1605364847871},{"_id":"public/images/images/svn.png","hash":"4d842c1ee48c5282d3cf3331abcd10af6728816b","modified":1605364847871},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1605364847871},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1605364847871},{"_id":"public/images/images/chat-style.png","hash":"cf30cae78fb3eb8b4c348c9833247ad83e282e33","modified":1605364847871},{"_id":"public/images/images/chat.png","hash":"1f343ae1e102fcc0d69072dbe4089adaf32e3326","modified":1605364847871},{"_id":"public/images/images/git.gif","hash":"37406202f6fae32a4275c0d5304152f563a41f97","modified":1605364847871},{"_id":"public/images/images/gradle1.png","hash":"e2b6ed935302aa9db8cf41a7192ae37f699b6b25","modified":1605364847871},{"_id":"public/images/images/nodejs1.png","hash":"c1e7c50f00ede27e22f030299d9d9d4793c4cec2","modified":1605364847871},{"_id":"public/images/images/wechat.png","hash":"f74d7de7f71624010c6aa31cec752151f8805e20","modified":1605364847871},{"_id":"public/images/images/es/4.png","hash":"c08589095099cf647c7e4ac5277b39ce0b830cef","modified":1605364847871},{"_id":"public/images/images/githubpages/2013-01-20-build-github-blog-page-07-img4.png","hash":"403b9e53b35c580dc21b6763fb2cd1d07da9deee","modified":1605364847871},{"_id":"public/images/images/githubpages/bootcamp_1_ssh.jpg","hash":"3c7850abcba9265cc54a23b61c041fe15fd548ca","modified":1605364847871},{"_id":"public/images/images/githubpages/bootcamp_1_token.jpg","hash":"2b340f5df5a472df7511d09a527de118824f7626","modified":1605364847871},{"_id":"public/images/images/githubpages/bootcamp_1_win_gitbash.jpg","hash":"15d85176d1f6d24762ab94c9634e57f261d34f05","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-02-img0.png","hash":"a557bffda4fd65d210772ce54e56071eec9f218d","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-02-img1.png","hash":"9603ca15045be33c454d97f769915945002bfd80","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-03-img0.png","hash":"998cb9eac5e73b9921d6a3a1aa5af4056a9ef6c6","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-04-img0.png","hash":"85b32824f3b3bfff0818da4c95b60a4d54c5dbf7","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-05-img0.png","hash":"fe8c4a2bb57198d2f6e909eb47ad5cba4a8db694","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-05-img1.png","hash":"3dd51fd0d4f817b047fbfa360c7e24ddbebd25e3","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-06-img0.png","hash":"c34080469b54acf13c316965d9e44b7778ff8455","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-06-img1.png","hash":"967e5b6a4bc896feb5861d633677d28d497c1e9b","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-06-img5.png","hash":"c34b4e585477cecbc501699b7a7c376f6b1dace9","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-06-img4.png","hash":"346b0dd8b3a6d7039eeddfeb2e2a8ddc06061ad3","modified":1605364847871},{"_id":"public/images/images/githubpages/disqus-site.jpg","hash":"327912fd3340808ae83f2de4d0af1f536d2c03a4","modified":1605364847871},{"_id":"public/images/images/githubpages/github-account-setting.png","hash":"1a23b76d1b5e9af5362592fd092918a455c18777","modified":1605364847871},{"_id":"public/images/images/githubpages/image1.png","hash":"a557bffda4fd65d210772ce54e56071eec9f218d","modified":1605364847871},{"_id":"public/images/images/githubpages/level1.png","hash":"72bbc7abebf60b445d816c3c256e9d13d0f25cdf","modified":1605364847871},{"_id":"public/images/images/githubpages/level10.png","hash":"272ecf246582f4dbcd49319ced92a4a19aa3eb08","modified":1605364847871},{"_id":"public/images/images/githubpages/level11.png","hash":"1f3ca28e252e4d55e8e1096b9f426fcb7dbc74c7","modified":1605364847871},{"_id":"public/images/images/githubpages/level12.png","hash":"177c28594c8a1548c0f386b4e8719acb13aaae0f","modified":1605364847871},{"_id":"public/images/images/githubpages/level2.png","hash":"d815a2e8659b9ae0fe567dcfc7ea64a5f0cd03de","modified":1605364847871},{"_id":"public/images/images/githubpages/level4.png","hash":"c286c470697e16cce1d320c6745bd4ab71faffc2","modified":1605364847871},{"_id":"public/images/images/githubpages/level5.png","hash":"961f68342c92baedeea6297c1dbb7903815b5445","modified":1605364847871},{"_id":"public/images/images/githubpages/level6.png","hash":"8426a913b8f1a9f067f090b618b94ebdb6fd7817","modified":1605364847871},{"_id":"public/images/images/githubpages/level7.png","hash":"ad1973fe9f0511c0f3ad86456a5b2190d35e5429","modified":1605364847871},{"_id":"public/images/images/githubpages/level9.png","hash":"1807f4443289ed57a8615916f25ae4721086153c","modified":1605364847871},{"_id":"public/images/images/githubpages/level8.png","hash":"d8601f9676b3693085eb976492e73367a1cb8812","modified":1605364847871},{"_id":"public/images/images/githubpages/other-pages.png","hash":"6eb426e9ff72ee23429ebb6c703cac5858739d70","modified":1605364847871},{"_id":"public/images/images/githubpages/sitemap.jpg","hash":"112e49c46cb288a2984dc9c59f382abc968b4fe7","modified":1605364847871},{"_id":"public/images/images/githubpages/sitemap2.jpg","hash":"bfe5569e0cd7537d6f8d907368b9e7554a36bff9","modified":1605364847871},{"_id":"public/images/images/githubpages/skiplist1.jpg","hash":"dfa471c5760a45ee9d7f5e402710e21a49a7f984","modified":1605364847871},{"_id":"public/images/images/githubpages/skiplist2.jpg","hash":"a6796e9916a957fc4b7c2a1542d25c6294b4622d","modified":1605364847871},{"_id":"public/images/images/githubpages/skiplist3.jpg","hash":"576ef51356c9e18ffee57f9b64d6a69d39d47441","modified":1605364847871},{"_id":"public/images/images/githubpages/skiplist4.jpg","hash":"30687550a31db47db65da031db270e43791e542f","modified":1605364847871},{"_id":"public/images/images/githubpages/skiplist5.jpg","hash":"bbd27f6cc3266f4a218b4276d781188fa155e2bd","modified":1605364847871},{"_id":"public/images/images/githubpages/ssh-key-set.png","hash":"dd8616488ff62643cc061ff81ea47896aeae0962","modified":1605364847871},{"_id":"public/images/images/githubpages/user-pages.png","hash":"998b163d96a1d784a67f8bbfb781aebad4914a01","modified":1605364847871},{"_id":"public/images/images/http/1.jpeg","hash":"4cdc84391d6b83470f89b0af3d862854ead66fb5","modified":1605364847871},{"_id":"public/images/images/http/2.jpeg","hash":"473ef78a4c1a0ae746024a64c624d411b094afee","modified":1605364847871},{"_id":"public/images/images/http/4.jpeg","hash":"e1433050cbdb5cefa0f90cd6a50138fc8a728b47","modified":1605364847871},{"_id":"public/images/images/http/3.jpeg","hash":"6059d56023d4157dba4651ab84ee9b0a73db7c69","modified":1605364847871},{"_id":"public/images/images/java/2.jpeg","hash":"6fc2585a6fe671cf4649433d687603ac100ffada","modified":1605364847871},{"_id":"public/images/images/java/3.jpeg","hash":"39a25f7f54e1f0689d8261275c68ab5977f233e0","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp1.jpeg","hash":"4cb859aceeb1b2c1675af8228cfb2ca3e78813bf","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp7.jpeg","hash":"2ecf3883e46061728b622d15285fc78bd70228a8","modified":1605364847871},{"_id":"public/images/images/rainingchrome/RainingChrome.pem","hash":"93883ce669efb5b332b554acec3aa741b49c5c6c","modified":1605364847871},{"_id":"public/images/images/rainingchrome/update.xml","hash":"7e1bb4f211254cfac7a6610baa1e6da19b44c473","modified":1605364847871},{"_id":"public/images/images/rainingchrome/rain.jpg","hash":"0545ed4fb03dffcf5bed765da1a0ca1902d25031","modified":1605364847871},{"_id":"public/images/images/turn/fold.png","hash":"b7280f9bdca26fb2520d66c809a70b4417a11ebc","modified":1605364847871},{"_id":"public/images/pages/log4j/appender.png","hash":"71586030599dbf195591f0380fa3314202fc2c56","modified":1605364847871},{"_id":"public/images/pages/log4j/logger.png","hash":"5cfd72153c7fd45df13fe01ab9f1a9bc8ccb5b1b","modified":1605364847871},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1605364847871},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1605364847871},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1605364847871},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1605364847871},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1605364847871},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1605364847871},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1605364847871},{"_id":"public/images/images/es/1.png","hash":"d5de1c33ac20b1af2b114fc85fbc8e5effdcfa68","modified":1605364847871},{"_id":"public/images/images/es/2.png","hash":"c600b61ce53c41a70181cd64ff71c6ca267980d2","modified":1605364847871},{"_id":"public/images/images/githubpages/2013-01-20-build-github-blog-page-07-img0.jpeg","hash":"707208deaa19ff9ca617074d4f6c57b63544bd20","modified":1605364847871},{"_id":"public/images/images/githubpages/2013-01-20-build-github-blog-page-07-img1.png","hash":"c5d8e058a8ea01c967e67dcfbff84153ab64e011","modified":1605364847871},{"_id":"public/images/images/githubpages/2013-01-20-build-github-blog-page-07-img2.png","hash":"891806282da542b13f00ea2ab9e71a11cbd9c3e0","modified":1605364847871},{"_id":"public/images/images/java/1.jpeg","hash":"b6af2f50788c803c13a273786aa3a288e84b29aa","modified":1605364847871},{"_id":"public/images/images/turn/code.png","hash":"efae5c6e92ba2db26eb861ff4dd6b69baccf637b","modified":1605364847871},{"_id":"public/images/images/es/3.png","hash":"d2ce6b67637c4e11db19d20507bcacf8d3c933af","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph1.jpg","hash":"c89cb24637edf1c08a85653216f97f608a1ed8fe","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph11.jpg","hash":"d796e58c2564a378b69f57a6803235df7ec1e170","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph2.jpg","hash":"e2cbf64d610fc5f246c5a52ada4cae69d7580e0c","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph4.jpg","hash":"066eb041a2d6e1833cff50fb3445c95829b48a07","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph7.jpg","hash":"d8784fc086d8337075087df620ce5c6665a31e19","modified":1605364847871},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph3.jpg","hash":"d837c18ea3bfd43bf19791dc3f011ecca75fb839","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph5.jpg","hash":"03cd187147bfa7e82954163e0d2ce795bf4bcac4","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph6.jpg","hash":"0e7bc85699a102de3f37f3d2ebdd31986c961c94","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph8.jpg","hash":"8478898e264ce79ee04b272ee9c4462b6a68cf7c","modified":1605364847871},{"_id":"public/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png","hash":"a74cf145ca07f38757d5c724a248d5a5020cea35","modified":1605364847871},{"_id":"public/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png","hash":"41b0603bf57c9ec0e85f24d19c264a112fa60b14","modified":1605364847871},{"_id":"public/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png","hash":"cb1721b476c9b7f9cd902eb477ee9d67551ce103","modified":1605364847871},{"_id":"public/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png","hash":"7e1357472cf1bd25acf442bccc4fb589518fcf46","modified":1605364847871},{"_id":"public/images/go_20200408_3.png","hash":"f4af70b86bd602d907f1245402cb32ac371a38dc","modified":1605364847871},{"_id":"public/images/go_20200706_p1.png","hash":"ec342bb3c62688c2e508aeb50f05135901dba51a","modified":1605364847871},{"_id":"public/images/go_20200706_p2.png","hash":"4617ffad56768a5ba76af8610762c1c9e40754b3","modified":1605364847871},{"_id":"public/images/go_20200723_p1.jpg","hash":"2a9f483f58228f30097e53d96458b1a7eaf1ec37","modified":1605364847871},{"_id":"public/images/interview_2020080401.png","hash":"a615c5265fb2ef9aa370421331574e9ef50b0c68","modified":1605364847871},{"_id":"public/images/interview_2020080403.png","hash":"bf08921c185246f4247ad2566aee16fefa53907a","modified":1605364847871},{"_id":"public/images/interview_2020080404.png","hash":"5b10e5554425e27b1c60443569e91daba00639a8","modified":1605364847871},{"_id":"public/images/interview_2020080405.png","hash":"50cb4fca9ceb5ad35a88b9bf44b9caacddc12264","modified":1605364847871},{"_id":"public/images/interview_2020080406.png","hash":"a9a6f950696c7e29d14c705286d1538e6438d6de","modified":1605364847871},{"_id":"public/images/interview_2020080407.png","hash":"1e52e4b5cfb1d8e4a066aba74227399af120c93c","modified":1605364847871},{"_id":"public/images/linuxkernel_20200307_1.jpeg","hash":"1e3573ac8a955f7b8f00d2c118d1edd5f590d28d","modified":1605364847871},{"_id":"public/images/interview_2020080503.png","hash":"7e9f2934447f1eb15d052a4426d2826bf8abac2c","modified":1605364847871},{"_id":"public/images/project_seckill_2020080201.png","hash":"55a4955fee09a834ee3bd7010f29d8b09d4d9510","modified":1605364847871},{"_id":"public/images/project_seckill_2020080202.png","hash":"d8c2b42e00812aceec91c3d640555b41d673c36f","modified":1605364847871},{"_id":"public/images/linuxkernel_20200308_2.jpeg","hash":"4d4a6f2cf436bf3da1bd9937eb459d1b63b39ff3","modified":1605364847871},{"_id":"public/images/404.png","hash":"9c41141a83ab032005b7b7394dd67bf29594925b","modified":1605364847871},{"_id":"public/images/5-9.png","hash":"264a65d2b988d25926b8064ddfadc979464f074f","modified":1605364847871},{"_id":"public/images/dag10.png","hash":"9dbc392f37fc12d7887a5d7afbc59df09d247634","modified":1605364847871},{"_id":"public/images/drawableimport.png","hash":"7f2ea6aaec441e52b913a9ba3a6872d340446e91","modified":1605364847871},{"_id":"public/images/elasticsearch_github.png","hash":"0e6ff24557708c7ae636f9978d02fb187052b412","modified":1605364847871},{"_id":"public/images/indexing source.png","hash":"8153d8eabc6eccf93f99d9fa66d5aaa86994945a","modified":1605364847871},{"_id":"public/images/leak.png","hash":"4acc2845f13c33d997cfab2befd9755f89ac4a8d","modified":1605364847871},{"_id":"public/images/jdgui.png","hash":"01578f934d35c2ab2cabf2e3db4c21d78b90b45b","modified":1605364847871},{"_id":"public/images/parcelable_generator.png","hash":"eb66e87a2a9c0f81417b781d3c9a5f6f31297b12","modified":1605364847871},{"_id":"public/images/preview.png","hash":"b5faf1f39689ababdd821f9757c3ad1e7cda9169","modified":1605364847871},{"_id":"public/images/volley.png","hash":"ac36616c5f632146c47567a8d0087c0475e09b7d","modified":1605364847871},{"_id":"public/images/wechat-reward-img.jpg","hash":"895053e2cb225f6d906318c547cd5955f1165d27","modified":1605364847871},{"_id":"public/images/apktool2.png","hash":"d45c5e720107f434a9d1aa0c71d2d71778eb22ac","modified":1605364847871},{"_id":"public/images/images/111.gif","hash":"5c7f16623ae13ee1c6a3e02673449f4485d2976c","modified":1605364847871},{"_id":"public/images/images/333.gif","hash":"22f08b1a833d3344edfab063254d6644092259e3","modified":1605364847871},{"_id":"public/images/images/222.gif","hash":"0e72ea963c56009d500ae4bc96193cebb8a80801","modified":1605364847871},{"_id":"public/images/images/btrace.png","hash":"bc0f8307354368efa30ec69cb847e4e5b9a8831f","modified":1605364847871},{"_id":"public/images/images/nodejs2.png","hash":"ca75aea64ce029009e4d901c31b8e459ebb0f575","modified":1605364847871},{"_id":"public/images/images/tmux.jpg","hash":"ed748eaaf440a6ad1089741cf0a280138522f3d5","modified":1605364847871},{"_id":"public/images/images/tmux2.jpg","hash":"279a56abdc6be3576606c97308b2f4ad2b884b47","modified":1605364847871},{"_id":"public/images/pages/ashenna.png","hash":"46ea209d9c1c8862198a685e7013f2a8cfdbb385","modified":1605364847871},{"_id":"public/images/images/node-file-server-output.png","hash":"727bcf7f3dc0b5bdca9e02105f2aa5227db3503f","modified":1605364847871},{"_id":"public/images/images/githubpages/level3.png","hash":"2c2da3b928ba33280d3577f9d691fe4e7920b56d","modified":1605364847871},{"_id":"public/images/images/image001.png","hash":"b6764e39c9288c8ac1ef0ff415ca3746127f9f79","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp11.jpeg","hash":"2d5cff5581db0f7054287e811266d03af3f054bb","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp2.jpeg","hash":"28c1ecd918446c6873ef64980eb7edc288376217","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp3.jpeg","hash":"1e2879a1d23146d7e28c8eaa52ba645f28f051d5","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp4.jpeg","hash":"4bdde3c7e8f77e572514b3d294053bbb4ece3710","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp5.jpeg","hash":"c5e9882fd5be4b4f1794962dc5f022f0e7e38dfc","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp6.jpeg","hash":"3a19522aa5e115d95416ba5f62c67eda45125562","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp8.jpeg","hash":"905bee6371fee9b3e1d65abc25bb02f4a9d8a56e","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp9.jpeg","hash":"8d34c0b01fb20432f037602e72252c144138a197","modified":1605364847871},{"_id":"public/images/images/turn/fold-sw.png","hash":"2a24da1ddab77d41a5b66a6444199340b7894ac6","modified":1605364847871},{"_id":"public/images/pages/linux/linux06.png","hash":"d1c10774bf41e6ce7a73c1b7b03a5337c7285658","modified":1605364847871},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1605364847871},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-01-img0.png","hash":"59948d6bce8e17370f7d5e89d230f5d803110682","modified":1605364847871},{"_id":"public/images/images/githubpages/build-github-blog-page-06-img2.png","hash":"8088be6841f4d14daf6b3bcd900d2a0bf4c95ea7","modified":1605364847871},{"_id":"public/images/images/http/0.jpeg","hash":"4563cad08da119375c9e84a1fd6ad9fc745469c8","modified":1605364847871},{"_id":"public/images/images/openfire/xmpp10.jpeg","hash":"9c24c5f839f68e1d069cd97836bcf654b926bd08","modified":1605364847871},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph9.jpg","hash":"c1f286a9155e290920cd428779c47f589be1dbbb","modified":1605364847871},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1605364847871},{"_id":"public/images/images/githubpages/2013-01-20-build-github-blog-page-07-img3.png","hash":"1a78ea1ce6b73526de1e28e34d84098fcc83f5a9","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph10.jpg","hash":"9562528143a947bb03bc04f5a1c58cd6d62ed49f","modified":1605364847871},{"_id":"public/js/dynamic_bg.js","hash":"51058877e9f910320b765748d9096b542af7c38c","modified":1605364847871},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1605364847871},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1605364847871},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1605364847871},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1605364847871},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1605364847871},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1605364847871},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1605364847871},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1605364847871},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1605364847871},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1605364847871},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1605364847871},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1605364847871},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1605364847871},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1605364847871},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1605364847871},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1605364847871},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1605364847871},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1605364847871},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1605364847871},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1605364847871},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1605364847871},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1605364847871},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1605364847871},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1605364847871},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1605364847871},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1605364847871},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1605364847871},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1605364847871},{"_id":"public/README.html","hash":"470f87c511a9a0a0646adc742768afc58e4eba6d","modified":1605364847871},{"_id":"public/google41eca6f1588fb155.html","hash":"e8e00afcc83b7d59921e3c8d12418d035ba992c1","modified":1605364847871},{"_id":"public/lib/fastclick/README.html","hash":"53ba985c4d13570d327e017202ee21b26c3d853b","modified":1605364847871},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"21148fb436003ecbf58f74d6f479a27063dc5fef","modified":1605364847871},{"_id":"public/lib/jquery_lazyload/README.html","hash":"be67b9bb6e5baee0eeca5625c0d392835d16a3c0","modified":1605364847871},{"_id":"public/404.html","hash":"edc7614d2b2130bb7c29da9888918ab81769d840","modified":1605364847871},{"_id":"public/css/main.css","hash":"43bf86c98848e7306270ef89de5268a6a9ff331f","modified":1605364847871},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1605364847871},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1605364847871},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1605364847871},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1605364847871},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1605364847871},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1605364847871},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1605364847871},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1605364847871},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1605364847871},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1605364847871},{"_id":"public/images/alipay-reward-img.jpg","hash":"1a1d267592ee97e5a1e32a34a0535ad4a33580ac","modified":1605364847871},{"_id":"public/images/codota.png","hash":"12b755a0fcb21d7a337dfeaa50c15d7575478fcd","modified":1605364847871},{"_id":"public/images/holocolor.png","hash":"126bcbfc6f9da11dc84816ee458ba6db497d4fd0","modified":1605364847871},{"_id":"public/images/apktool1.png","hash":"8205935d0cab79fba1e15783a9a4e66756a83cc0","modified":1605364847871},{"_id":"public/images/pages/linux/linux05.png","hash":"c2551996b2761a681d3472ea491ed220bf5eaf0a","modified":1605364847871},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1605364847871},{"_id":"public/images/linuxkernel_20200308_4.jpeg","hash":"1629e856ec5da2b65243f202f073e16cb8bb7dd9","modified":1605364847871},{"_id":"public/images/mysql_20200714_p1.png","hash":"e7b2961c61ec155ac6c3b6c11cfb49fe9c073ee0","modified":1605364847871},{"_id":"public/images/interview_2020080504.png","hash":"07bf5820d7f57c961bf1b5664930b6d839aeeb6a","modified":1605364847871},{"_id":"public/images/images/daovoice.png","hash":"91c8fc9d1187729416e8a54bb1126d88922aae2c","modified":1605364847871},{"_id":"public/images/images/cardtable.png","hash":"7e160d40f94d6c627d7e9e80ff7eeab74fd23f22","modified":1605364847871},{"_id":"public/images/pages/log4j/logger-trace.png","hash":"f37498e1ff42faa2f930799e5ffdcb995ac9013d","modified":1605364847871},{"_id":"public/images/pages/linux/linux03.png","hash":"6c0fa0b450f67b7206a6a3b78015e3674127d8d1","modified":1605364847871},{"_id":"public/images/butterknife.gif","hash":"1c66b41f49f5007a59b619a82bc0e0326828a935","modified":1605364847871},{"_id":"public/images/pages/log4j/loggers.png","hash":"412e83f0b7c58fd88c8155f599ceb135e59acb47","modified":1605364847871},{"_id":"public/images/images/githubpages/skiplist6.jpg","hash":"956fe6de73f814fb3871e50eb5d3581cee82a3d5","modified":1605364847871},{"_id":"public/images/background.jpg","hash":"d7462c4e39fb359a2521cbcb853e6936c0971fc6","modified":1605364847871},{"_id":"public/images/pages/linux/linux02.png","hash":"1ed006e7580ffa08c7efacf9e4a3df57faaa8e56","modified":1605364847871},{"_id":"public/images/pages/linux/linux01.png","hash":"429d7094d7ce04b0df5e3a4863cf62ac84a1f1a0","modified":1605364847871},{"_id":"public/images/project_seckill_2020080401.png","hash":"7a79a3075146a38be91fac77918c018471808c28","modified":1605364847871},{"_id":"public/images/mysql_p1_20200304092002.png","hash":"3e519e1e5f09431bde5abc94e7428c573f07808e","modified":1605364847871},{"_id":"public/images/pages/linux/linux04.png","hash":"1e5bd18c2a282b9c7895cccd6901745fdc6bbcd6","modified":1605364847871},{"_id":"public/images/linuxkernel_20200306_2.jpeg","hash":"698c53009fbbf31ef47dbaf7cd8cd2c1a4135d42","modified":1605364847871},{"_id":"public/images/linuxkernel_20200308_3.jpeg","hash":"6ff41b984b7e014eb9dd617199241af2fddb28e0","modified":1605364847871},{"_id":"public/images/linuxkernel_20200306.jpeg","hash":"b2c1b8ebd351c33b7aac5fc89e9137f0cd3bc275","modified":1605364847871},{"_id":"public/images/project_seckill_2020073001.png","hash":"792465e46e530bad1dcc1cd66679e80a8013cd07","modified":1605364847871},{"_id":"public/images/images/node-source.png","hash":"f80b4f575f2940a85b51a8c474389c9533292dce","modified":1605364847871},{"_id":"public/images/linuxkernel_20200308_5.jpeg","hash":"c8e48cedf3a5b4d0aafec72e4039f2a14c5da3d2","modified":1605364847871},{"_id":"public/images/classshark.png","hash":"8414c43333cbeb4fec80037e8d953b119d8c5ce0","modified":1605364847871},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1605364847871},{"_id":"public/images/images/img2txt.jpg","hash":"89243b3b789b0332725921c02a98ece91199ae45","modified":1605364847871},{"_id":"public/images/linuxkernel_20200308_1.jpeg","hash":"9cd6dc2ce34dca9b9b68482c690665254fac7a87","modified":1605364847871},{"_id":"public/images/images/githubpages/level13.png","hash":"74a999f07c372670af35d21924240a2a5dda8a9e","modified":1605364847871},{"_id":"public/images/gson_format.gif","hash":"254a32bf2dc17736f5ad3c4b6689fa159506eefd","modified":1605364847871},{"_id":"public/images/images/githubpages/graph/graph12.jpg","hash":"9a469a57ff8c30e94e5b0eaeb7edf83b577fb4e1","modified":1605364847871},{"_id":"public/images/linuxkernel_20200306_1.jpeg","hash":"30d6cf1755afc5efe4fc06f7f61ea49950378a97","modified":1605364847871},{"_id":"public/images/images/rainingchrome/RainingChrome.crx","hash":"7ee45dee57cceab0b456c421259da36330849c9c","modified":1605364847871},{"_id":"public/images/capture.gif","hash":"61d04b94eb7428488a3ca52dd8cee49c8334d4a8","modified":1605364847871}],"Category":[{"name":"c++","_id":"ckhhss4vh000454ynbpmq50o2"},{"name":"go","_id":"ckhhss4vo000e54yn6r8dd54f"},{"name":"Linux","_id":"ckhhss4vr000l54ynhfengdsa"},{"name":"中间件","_id":"ckhhss4w1001a54yn2sakhw34"},{"name":"微服务","_id":"ckhhss4w6001r54yngieueue1"},{"name":"project","_id":"ckhhss4w7001x54yn6n5w30wr"},{"name":"linux内核","_id":"ckhhss4wa002154yn8rj7a459"},{"name":"tools","_id":"ckhhss51m002854yna3kvbqo3"},{"name":"协议","_id":"ckhhss51n002b54yn1qks95jd"}],"Data":[],"Page":[{"title":"categories","date":"2020-01-09T04:02:42.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-09 12:02:42\ntype: \"categories\"                                                               \ncomments: false   \n---\n","updated":"2020-01-09T06:31:33.000Z","path":"categories/index.html","layout":"page","_id":"ckhhss4vd000154ynarvi3qf5","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"},{"title":"tags","date":"2020-02-16T05:50:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-02-16 13:50:26\ntype: \"tags\"\n---\n","updated":"2020-02-16T05:50:52.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckhhss4vf000354yn7aij2v60","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"}],"Post":[{"title":"c++中对象数组初始化问题","date":"2020-07-26T02:10:32.000Z","_content":"\n\n如果对象数组中没有默认构造函数，要像下面这样初始化:\n```cpp\n#include <iostream>\nclass A{\npublic:\n    A(int* p)\n       : p_(p){\n        std::cout << \"A\" << std::endl;  \n    }   \nprivate:\n    int *p_;\n};\nint main(){\n   int i;\n   A a[3] = {&i, &i, &i}; //如果有100万个元素就要写100万个&i\n}\n```\n有两种解决思路\n*  使用std::array 和 std::index_sequence\n*  利用宏自动生成100万个&i\n\n\n### 利用 std::array 和 std::index_sequence\n```cpp\n#include <iostream>\n#include <utility> \n#include <array>\n#include <algorithm>\n\nstruct foo_t{\n    foo_t(int* i)\n     : i_(i){\n        std::cout << \"foo_t\" << std::endl; \n    }\n    foo_t(const foo_t& obj){\n        std::cout << \"foo_t copy\" << std::endl; \n        i_ = obj.i_; \n    }\n   int* i_;\n};\n\nfoo_t make_foo(int* i)\n{\n    return foo_t(i);  //这里如果使用std::forward等于将右值转为左值,左值生成一个副本，多了一次拷贝\n}\n    \n\ntemplate<size_t...Is>\nstd::array<foo_t, sizeof...(Is)> make_foos(std::index_sequence<Is...>, int* i) {\n    return { (Is, make_foo(i))... };\n}\n\ntemplate<size_t N>\nstd::array<foo_t, N> make_foos(int* i) {\n    return make_foos(std::make_index_sequence<N>(), i);\n}\n    \t\n\nint main(){\n    int i = 1;\n    std::array<foo_t, 10> a = make_foos<10>(&i);  //返回值不会有拷贝，详见\t\t\t\t\t\t\t\t\t\t\t\t\t\trvo\n    return 0;\n}\n```\n但是这种方式也有缺陷，当元素为100万时编译速度很慢, gcc异常退出 \n\n\n### 使用宏展开 \n参考ttl库的实现   \n```cpp\n#include <iostream>\n#include <string>\n\n#define TTL_LAST_REPEAT_0(m,p)\n#define TTL_LAST_REPEAT_1(m,p) m(1,p)\n#define TTL_LAST_REPEAT_2(m,p) m(2,p)\n#define TTL_LAST_REPEAT_3(m,p) m(3,p)\n#define TTL_LAST_REPEAT_4(m,p) m(4,p)\n#define TTL_LAST_REPEAT_5(m,p) m(5,p)\n#define TTL_LAST_REPEAT_6(m,p) m(6,p)\n#define TTL_LAST_REPEAT_7(m,p) m(7,p)\n#define TTL_LAST_REPEAT_8(m,p) m(8,p)\n#define TTL_LAST_REPEAT_9(m,p) m(9,p)\n#define TTL_LAST_REPEAT_10(m,p) m(10,p)\n\n#define TTL_REPEAT_0(m,l,p)\n#define TTL_REPEAT_1(m,l,p) TTL_REPEAT_0(m,l,p) m(1,p)\n#define TTL_REPEAT_2(m,l,p) TTL_REPEAT_1(m,l,p) m(2,p)\n#define TTL_REPEAT_3(m,l,p) TTL_REPEAT_2(m,l,p) m(3,p)\n#define TTL_REPEAT_4(m,l,p) TTL_REPEAT_3(m,l,p) m(4,p)\n#define TTL_REPEAT_5(m,l,p) TTL_REPEAT_4(m,l,p) m(5,p)\n#define TTL_REPEAT_6(m,l,p) TTL_REPEAT_5(m,l,p) m(6,p)\n#define TTL_REPEAT_7(m,l,p) TTL_REPEAT_6(m,l,p) m(7,p)\n#define TTL_REPEAT_8(m,l,p) TTL_REPEAT_7(m,l,p) m(8,p)\n#define TTL_REPEAT_9(m,l,p) TTL_REPEAT_8(m,l,p) m(9,p)\n#define TTL_REPEAT_10(m,l,p) TTL_REPEAT_9(m,l,p) m(10,p)\n\n#define TTL_CNTDEC_0 0\n#define TTL_CNTDEC_1 0\n#define TTL_CNTDEC_2 1\n#define TTL_CNTDEC_3 2\n#define TTL_CNTDEC_4 3\n#define TTL_CNTDEC_5 4\n#define TTL_CNTDEC_6 5\n#define TTL_CNTDEC_7 6\n#define TTL_CNTDEC_8 7\n#define TTL_CNTDEC_9 8\n#define TTL_CNTDEC_10 9\n\n#define TTL_APPEND( x, y ) TTL_APPEND1(x,y) \n#define TTL_APPEND1( x, y ) x ## y\n#define TTL_DEC(n) TTL_APPEND(TTL_CNTDEC_, n)\n\n#define TTL_REPEAT(n, m, l, p) TTL_APPEND(TTL_REPEAT_, TTL_DEC(n))(m,l,p) TTL_APPEND(TTL_LAST_REPEAT_,n)(l,p)\n#define TTL_TPARAM(n,t)  t,\n#define TTL_TPARAM_END(n,t) t\n#define TTL_TPARAMSX(n,t) TTL_REPEAT(n, TTL_TPARAM, TTL_TPARAM_END, t)\n#define TTL_TPARAMS(n, T) TTL_TPARAMSX(n,T)\n\n#define TO_STRING( x ) TO_STRING1( x )\n#define TO_STRING1( x ) #x\n\nclass A{\npublic:\n    A(int* i)\n    :i_(i){\n        std::cout << \"A\" << std::endl; \n    }\n\t\n\tint * i_;\n};\n\nint main(){\n//  std::cout << TO_STRING(TTL_TPARAMSX(1, &i)) << std::endl;\n    int i = 1;\n    A a[10] = {TTL_TPARAMSX(10, &i)};\n\n    return 0;\n}\n\n\n```\n### 使用placement new  \n```cpp\n#include <iostream>\n#include <type_traits>\n\nclass A{\npublic:\n    A(int* p)\n        : p_(p){\n            std::cout << \"A\" << std::endl;\n    }\nprivate:\n    int *p_;\n};\n\nint main(){\n    using elemType = std::aligned_storage<sizeof(A), alignof(A)>::type;\n    const size_t count = 1000000;\n\n    int i;\n    elemType a[count];\n    \n    for(int idx = 0; idx < count: ++idx) {\n         new (&a[idx]) A(&i);\n    }\n    \n    ...\n    \n    for(int idx = 0; idx < count: ++idx) {\n         reinterpret_cast<A&>(a[idx]).~A();\n    }\n    \n    return 0;\n}\n```\n\n参考:   \n[initialize an array of object in c++ ](https://stackoverflow.com/questions/63068079/initialize-an-array-of-object-in-c)  \n[代码自动生成-宏带来的奇技淫巧](http://www.cppblog.com/kevinlynx/archive/2008/03/19/44828.aspx)  \n[用C语言宏批量生成代码的思考与实现](https://zhou-yuxin.github.io/articles/2016/%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%AE%8F%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E7%8E%B0/index.html)\n\n\n\n\n\n\n\n\n\n","source":"_posts/cpp中对象数组初始化问题.md","raw":"---\ntitle: c++中对象数组初始化问题\ndate: 2020-07-26 10:10:32\ntags:\ncategories:\n    - c++\n---\n\n\n如果对象数组中没有默认构造函数，要像下面这样初始化:\n```cpp\n#include <iostream>\nclass A{\npublic:\n    A(int* p)\n       : p_(p){\n        std::cout << \"A\" << std::endl;  \n    }   \nprivate:\n    int *p_;\n};\nint main(){\n   int i;\n   A a[3] = {&i, &i, &i}; //如果有100万个元素就要写100万个&i\n}\n```\n有两种解决思路\n*  使用std::array 和 std::index_sequence\n*  利用宏自动生成100万个&i\n\n\n### 利用 std::array 和 std::index_sequence\n```cpp\n#include <iostream>\n#include <utility> \n#include <array>\n#include <algorithm>\n\nstruct foo_t{\n    foo_t(int* i)\n     : i_(i){\n        std::cout << \"foo_t\" << std::endl; \n    }\n    foo_t(const foo_t& obj){\n        std::cout << \"foo_t copy\" << std::endl; \n        i_ = obj.i_; \n    }\n   int* i_;\n};\n\nfoo_t make_foo(int* i)\n{\n    return foo_t(i);  //这里如果使用std::forward等于将右值转为左值,左值生成一个副本，多了一次拷贝\n}\n    \n\ntemplate<size_t...Is>\nstd::array<foo_t, sizeof...(Is)> make_foos(std::index_sequence<Is...>, int* i) {\n    return { (Is, make_foo(i))... };\n}\n\ntemplate<size_t N>\nstd::array<foo_t, N> make_foos(int* i) {\n    return make_foos(std::make_index_sequence<N>(), i);\n}\n    \t\n\nint main(){\n    int i = 1;\n    std::array<foo_t, 10> a = make_foos<10>(&i);  //返回值不会有拷贝，详见\t\t\t\t\t\t\t\t\t\t\t\t\t\trvo\n    return 0;\n}\n```\n但是这种方式也有缺陷，当元素为100万时编译速度很慢, gcc异常退出 \n\n\n### 使用宏展开 \n参考ttl库的实现   \n```cpp\n#include <iostream>\n#include <string>\n\n#define TTL_LAST_REPEAT_0(m,p)\n#define TTL_LAST_REPEAT_1(m,p) m(1,p)\n#define TTL_LAST_REPEAT_2(m,p) m(2,p)\n#define TTL_LAST_REPEAT_3(m,p) m(3,p)\n#define TTL_LAST_REPEAT_4(m,p) m(4,p)\n#define TTL_LAST_REPEAT_5(m,p) m(5,p)\n#define TTL_LAST_REPEAT_6(m,p) m(6,p)\n#define TTL_LAST_REPEAT_7(m,p) m(7,p)\n#define TTL_LAST_REPEAT_8(m,p) m(8,p)\n#define TTL_LAST_REPEAT_9(m,p) m(9,p)\n#define TTL_LAST_REPEAT_10(m,p) m(10,p)\n\n#define TTL_REPEAT_0(m,l,p)\n#define TTL_REPEAT_1(m,l,p) TTL_REPEAT_0(m,l,p) m(1,p)\n#define TTL_REPEAT_2(m,l,p) TTL_REPEAT_1(m,l,p) m(2,p)\n#define TTL_REPEAT_3(m,l,p) TTL_REPEAT_2(m,l,p) m(3,p)\n#define TTL_REPEAT_4(m,l,p) TTL_REPEAT_3(m,l,p) m(4,p)\n#define TTL_REPEAT_5(m,l,p) TTL_REPEAT_4(m,l,p) m(5,p)\n#define TTL_REPEAT_6(m,l,p) TTL_REPEAT_5(m,l,p) m(6,p)\n#define TTL_REPEAT_7(m,l,p) TTL_REPEAT_6(m,l,p) m(7,p)\n#define TTL_REPEAT_8(m,l,p) TTL_REPEAT_7(m,l,p) m(8,p)\n#define TTL_REPEAT_9(m,l,p) TTL_REPEAT_8(m,l,p) m(9,p)\n#define TTL_REPEAT_10(m,l,p) TTL_REPEAT_9(m,l,p) m(10,p)\n\n#define TTL_CNTDEC_0 0\n#define TTL_CNTDEC_1 0\n#define TTL_CNTDEC_2 1\n#define TTL_CNTDEC_3 2\n#define TTL_CNTDEC_4 3\n#define TTL_CNTDEC_5 4\n#define TTL_CNTDEC_6 5\n#define TTL_CNTDEC_7 6\n#define TTL_CNTDEC_8 7\n#define TTL_CNTDEC_9 8\n#define TTL_CNTDEC_10 9\n\n#define TTL_APPEND( x, y ) TTL_APPEND1(x,y) \n#define TTL_APPEND1( x, y ) x ## y\n#define TTL_DEC(n) TTL_APPEND(TTL_CNTDEC_, n)\n\n#define TTL_REPEAT(n, m, l, p) TTL_APPEND(TTL_REPEAT_, TTL_DEC(n))(m,l,p) TTL_APPEND(TTL_LAST_REPEAT_,n)(l,p)\n#define TTL_TPARAM(n,t)  t,\n#define TTL_TPARAM_END(n,t) t\n#define TTL_TPARAMSX(n,t) TTL_REPEAT(n, TTL_TPARAM, TTL_TPARAM_END, t)\n#define TTL_TPARAMS(n, T) TTL_TPARAMSX(n,T)\n\n#define TO_STRING( x ) TO_STRING1( x )\n#define TO_STRING1( x ) #x\n\nclass A{\npublic:\n    A(int* i)\n    :i_(i){\n        std::cout << \"A\" << std::endl; \n    }\n\t\n\tint * i_;\n};\n\nint main(){\n//  std::cout << TO_STRING(TTL_TPARAMSX(1, &i)) << std::endl;\n    int i = 1;\n    A a[10] = {TTL_TPARAMSX(10, &i)};\n\n    return 0;\n}\n\n\n```\n### 使用placement new  \n```cpp\n#include <iostream>\n#include <type_traits>\n\nclass A{\npublic:\n    A(int* p)\n        : p_(p){\n            std::cout << \"A\" << std::endl;\n    }\nprivate:\n    int *p_;\n};\n\nint main(){\n    using elemType = std::aligned_storage<sizeof(A), alignof(A)>::type;\n    const size_t count = 1000000;\n\n    int i;\n    elemType a[count];\n    \n    for(int idx = 0; idx < count: ++idx) {\n         new (&a[idx]) A(&i);\n    }\n    \n    ...\n    \n    for(int idx = 0; idx < count: ++idx) {\n         reinterpret_cast<A&>(a[idx]).~A();\n    }\n    \n    return 0;\n}\n```\n\n参考:   \n[initialize an array of object in c++ ](https://stackoverflow.com/questions/63068079/initialize-an-array-of-object-in-c)  \n[代码自动生成-宏带来的奇技淫巧](http://www.cppblog.com/kevinlynx/archive/2008/03/19/44828.aspx)  \n[用C语言宏批量生成代码的思考与实现](https://zhou-yuxin.github.io/articles/2016/%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%AE%8F%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E7%8E%B0/index.html)\n\n\n\n\n\n\n\n\n\n","slug":"cpp中对象数组初始化问题","published":1,"updated":"2020-07-26T02:17:06.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4va000054ync37b28cd","content":"<p>如果对象数组中没有默认构造函数，要像下面这样初始化: <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span>* p)</span><br><span class=\"line\">       : p_(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">   A a[<span class=\"number\">3</span>] = &#123;&amp;i, &amp;i, &amp;i&#125;; <span class=\"comment\">//如果有100万个元素就要写100万个&amp;i</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 有两种解决思路 * 使用std::array 和 std::index_sequence * 利用宏自动生成100万个&amp;i</p>\n<h3 id=\"利用-stdarray-和-stdindex_sequence\">利用 std::array 和 std::index_sequence</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo_t</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">foo_t</span>(<span class=\"keyword\">int</span>* i)</span><br><span class=\"line\">     : i_(i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo_t\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foo_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">foo_t</span>&amp; obj)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo_t copy\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">        i_ = obj.i_; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">int</span>* i_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foo_t</span> make_foo(<span class=\"keyword\">int</span>* i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">foo_t</span>(i);  <span class=\"comment\">//这里如果使用std::forward等于将右值转为左值,左值生成一个副本，多了一次拷贝</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">size_t</span>...Is&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">foo_t</span>, <span class=\"keyword\">sizeof</span>...(Is)&gt; make_foos(<span class=\"built_in\">std</span>::index_sequence&lt;Is...&gt;, <span class=\"keyword\">int</span>* i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; (Is, make_foo(i))... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">size_t</span> N&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">foo_t</span>, N&gt; make_foos(<span class=\"keyword\">int</span>* i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_foos(<span class=\"built_in\">std</span>::make_index_sequence&lt;N&gt;(), i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">foo_t</span>, 10&gt; a = make_foos&lt;<span class=\"number\">10</span>&gt;(&amp;i);  <span class=\"comment\">//返回值不会有拷贝，详见\t\t\t\t\t\t\t\t\t\t\t\t\t\trvo</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这种方式也有缺陷，当元素为100万时编译速度很慢, gcc异常退出</p>\n<h3 id=\"使用宏展开\">使用宏展开</h3>\n<p>参考ttl库的实现<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_0(m,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_1(m,p) m(1,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_2(m,p) m(2,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_3(m,p) m(3,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_4(m,p) m(4,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_5(m,p) m(5,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_6(m,p) m(6,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_7(m,p) m(7,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_8(m,p) m(8,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_9(m,p) m(9,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_10(m,p) m(10,p)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_0(m,l,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_1(m,l,p) TTL_REPEAT_0(m,l,p) m(1,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_2(m,l,p) TTL_REPEAT_1(m,l,p) m(2,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_3(m,l,p) TTL_REPEAT_2(m,l,p) m(3,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_4(m,l,p) TTL_REPEAT_3(m,l,p) m(4,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_5(m,l,p) TTL_REPEAT_4(m,l,p) m(5,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_6(m,l,p) TTL_REPEAT_5(m,l,p) m(6,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_7(m,l,p) TTL_REPEAT_6(m,l,p) m(7,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_8(m,l,p) TTL_REPEAT_7(m,l,p) m(8,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_9(m,l,p) TTL_REPEAT_8(m,l,p) m(9,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_10(m,l,p) TTL_REPEAT_9(m,l,p) m(10,p)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_0 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_1 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_2 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_3 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_4 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_5 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_6 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_7 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_8 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_9 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_10 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_APPEND( x, y ) TTL_APPEND1(x,y) </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_APPEND1( x, y ) x ## y</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_DEC(n) TTL_APPEND(TTL_CNTDEC_, n)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT(n, m, l, p) TTL_APPEND(TTL_REPEAT_, TTL_DEC(n))(m,l,p) TTL_APPEND(TTL_LAST_REPEAT_,n)(l,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAM(n,t)  t,</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAM_END(n,t) t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAMSX(n,t) TTL_REPEAT(n, TTL_TPARAM, TTL_TPARAM_END, t)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAMS(n, T) TTL_TPARAMSX(n,T)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING( x ) TO_STRING1( x )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING1( x ) #x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span>* i)</span><br><span class=\"line\">    :i_(i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * i_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//  std::cout &lt;&lt; TO_STRING(TTL_TPARAMSX(1, &amp;i)) &lt;&lt; std::endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    A a[<span class=\"number\">10</span>] = &#123;TTL_TPARAMSX(<span class=\"number\">10</span>, &amp;i)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> ### 使用placement new<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;type_traits&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span>* p)</span><br><span class=\"line\">        : p_(p)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> elemType = <span class=\"built_in\">std</span>::aligned_storage&lt;<span class=\"keyword\">sizeof</span>(A), <span class=\"keyword\">alignof</span>(A)&gt;::type;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> count = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    elemType a[count];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; count: ++idx) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> (&amp;a[idx]) A(&amp;i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; count: ++idx) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">reinterpret_cast</span>&lt;A&amp;&gt;(a[idx]).~A();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考:<br />\n<a href=\"https://stackoverflow.com/questions/63068079/initialize-an-array-of-object-in-c\" target=\"_blank\" rel=\"noopener\">initialize an array of object in c++</a><br />\n<a href=\"http://www.cppblog.com/kevinlynx/archive/2008/03/19/44828.aspx\" target=\"_blank\" rel=\"noopener\">代码自动生成-宏带来的奇技淫巧</a><br />\n<a href=\"https://zhou-yuxin.github.io/articles/2016/%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%AE%8F%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E7%8E%B0/index.html\" target=\"_blank\" rel=\"noopener\">用C语言宏批量生成代码的思考与实现</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果对象数组中没有默认构造函数，要像下面这样初始化: <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span>* p)</span><br><span class=\"line\">       : p_(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">   A a[<span class=\"number\">3</span>] = &#123;&amp;i, &amp;i, &amp;i&#125;; <span class=\"comment\">//如果有100万个元素就要写100万个&amp;i</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 有两种解决思路 * 使用std::array 和 std::index_sequence * 利用宏自动生成100万个&amp;i</p>\n<h3 id=\"利用-stdarray-和-stdindex_sequence\">利用 std::array 和 std::index_sequence</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo_t</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">foo_t</span>(<span class=\"keyword\">int</span>* i)</span><br><span class=\"line\">     : i_(i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo_t\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foo_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">foo_t</span>&amp; obj)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo_t copy\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">        i_ = obj.i_; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">int</span>* i_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foo_t</span> make_foo(<span class=\"keyword\">int</span>* i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">foo_t</span>(i);  <span class=\"comment\">//这里如果使用std::forward等于将右值转为左值,左值生成一个副本，多了一次拷贝</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">size_t</span>...Is&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">foo_t</span>, <span class=\"keyword\">sizeof</span>...(Is)&gt; make_foos(<span class=\"built_in\">std</span>::index_sequence&lt;Is...&gt;, <span class=\"keyword\">int</span>* i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; (Is, make_foo(i))... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">size_t</span> N&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">foo_t</span>, N&gt; make_foos(<span class=\"keyword\">int</span>* i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_foos(<span class=\"built_in\">std</span>::make_index_sequence&lt;N&gt;(), i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">foo_t</span>, 10&gt; a = make_foos&lt;<span class=\"number\">10</span>&gt;(&amp;i);  <span class=\"comment\">//返回值不会有拷贝，详见\t\t\t\t\t\t\t\t\t\t\t\t\t\trvo</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这种方式也有缺陷，当元素为100万时编译速度很慢, gcc异常退出</p>\n<h3 id=\"使用宏展开\">使用宏展开</h3>\n<p>参考ttl库的实现<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_0(m,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_1(m,p) m(1,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_2(m,p) m(2,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_3(m,p) m(3,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_4(m,p) m(4,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_5(m,p) m(5,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_6(m,p) m(6,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_7(m,p) m(7,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_8(m,p) m(8,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_9(m,p) m(9,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_LAST_REPEAT_10(m,p) m(10,p)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_0(m,l,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_1(m,l,p) TTL_REPEAT_0(m,l,p) m(1,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_2(m,l,p) TTL_REPEAT_1(m,l,p) m(2,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_3(m,l,p) TTL_REPEAT_2(m,l,p) m(3,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_4(m,l,p) TTL_REPEAT_3(m,l,p) m(4,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_5(m,l,p) TTL_REPEAT_4(m,l,p) m(5,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_6(m,l,p) TTL_REPEAT_5(m,l,p) m(6,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_7(m,l,p) TTL_REPEAT_6(m,l,p) m(7,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_8(m,l,p) TTL_REPEAT_7(m,l,p) m(8,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_9(m,l,p) TTL_REPEAT_8(m,l,p) m(9,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT_10(m,l,p) TTL_REPEAT_9(m,l,p) m(10,p)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_0 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_1 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_2 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_3 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_4 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_5 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_6 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_7 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_8 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_9 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_CNTDEC_10 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_APPEND( x, y ) TTL_APPEND1(x,y) </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_APPEND1( x, y ) x ## y</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_DEC(n) TTL_APPEND(TTL_CNTDEC_, n)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_REPEAT(n, m, l, p) TTL_APPEND(TTL_REPEAT_, TTL_DEC(n))(m,l,p) TTL_APPEND(TTL_LAST_REPEAT_,n)(l,p)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAM(n,t)  t,</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAM_END(n,t) t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAMSX(n,t) TTL_REPEAT(n, TTL_TPARAM, TTL_TPARAM_END, t)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TTL_TPARAMS(n, T) TTL_TPARAMSX(n,T)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING( x ) TO_STRING1( x )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING1( x ) #x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span>* i)</span><br><span class=\"line\">    :i_(i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * i_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//  std::cout &lt;&lt; TO_STRING(TTL_TPARAMSX(1, &amp;i)) &lt;&lt; std::endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    A a[<span class=\"number\">10</span>] = &#123;TTL_TPARAMSX(<span class=\"number\">10</span>, &amp;i)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> ### 使用placement new<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;type_traits&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span>* p)</span><br><span class=\"line\">        : p_(p)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> elemType = <span class=\"built_in\">std</span>::aligned_storage&lt;<span class=\"keyword\">sizeof</span>(A), <span class=\"keyword\">alignof</span>(A)&gt;::type;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> count = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    elemType a[count];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; count: ++idx) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> (&amp;a[idx]) A(&amp;i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; count: ++idx) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">reinterpret_cast</span>&lt;A&amp;&gt;(a[idx]).~A();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考:<br />\n<a href=\"https://stackoverflow.com/questions/63068079/initialize-an-array-of-object-in-c\" target=\"_blank\" rel=\"noopener\">initialize an array of object in c++</a><br />\n<a href=\"http://www.cppblog.com/kevinlynx/archive/2008/03/19/44828.aspx\" target=\"_blank\" rel=\"noopener\">代码自动生成-宏带来的奇技淫巧</a><br />\n<a href=\"https://zhou-yuxin.github.io/articles/2016/%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%AE%8F%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E7%8E%B0/index.html\" target=\"_blank\" rel=\"noopener\">用C语言宏批量生成代码的思考与实现</a></p>\n"},{"title":"cpp并发","date":"2020-02-20T14:20:11.000Z","_content":"\n<!-- more -->\n## c++11中创建线程\n\n创建线程的几种方式\n* 使用全局函数或类静态函数\n```cpp\nvoid threadFunc(){\n    std::cout << \"subThread\" << std::endl;\n}\nstd::thread t1(threadFunc);\n```\n* 使用函数对象\n```cpp\nclass Obj{\npublic:\n    void operator ()(){\n        std::cout << \"subThread\" << std::endl;\n    }\n};\nObj b;\nstd::thread t2(b);\n```\n* 使用lambda\n```cpp\nauto l = []{\n    std::cout << \"subThread\" << std::endl;\n};\nstd::thread t3(l);\n```\njoin  \n阻塞等待线程结束\n\ndetach  \n线程分离，一般不使用此函数主进程结束即使子线程还在运行仍然会被终止，使用此函数，线程会被c＋＋运行时库接管，成为守护线程.\n\n\njoinable  \n是否可以join或detach\n\n## 线程传参\n* 使用detach带来的陷阱\n线程函数中无论是引用传递还是值传递编译器都会拷贝副本，所以detach下传递int&安全，传递char*不安全(主线程退出内存释放掉了)\n```cpp\nvoid myprint(const int& i, char* pmybuf){\n    cout << i << \" \" << pmybuf << endl;\n}\nchar mybuf[] = \"hello world\";\nthread mytobj(myprint, mvar, mybuf);\nmytobj.detach();\n```\n\n避免隐式转换\n从char* 到 string转换时机不确定，可能主线程退出后再发生转换此时char*指向内存已销毁\n```cpp\nvoid myprint(const int i, const string& pmybuf){\n    cout << i << \" \" << pmybuf.c_str() << endl;\n}\nchar mybuf[] = \"hello world\"; \nthread mytobj(myprint, mvar, mybuf); //改为thread mytobj(myprint, mvar, string(mybuf))可以看到内存拷贝发生在主线程退出前\nmytobj.detach();\n\n```\n* 传递类对象、智能指针、函数对象, 成员函数作为线程参数 \n线程函数传递引用类型参数前需加const \n需要使用std::ref才能传递myobj的引用 \n```cpp\nclass A{\npublic:    \n    int m_i;\n    A(int a) : m_i(a){std::cout <<\"A()\" << std::endl;}\n    A(const A& a):m_i(a.m_i){std::cout<< A(constA& ) << std::endl;}\n    ~A(){std::cout << \"~A()\" << std::endl;}\n};\n\nvoid myprint(const A& a){\n    cout << i << a.m_i << endl;\n}\nA myobj(10);\n//thread mytobj(myprint, myobj); \nthread mytobj(myprint, std::ref(myobj)); \nmytobj.join();\n\n```\n\n传递std::unique_ptr使用std::move\n\n```cpp\nvoid myprint(unique_ptr<int> pzn){\n}\n\nunique_ptr<int> p(new int(100));\n//thread mytobj(myprint, myobj); 这样操作有问题unique_ptr是独占指针 \nthread mytobj(myprint, std::move(myobj)); \nmytobj.join();\n\n```\n函数对象\n```cpp\nclass A{\npublic:    \n    int m_i;\n    void operator()(int num){\n    }\n}\n\nA myobj(10);\nthread mytobj(myobj, 15); //会有拷贝构造\nthread mytobj(std::ref(myobj), 15); //没有拷贝构造\nmytobj.join();\n```\n\n用成员函数指针做线程函数\n```cpp\nclass A{\npublic:    \n    int m_i;\n    void thread_work(int num){\n        std::cout << num << \" \" << std::this_thread::get_id() << std::endl;\n    }\n\n};\nA myobj(10);\nthread mytobj(&A::thread_work, myobj, 15); //会有拷贝构造\n// thread mytobj(&A::thread_work, std::ref(myobj), 15); //没有拷贝构造\n// thread mytobj(&A::thread_work, &myobj, 15); //没有拷贝构造\nmytobj.join();\n\n```\n\n\n \n\n\n\n\n\n\n","source":"_posts/cpp并发.md","raw":"---\ntitle: cpp并发\ndate: 2020-02-20 22:20:11\ncategories:\n    - c++\ntags:\n    - 并发\n---\n\n<!-- more -->\n## c++11中创建线程\n\n创建线程的几种方式\n* 使用全局函数或类静态函数\n```cpp\nvoid threadFunc(){\n    std::cout << \"subThread\" << std::endl;\n}\nstd::thread t1(threadFunc);\n```\n* 使用函数对象\n```cpp\nclass Obj{\npublic:\n    void operator ()(){\n        std::cout << \"subThread\" << std::endl;\n    }\n};\nObj b;\nstd::thread t2(b);\n```\n* 使用lambda\n```cpp\nauto l = []{\n    std::cout << \"subThread\" << std::endl;\n};\nstd::thread t3(l);\n```\njoin  \n阻塞等待线程结束\n\ndetach  \n线程分离，一般不使用此函数主进程结束即使子线程还在运行仍然会被终止，使用此函数，线程会被c＋＋运行时库接管，成为守护线程.\n\n\njoinable  \n是否可以join或detach\n\n## 线程传参\n* 使用detach带来的陷阱\n线程函数中无论是引用传递还是值传递编译器都会拷贝副本，所以detach下传递int&安全，传递char*不安全(主线程退出内存释放掉了)\n```cpp\nvoid myprint(const int& i, char* pmybuf){\n    cout << i << \" \" << pmybuf << endl;\n}\nchar mybuf[] = \"hello world\";\nthread mytobj(myprint, mvar, mybuf);\nmytobj.detach();\n```\n\n避免隐式转换\n从char* 到 string转换时机不确定，可能主线程退出后再发生转换此时char*指向内存已销毁\n```cpp\nvoid myprint(const int i, const string& pmybuf){\n    cout << i << \" \" << pmybuf.c_str() << endl;\n}\nchar mybuf[] = \"hello world\"; \nthread mytobj(myprint, mvar, mybuf); //改为thread mytobj(myprint, mvar, string(mybuf))可以看到内存拷贝发生在主线程退出前\nmytobj.detach();\n\n```\n* 传递类对象、智能指针、函数对象, 成员函数作为线程参数 \n线程函数传递引用类型参数前需加const \n需要使用std::ref才能传递myobj的引用 \n```cpp\nclass A{\npublic:    \n    int m_i;\n    A(int a) : m_i(a){std::cout <<\"A()\" << std::endl;}\n    A(const A& a):m_i(a.m_i){std::cout<< A(constA& ) << std::endl;}\n    ~A(){std::cout << \"~A()\" << std::endl;}\n};\n\nvoid myprint(const A& a){\n    cout << i << a.m_i << endl;\n}\nA myobj(10);\n//thread mytobj(myprint, myobj); \nthread mytobj(myprint, std::ref(myobj)); \nmytobj.join();\n\n```\n\n传递std::unique_ptr使用std::move\n\n```cpp\nvoid myprint(unique_ptr<int> pzn){\n}\n\nunique_ptr<int> p(new int(100));\n//thread mytobj(myprint, myobj); 这样操作有问题unique_ptr是独占指针 \nthread mytobj(myprint, std::move(myobj)); \nmytobj.join();\n\n```\n函数对象\n```cpp\nclass A{\npublic:    \n    int m_i;\n    void operator()(int num){\n    }\n}\n\nA myobj(10);\nthread mytobj(myobj, 15); //会有拷贝构造\nthread mytobj(std::ref(myobj), 15); //没有拷贝构造\nmytobj.join();\n```\n\n用成员函数指针做线程函数\n```cpp\nclass A{\npublic:    \n    int m_i;\n    void thread_work(int num){\n        std::cout << num << \" \" << std::this_thread::get_id() << std::endl;\n    }\n\n};\nA myobj(10);\nthread mytobj(&A::thread_work, myobj, 15); //会有拷贝构造\n// thread mytobj(&A::thread_work, std::ref(myobj), 15); //没有拷贝构造\n// thread mytobj(&A::thread_work, &myobj, 15); //没有拷贝构造\nmytobj.join();\n\n```\n\n\n \n\n\n\n\n\n\n","slug":"cpp并发","published":1,"updated":"2020-02-24T15:14:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4ve000254ynckn3fkkl","content":"<a id=\"more\"></a>\n<h2 id=\"c11中创建线程\">c++11中创建线程</h2>\n<p>创建线程的几种方式 * 使用全局函数或类静态函数 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadFunc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"subThread\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(threadFunc)</span></span>;</span><br></pre></td></tr></table></figure> * 使用函数对象 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span> <span class=\"params\">()</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"subThread\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Obj b;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t2</span><span class=\"params\">(b)</span></span>;</span><br></pre></td></tr></table></figure> * 使用lambda <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> l = []&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"subThread\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t3</span><span class=\"params\">(l)</span></span>;</span><br></pre></td></tr></table></figure> join<br />\n阻塞等待线程结束</p>\n<p>detach<br />\n线程分离，一般不使用此函数主进程结束即使子线程还在运行仍然会被终止，使用此函数，线程会被c＋＋运行时库接管，成为守护线程.</p>\n<p>joinable<br />\n是否可以join或detach</p>\n<h2 id=\"线程传参\">线程传参</h2>\n<ul>\n<li>使用detach带来的陷阱 线程函数中无论是引用传递还是值传递编译器都会拷贝副本，所以detach下传递int&amp;安全，传递char*不安全(主线程退出内存释放掉了) <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; i, <span class=\"keyword\">char</span>* pmybuf)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; pmybuf &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mybuf[] = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, mvar, mybuf)</span></span>;</span><br><span class=\"line\">mytobj.detach();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>避免隐式转换 从char* 到 string转换时机不确定，可能主线程退出后再发生转换此时char<em>指向内存已销毁 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; pmybuf)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; pmybuf.c_str() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mybuf[] = <span class=\"string\">\"hello world\"</span>; </span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, mvar, mybuf)</span></span>; <span class=\"comment\">//改为thread mytobj(myprint, mvar, string(mybuf))可以看到内存拷贝发生在主线程退出前</span></span><br><span class=\"line\">mytobj.detach();</span><br></pre></td></tr></table></figure> </em> 传递类对象、智能指针、函数对象, 成员函数作为线程参数 线程函数传递引用类型参数前需加const 需要使用std::ref才能传递myobj的引用 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_i;</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span> a) : m_i(a)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"A()\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    A(<span class=\"keyword\">const</span> A&amp; a):m_i(a.m_i)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt; A(constA&amp; ) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    ~A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~A()\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"keyword\">const</span> A&amp; a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; a.m_i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">myobj</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//thread mytobj(myprint, myobj); </span></span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, <span class=\"built_in\">std</span>::ref(myobj))</span></span>; </span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure></p>\n<p>传递std::unique_ptr使用std::move</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; pzn)</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">100</span>));</span><br><span class=\"line\"><span class=\"comment\">//thread mytobj(myprint, myobj); 这样操作有问题unique_ptr是独占指针 </span></span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, <span class=\"built_in\">std</span>::move(myobj))</span></span>; </span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure>\n<p>函数对象 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_i;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">myobj</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myobj, <span class=\"number\">15</span>)</span></span>; <span class=\"comment\">//会有拷贝构造</span></span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(<span class=\"built_in\">std</span>::ref(myobj), <span class=\"number\">15</span>)</span></span>; <span class=\"comment\">//没有拷贝构造</span></span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure></p>\n<p>用成员函数指针做线程函数 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_i;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">thread_work</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">myobj</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(&amp;A::thread_work, myobj, <span class=\"number\">15</span>)</span></span>; <span class=\"comment\">//会有拷贝构造</span></span><br><span class=\"line\"><span class=\"comment\">// thread mytobj(&amp;A::thread_work, std::ref(myobj), 15); //没有拷贝构造</span></span><br><span class=\"line\"><span class=\"comment\">// thread mytobj(&amp;A::thread_work, &amp;myobj, 15); //没有拷贝构造</span></span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"c11中创建线程\">c++11中创建线程</h2>\n<p>创建线程的几种方式 * 使用全局函数或类静态函数 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadFunc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"subThread\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(threadFunc)</span></span>;</span><br></pre></td></tr></table></figure> * 使用函数对象 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span> <span class=\"params\">()</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"subThread\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Obj b;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t2</span><span class=\"params\">(b)</span></span>;</span><br></pre></td></tr></table></figure> * 使用lambda <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> l = []&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"subThread\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">t3</span><span class=\"params\">(l)</span></span>;</span><br></pre></td></tr></table></figure> join<br />\n阻塞等待线程结束</p>\n<p>detach<br />\n线程分离，一般不使用此函数主进程结束即使子线程还在运行仍然会被终止，使用此函数，线程会被c＋＋运行时库接管，成为守护线程.</p>\n<p>joinable<br />\n是否可以join或detach</p>\n<h2 id=\"线程传参\">线程传参</h2>\n<ul>\n<li>使用detach带来的陷阱 线程函数中无论是引用传递还是值传递编译器都会拷贝副本，所以detach下传递int&amp;安全，传递char*不安全(主线程退出内存释放掉了) <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; i, <span class=\"keyword\">char</span>* pmybuf)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; pmybuf &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mybuf[] = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, mvar, mybuf)</span></span>;</span><br><span class=\"line\">mytobj.detach();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>避免隐式转换 从char* 到 string转换时机不确定，可能主线程退出后再发生转换此时char<em>指向内存已销毁 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; pmybuf)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; pmybuf.c_str() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mybuf[] = <span class=\"string\">\"hello world\"</span>; </span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, mvar, mybuf)</span></span>; <span class=\"comment\">//改为thread mytobj(myprint, mvar, string(mybuf))可以看到内存拷贝发生在主线程退出前</span></span><br><span class=\"line\">mytobj.detach();</span><br></pre></td></tr></table></figure> </em> 传递类对象、智能指针、函数对象, 成员函数作为线程参数 线程函数传递引用类型参数前需加const 需要使用std::ref才能传递myobj的引用 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_i;</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span> a) : m_i(a)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"A()\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    A(<span class=\"keyword\">const</span> A&amp; a):m_i(a.m_i)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt; A(constA&amp; ) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    ~A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~A()\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"keyword\">const</span> A&amp; a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; a.m_i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">myobj</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//thread mytobj(myprint, myobj); </span></span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, <span class=\"built_in\">std</span>::ref(myobj))</span></span>; </span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure></p>\n<p>传递std::unique_ptr使用std::move</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myprint</span><span class=\"params\">(<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; pzn)</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">100</span>));</span><br><span class=\"line\"><span class=\"comment\">//thread mytobj(myprint, myobj); 这样操作有问题unique_ptr是独占指针 </span></span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myprint, <span class=\"built_in\">std</span>::move(myobj))</span></span>; </span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure>\n<p>函数对象 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_i;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">myobj</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(myobj, <span class=\"number\">15</span>)</span></span>; <span class=\"comment\">//会有拷贝构造</span></span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(<span class=\"built_in\">std</span>::ref(myobj), <span class=\"number\">15</span>)</span></span>; <span class=\"comment\">//没有拷贝构造</span></span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure></p>\n<p>用成员函数指针做线程函数 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_i;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">thread_work</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">myobj</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">thread <span class=\"title\">mytobj</span><span class=\"params\">(&amp;A::thread_work, myobj, <span class=\"number\">15</span>)</span></span>; <span class=\"comment\">//会有拷贝构造</span></span><br><span class=\"line\"><span class=\"comment\">// thread mytobj(&amp;A::thread_work, std::ref(myobj), 15); //没有拷贝构造</span></span><br><span class=\"line\"><span class=\"comment\">// thread mytobj(&amp;A::thread_work, &amp;myobj, 15); //没有拷贝构造</span></span><br><span class=\"line\">mytobj.join();</span><br></pre></td></tr></table></figure></p>"},{"title":"go","date":"2020-07-04T07:26:14.000Z","_content":"\n\n<!-- more -->  \n## 项目构建\n* 个人  \n![p1](/images/go_20200706_p1.png)\n\n* 公司  \n![p2](/images/go_20200706_p2.png)\n\n\n## 工具\n```go\n    go fmt -w *.go   //格式化代码 \n    go fmt github.com/hello   \n    go run  src/xx/xx.go  //编译+执行\n    go build -o /bin/test /src/test  //编译生成二进制文件， -o指定目录\n    go build  github.com/xx   //注意src目录不用写\n    go install  github.com/xx  //生成可执行文件到bin目录下\n    go env //显示环境变量\n    go get //安装第三方包  \n```\n\n\n\n## 标识符  \n标识符以字母或下划线开头，大小写敏感  \n\n* 保留关键字  \n```go\n    break default func interface select case defer go map struct chan else goto package switch  \n    const fallthough if range type continue for import return var   \n```\n\n## 基本结构\n* 可执行程序的包名必须为main, 且包含一个main函数 \n* go build; go install 对于非main包会在GOPATH pkg 中生成静态库文件 \n\n\n\n* 包的别名  \n```go\n    import(  \n        a  \"fmt\"  //a是fmt的别名  \n    )  \n```\n\n* 访问控制规则    \n大写函数/变量可导出      \n小写函数变量是私有的，外部包不能访问    \n\n* 万能格式输出%v   \n\n## 初始化    \n\n* init函数    \n每个包里都有0个或多个init函数， 在main函数调用之前会执行init\n```go\n    //无参数和返回值 \n    func init(){\n\n    }\n\n```\n* 包初始化顺序 \n全局变量 -> init -> main\n\n* 有import的情况 \n![go_20200723_1](/images/go_20200723_p1.jpg)\n\n\n```go\nimport(  \n     \"test\"  //仅初始化， 不使用包里面的东西  \n)  \n```\n\n嵌套包的初始化顺序， 最里层包先初始化     \n![p3](/images/go_20200408_1.png)  \n\n## 数据类型  \n\n```go\n    int int8 int16 int32 int64 uint8 uint16 uint32 uint64 float32 float64\n```\n\n### 标识符  \n以字母或_开头, 后面跟着字母,_或数字  \n\n\n### 关键字 \n```go\n   break default func interface select case defer go map struct \n   chan else goto package switch const fallthough  if range type \n   continue for import return var \n```\n### 常量  \n编译时已经确定, const修饰，只读    \n常量必须要赋值   \n```go  \nconst 只能修饰boolean, number(int相关， 浮点， complex)和string  \nconst b string = \"hello word\"  \nconst b = \"hello word\"  \nconst c = getValue()  //错误，与c++不同  \n\n\n//优雅的写法  \nconst(  \n    a = 0  \n    b = 1  \n    c = 2 \n    d     //2 \n)  \n\n//更加专业的写法 \nconst(  \n    a = iota //0  \n    b  //1  \n    c   //2  \n)  \n\nconst(  \n    a = 1 << iota //1\n    b  //2 \n    c   //4  \n)  \n\nconst(\n    a  = iota  //0\n    b          //1 \n    c          //2 \n    d  = 8    //8  \n    e         //8 \n    f  = iota //5\n    g         //6\n)\n```  \n### 变量  \n```go  \n//第一种写法\nvar identifier type  \nvar a int  \nvar b string  \nvar c bool  \nd int = 8  \ne string = \"hello world\"  \n\n//第二种写法\nVar(  \n    a int  //默认0  \n    b string //默认\"\"  \n    c bool //默认false  \n    d = 8  \n    e = \"hello world\"  \n)  \n```  \n### 值类型和引用类型  \n值类型： 基本数据类型int, float, bool, string以及数组和struct，内存在栈中分配  \n引用类型： 指针, slice, map, chan, interface等， 内存在对上分配，GC回收  \n\n变量的作用域  \n局部变量--生命周期在函数内或语句块内  \n全局变量--生命周期在整个包，大写的可以外部访问  \n a :=1 实际是两条语句: var a int a = 1 go中不能在函数外赋值，所以:= 不能用于函数外   \n\n\n### 指针类型   \nvar p *int = &a  \n```go\n//传递数组指针和c数组指针类似 \n    func modify(arr *[3]int) { \n        (*arr)[0] = 90\n    }\n    \n    func main() { \n        a := [3]int{89, 90, 91}\n        modify(&a)\n        fmt.Println(a) \n    }\n\n//切片是引用类型 \nfunc modify(sls []int) { \n     sls[0] = 90\n}\nfunc main() { \n     a := [3]int{89, 90, 91}\n     modify(a[:])\n     fmt.Println(a)\n}\n\n```\n\n\n\n\n### 类型转化  \ntype(var)  \nint 和 int32是不同类型， 不能直接运算  \n\n### 字符串  \n* 两种表示方式  \n1.\"\" 允许转义  \n2.`` 原生字符串，允许换行  \n```go  \n    == //比较\n    len(str)  //长度\n    +, fmt.Sprintf //拼接\n    strings\n    strings.Contains  //包含  \n    strings.HasPrefix(s string, prefix string) bool //判断字符串s是否以prefix开头  \n    strings.HasSuffix(s string, suffix string) bool //判断字符串s是否以suffix结尾。  \n    strings.Index(s string, str string) int  //判断str在s中首次出现的位置，如果没有出现，则返回-1  \n    strings.LastIndex(s string, str string) int //判断str在s中最后出现的位置，如果没有出现，则返回-1  \n    strings.Replace(str string, old string, new string, n int) //字符串替换  \n    strings.Count(str string, substr string)int //字符串计数  \n    strings.ToLower(str string)string //转为小写  \n    strings.ToUpper(str string)string //转为大写  \n    strings.TrimSpace(str string) //去掉字符串首尾空白字符  \n    strings.Trim(str string, cut string) //去掉字符串首尾cut字符  \n    strings.TrimLeft(str string, cut string) //去掉字符串首cut字符  \n    strings.TrimRight(str string, cut string) //去掉字符串尾cut字符  \n    strings.Field(str string) //返回str空格分隔的所有子串的slice  \n    strings.Split(str string, split string) //返回str split分隔的所有子串的slice  \n    strings.Join(s1 []string, sep string) //用sep把s1中的所有元素链接起来  \n    strconv.Itoa(i int) //把一个整数i转成字符串  \n    strconv.Atoi(str string)(int, error) //把一个字符串转成整数  \n```  \n* 字符串底层是byte数组, 可以和[]byte类型互相转换   \n```go\n//修改字符串  \n    var str=\"hello\"\n    var byteSlice []byte\n    byteSlice = []byte(str)\n    byteSlice[0] = '0'\n    str = string(byteSlice\n```\n* rune表示utf8的字符  \n```go\n    var str=\"哈\"\n\tvar runeSlice []rune\n\truneSlice = []rune(str)\n\tfmt.Printf(\"str 长度:%d, len(str)=%d\\n\", len(runeSlice), len(str) //1, 3\n```\n\n\n### 时间和日期  \n```go  \n    //获取当前时间\n    now := time.Now()  \n\n    //获取时间戳\n    timestamp := time.Now().Unix()\n\n    //时间戳转time类型  \n    timeobj := time.Unix(timestamp, 0)\n\n    time.Now().Day()，time.Now().Minute()，time.Now().Month()，time.Now().Year()  \n\n    //格式化\n    fmt.Printf(“%02d/%02d%02d %02d:%02d:%02d”, now.Year()......)  \n    //time.Duration用来表示纳秒  \n    //一些常量  \n    const (  \n        Nanosecond  Duration = 1  \n        Microsecond          = 1000 * Nanosecond  \n        Millisecond          = 1000 * Microsecond  \n        Second               = 1000 * Millisecond  \n        Minute               = 60 * Second  \n        Hour                 = 60 * Minute  \n    )  \n    //格式化\n    now := time.Now()  \n    fmt.Println(now.Format(“02/1/2006 15:04”))  \n    fmt.Println(now.Format(“2006/1/02 15:04”))  \n    fmt.Println(now.Format(“2006/1/02”))  \n```  \n* 定时器  \n```go\n\tticker := time.Tick(1*time.Second)\n\tfor i := range ticker {\n\t\tfmt.Printf(\"%v\\n\", i) //打印出当前时间 \n\t}\n```\n\n\n## 流程控制  \n```go  \n    //if  \n    if condition {  \n    }  \n    \n    if condition {  \n    } else {  \n    }  \n    \n    if condition1 {  \n    } else if condition2 {  \n    } else if condition3 {  \n    } else {  \n    }  \n    //错误代码\n    if condition {  \n    }  \n    else{     //else必须和上一个}在一行否则编译不过去  \n    }  \n    //switch  \n    switch var {  \n        case var1:  \n        fallthrough //继续往下执行  \n        case var2:  \n        case var3:  \n        default:  \n    }  \n    //注意没有break  \n    （2）switch var {  \n            case var1, var2: //多条件在一行  \n            case var 3:  \n            default:  \n            }  \n     (3) switch{  //没有变量  \n                condition1:  \n                condition2:  \n                default:  \n            }  \n     (4) switch 语句块 {  \n         }  \n     //for  \n     (1) for i := 0; i < 100;  i++{  //注意for没有()  \n        }  \n\n     (2)  for 条件{  \n        }  \n\n     (3) fro range  \n        str := “hello world,中国”  \n        for i, v := range str {  \n            fmt.Printf(“index[%d] val[%c] len[%d]\\n”, i, v, len([]byte(v)))  \n        }  \n```  \n\n## 函数\n```go\n//其中参数列表和返回值列表是可选\nfunc functionname([parametername type]) [returntype] { \n//function body\n}\n\n```\n\n不支持重载，一个包不能有两个名字一样的函数  \n函数是一等公民，函数也是一种类型，一个函数可以赋值给变量  \n匿名函数  \n多返回值  \n```go\n    func calc(a, b int) (sum int, sub int) {\n        sum = a + b\n        sub = a - b\n        return  //返回sum, sub\n    }\n\n    sum, _ := calc(100, 200); //忽略返回值  \n\n```\n\n可变参\n```go\n    func calc_v2(a int, b ...int) int {\n        sum := a\n        for i := 0; i < len(b);i++ {\n            sum = sum + b[i]\n        }\n        return sum\n    }\n\n    sum := calc_v2(10);\n```\n\n### defer  \n当函数返回时，执行defer语句。因此，可以用来做资源清理  \n多个defer语句，按先进后出的方式执行  \ndefer语句中的变量，在defer声明时就决定了   \n```go  \n    //关闭文件句柄 \n    func read() {  \n        file := open(filename)  \n        defer file.Close()  \n    }  \n    //锁资源释放  \n    func read() {  \n        mc.Lock()  \n        defer mc.Unlock()  \n        //其他操作  \n    }    \n    //数据库连接释放  \n    func read() {  \n        conn := openDatabase()  \n        defer conn.Close()  \n        //其他操作  \n    }  \n\n    func testDefer3() {\n\t    var i int = 0\n\t    defer fmt.Printf(\"defer i=%d\\n\", i)  //打印结果i=0\n\t    i= 1000\n\t    fmt.Printf(\"i=%d\\n\", i)\n    }\n```  \n\n### 内置函数  \n```go  \n    不需要导入包  \n    close：主要用来关闭channel  \n    len：用来求长度，比如string、array、slice、map、channel  \n    new：用来对各种类型分配内存，主要用来分配值类型，比如int、struct。返回的是指针  \n    make：用来对内建类型分配内存，主要用来分配引用类型，比如channel map slice  \n    append：用来追加元素到数组、slice中  \n    panic和recover：用来做错误处理  \n\n    var b *[]int = new([]int) \n    //*b[0] = 100 error, 需要用make初始化 \n    (*b) = make([]int, 5, 100)\n\n```  \n\n\n\n* new和make的区别  \n![p4](/images/go_20200408_2.png)  \n\n\n### 匿名函数  \n```go\n    func testFunc2() {\n        f1 := func (a, b int) int {  //匿名函数  \n            return a + b\n        }\n\n        fmt.Printf(\"type of f1=%T\\n\", f1) //%T类型 \n        sum := f1(2, 5)\n        fmt.Printf(\"sum=%d\\n\", sum)\n    }\n\n    //defer和匿名函数  \n    func testFunc4() {\n        var i int = 0\n        defer func() {\n            fmt.Printf(\"defer i=%d\\n\", i) //i=100\n        }()\n\n        i = 100\n        fmt.Printf(\"i=%d\\n\", i)\n        return\n    }\n```\n### 函数类型作参数 \n```go\n    func calc(a , b int, op func(int, int)int) int {\n        return op(a, b)\n    }\n\n```\n\n### 闭包\n```go\n    //eg1\n    func add(base int) func(int) int {\n    return func(i int) int {\n    base += i\n    return base\n    }\n    }\n\n    tmp1 := add(10)\n    fmt.Println(tmp(1), tmp(2))  //11, 13\n    tmp2 := add(100) //101, 103\n    fmt.Println(tmp2(1), tmp2(2))\n\n    //eg2\n    func makeSuffixFunc(suffix string) func(string) string { \n    return func(name string) string { \n    if !strings.HasSuffix(name, suffix) { \n    return name + suffix \n    } \n    return name \n    } \n    }\n\n    func1 := makeSuffixFunc(\".bmp\") \n    func2 := makeSuffixFunc(\".jpg\") \n    fmt.Println(func1(\"test\"))  //test.bmp\n    fmt.Println(func2(\"test\")) //test.jpg\n\n\n    //eg3\n    func calc(base int) (func(int) int, func(int) int) {\n    add := func(i int) int {\n    base += i\n    return base\n    }\n    sub := func(i int) int {\n    base -= i\n    return base\n    }\n    return add, sub\n    }\n\n\n    f1, f2 := calc(10)\n    fmt.Println(f1(1), f2(2)) //11, 9\n    fmt.Println(f1(3), f2(4)) //12, 8\n    fmt.Println(f1(5), f2(6)) //13, 7\n    fmt.Println(f1(7), f2(8)) //14, 6\n\n    //eg4\n    for i:=0; i<5; i++ {\n    go func(){\n        fmt.Println(i) //i全=5\n    }()\n\n    go func1(i int){\n        fmt.Println(i)\n    }(i)    //1,2,3,4,5\n\n    }\n    time.Sleep(time.Second)\n\n```\n\n## 数组   \n* 定义\n```go\n    var a [len]int\n    //eg\n    var a[5]int \n```\n长度是数组类型的一部分，因此，var a[5] int和var a[10]int是不同的类型, 不能a=b  \n数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1  \n访问越界，如果下标在数组合法范围之外，则触发访问越界，会panic  \n数组是值类型，因此改变副本的值，不会改变本身的值 \n\n* 初始化  \n整数数组元素默认初始化是0, 字符串数组默认初始化\"\", 浮点型是0.0\n```go\nvar age0 [5] int = [5] int{1,2,3} \nvar age1 = [5]int{1,2,3,4,5}  \nvar age2 = [...]int{1,2,3,4,5,6}  \nage3 := [5]int{1,2,3} //1 2 3 0 0  \nvar str = [5]string{3:”hello world”, 4:”tom”} //指定索引赋值  \n```  \n\n* 遍历  \n```go\n    \n    for i := 0; i < len(a); i++ {\n\t\tfmt.Printf(\"a[%d]=%d\\n\", i, a[i])\n\t}\n    \n    for _, value := range a {\n\t\tfmt.Printf(\"%d\\n\", value)\n    }\n```\n\n* 多维数组 \n```go \n    var age [5][3] int  \n    var age [5][3] int = [...][3]int{{1, 2 , 3}, {4, 5, 6}}  \n\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 2; j++ {\n\t\t\tfmt.Printf(\"%d \", a[i][j])\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i, val := range a {\n\t\tfmt.Printf(\"row[%d]=%v\\n\", i, val)\n\t\tfor j, val2 := range val {\n\t\t\tfmt.Printf(\"(%d,%d)=%d \",i, j, val2)\n\t\t}\n\t\tfmt.Println()\n    }\n```\n\n* 数组拷贝\n数组是值类型\n```go\n    //b初始化时是深拷贝    \n\ta := [3]int{10, 20, 30}\n\tb := a\n\tb[0] = 1000\n\tfmt.Printf(\"a=%v\\n\", a) //10, 20, 30\n\tfmt.Printf(\"b=%v\\n\", b) //1000, 20, 30\n```\n* 数组传参 \n```go\n    //数组在传参的时候会深拷贝   \n    func modify(b [3]int) {\n\t    b[0] = 1000\n    }\n\n    func modify(b [3][3]int){\n        b[2][1] = 0\n    }\n```\n\n\n## 切片\n基于数组类型做的一层封装，可以自动扩容  \n切片是数组的一个引用，因此切片是引用类型    \n切片的长度可以改变，因此，切片是一个可变的数组  \n\n### 定义 \n```go\n    var 变量名 []类型\n    //eg\n    var str []string  \n    var arr []int\n\n```\n\n### 初始化\n```go\n    //方法1 基于数组  \n    //a[start:end]创建一个包括从start到end-1的切片  \n    a := [5]int{1,2,3,4,5}\n    var b[]int = a[1:4] //2 3 4 \n\n    //eg\n    a := [...]string{\"a\", \"b\", \"c\", \"d\", \"d\", \"f\", \"g\", \"h\"}\n    b := a[1:3]  //b的长度是2, cap是7\n    //方法二\n    c := []int{6,7,8} //写长度就是数组  \n```\n\n### 操作\n```go\n    //包含start到end之间的元素，但不包含end  \n    var slice []int = arr[start:end]  \n    var slice []int = arr[:end]  //var slice []int = arr[0:end]\n    var slice[]int = arr[start:] //var slice []int = arr[start:len(arr)]\n    var slice[]int = arr[:] //var slice []int = arr[0, len(arr)]\n\n```\n\n```go  \n    //创建\n    var slice []type = make([]type, len)  \n    slice  := make([]type, len)  \n    slice  := make([]type, len, cap)  //如果使用[]访问超过len的空间，需要使用append插入元素, 否则会panic    \n```  \n![p6](/images/go_20200408_4.png) \n\n```go\n    //将切片追加到另一个切片末尾  \n    var a []int = []int{1, 3, 4}\n\tvar b []int = []int{4, 5, 6}\n\ta = append(a, 23, 34, 45)\n\ta = append(a, b...) //将b展开\n```\n* 拷贝\n```go\n\tvar a []int = []int{1}\n\tvar b []int = []int{4, 5, 6}\n\tcopy(a, b) //不会对被拷贝的切片扩容  \n```\n\n* cap\ncap可以求出slice最大的容量，0 <= len(slice) <= cap(array)，其中array  \n如果要切片最后一个元素去掉，可以这么写: slice = slice[:len(slice)-1]  \n\n* 切片再切片\n```go\n\ta := [...]string{\"a\", \"b\", \"c\", \"d\", \"d\", \"f\", \"g\", \"h\"}\n\tb := a[1:3] //len2, cap 7\n\tb = b[:cap(b)] //len 7 cap 7\n```\n\n* 空切片\n```go\n    var a []int //直接操作会panic\n    if a == nil { //判空 \n\t\tfmt.Printf(\"a is nil\\n\")\n\t}\n\n    a = append(a, 100) //对空切片扩容  \n```\n\n* 传参  \n```go\n    func sumArray(a []int) int {\n        var sum int = 0\n        for _, v := range a {\n            sum = sum + v\n        }\n        return sum\n    }\n\n    var a [10]int = [10]int{1, 3, 3, 4, 5, 5, 8}\n    sum := sumArray(a[:]\n    \n```\n\n\n\n### 切片的内存布局    \n![p5](/images/go_20200408_3.png)  \n\n\n### string与slice  \nstring底层就是一个byte的数组，因此，也可以进行切片操作  \n```go  \nstr := “hello world”  \ns1 := str[0:5]  \nfmt.Println(s1)  \ns2 := str[5:]  \nfmt.Println(s2)  \n```  \n\n### 切片示例\n[生成密码](https://github.com/colinblack/go_devel/blob/master/tools/passwd/passwd.go)\n\n\n\n\n## map  \n```go  \n//key-value的数据结构，又叫字典或关联数组  \n//声明是不会分配内存的，初始化需要make  \n// map是引用类型  \nvar map1 map[keytype]valuetype  \nvar a map[string]string  \nvar a map[string]int  \nvar a map[int]string  \nvar a map[string]map[string]string  \n\n//申明时初始化\nvar a map[string]string = map[string]string{“hello”: “world”}  \n//make初始化\na := make(map[string]string, 10)  \n\n```\n* 操作  \n```go\n\n    a[“hello”] = “world”            //插入和更新  \n    Val, ok := a[“hello”]           //查找  \n    for k, v := range a {           //遍历  \n        fmt.Println(k,v)  \n    }  \n    delete(a, “hello”)              //删除  \n    len(a)                          //长度  \n\n    //slice of map  \n    Items := make([]map[int][int], 5)  \n    For I := 0; I < 5; i++ {  \n            items[i] = make(map[int][int])  \n    }  \n\n```  \n\n\n\n\n* 排序  \nmap中key值是无序的  \na. 先获取所有key，把key进行排序  \nb. 按照排序好的key，进行遍历  \n\n* 翻转   \n初始化另外一个map，把key、value互换即可  \n\n\n## 并发  \n* 线程同步   \na. import(“sync”)  \nb. 互斥锁, var mu sync.Mutex  \nc. 读写锁, var mu sync.RWMutex  \n\n\n## struct  \n* 用来自定义复杂数据结构  \n* struct里面可以包含多个字段（属性）  \n* struct类型可以定义方法，注意和函数的区分  \n* struct类型是值类型  \n* struct类型可以嵌套  \n* Go没有class类型，只有struct类型  \n* 结构体内字段地址连续\n* struct没有构造函数，一般可以使用工厂模式来解决这个问题  \n\n```go  \n    type student struct {  \n        Name stirng  \n        Age int  \n    }  \n\n    //初始化 \n    user := student{\n        Name : \"user\",\n        Age  : 18,\n    }\n\n    func NewStudent(name string, age int) *student {  \n        return &student{  \n            Name:name,  \n            Age:age,  \n        }  \n    }  \n\n\n    S := new (student)  \n    S := model.NewStudent(“tony”, 20)  \n```  \n\n* 指向结构体的指针 \n```go\n    var user *student //nil\n    var user01 *student = &student{}\n    user01.Name=\"user01\" //指针使用.操作，是编译器简化了\n\n    var user02 *student = &student{\n        Name : user02,\n        Age  : 18,\n    }\n\n    var user03 *student = new(student)\n```\n\n* 结构体嵌套 \n```go\n    type Address struct {\n        Province string\n        City     string\n    }\n\n    type User struct {\n        Username string\n        Sex      string\n        address  *Address\n    }\n\n\tuser := &User{\n\t\tUsername: \"user01\",\n\t\tSex:      \"man\",\n\t\taddress: &Address{\n\t\t\tProvince: \"beijing\",\n\t\t\tCity:     \"beijing\",\n\t\t},\n\t}\n```\n\n\n* 匿名字段   \n```go\n    //匿名字段默认采用类型名作为字段名 \n    type User struct { \n        Username string\n        Sex string\n        Age int\n        AvatarUrl string\n        int\n        string\n    }\n\n    var s User\n    s.int = 100\n    s.string=\"hello\"\n\n    //嵌套结构体匿名字段 \n    type Address struct {\n\t    Province   string\n    \tCity       string\n    \tCreateTime string\n    }\n    \n    type User struct {\n    \tUsername string\n    \tSex      string\n    \t*Address\n    }\n\n    //方法1\n    var user User\n    user.Address = &Address{\n\t\tProvince: \"bj\",\n\t\tCity:     \"bj\",\n\t}\n\n    //方法2\n    user.Province = \"bj01\"\n\tuser.City = \"bj01\"\n\n\n    //字段冲突解决 \n    type User01 struct {\n        City     string\n        Username string\n        Sex      string\n        *Address\n        *Email\n    }\n\n    var user01 User01\n    user01.City = \"bj\" //此时因为User01中有City被有限房屋， 如果没有再访问Address中City\n    user.Address.CreateTime = \"001\" //Address和Email中都有CreateTime需要指明 \n\n```\n\n* tag\n结构体的元信息，可以在运⾏的时候通过反射的机制读取出来\n```go\n    type User struct { \n        Username string `json:”username”,db:”user_name”`\n        Sex string `json:”sex”`\n        Age int `json:”age”`\n        avatarUrl string\n        CreateTime string\n    }\n\n    var user User\n\n    data, _ := json.Marshal(user)\n\n\n```\n* 结构体与json序列化  \n\n\n\n\n## 方法  \nGolang中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct  \n```go\n    //定义\n    func (recevier type) methodName(参数列表)(返回值列表){}  \n\n\n    type People struct {\n        Name    string\n        Country string\n    }\n\n    func (p People) Print() {\n        fmt.Printf(\"name=%s country=%s\\n\", p.Name, p.Country)\n    }\n\n    func (p People) Set(name string, country string) {\n        p.Name = name\n        p.Country = country\n    }\n\n    func (p *People) SetV2(name string, country string) {\n        p.Country = country\n        p.Name = name\n    }\n\n\tvar p1 People = People{\n\t\tName:    \"people01\",\n\t\tCountry: \"china\",\n\t}\n    p1.Set(\"people02\", \"enligsh\")  //传值不能改变p1的成员\n    (&p1).SetV2(\"people02\", \"english\") //要传指针 \n    p1.SetV2(\"people02\", \"english\")\n\n    //可以为这个包中的任意类型增加方法  \n    type Integer int\n    func (i Integer) Print() {\n\tfmt.Println(i)\n}\n\n\n```\n\n\n\n## 链表  \n```go  \ntype Student struct{  \n    Name string  \n    Next *Student  \n}  \n```  \n\n\n## 继承   \n通过匿名字段来实现   \n```go\n    type Animal struct {\n        Name string\n        Sex  string\n    }\n\n    func (a *Animal) Talk() {\n        fmt.Printf(\"i'talk, i'm %s\\n\", a.Name)\n    }\n\n    type PuruAnimal struct {\n    }\n\n    func (p *PuruAnimal) Talk() {\n        fmt.Println(\"buru dongwu talk\")\n    }\n\n    type Dog struct {\n        Feet string\n        //Animal\n        *Animal   \n        *PuruAnimal\n    }\n\n    func (d *Dog) Eat() {\n        fmt.Println(\"dog is eat\")\n    }\n\n    /*\n    func (d *Dog) Talk() {\n        fmt.Println(\"dog is talking\")\n    }*/\n\n    func main() {\n        var d *Dog = &Dog{\n            Feet: \"four feet\",\n            Animal: &Animal{\n                Name: \"dog\",\n                Sex:  \"xiong\",\n            },\n        }\n\n        d.Eat()\n        d.Animal.Talk() \n        d.PuruAnimal.Talk()\n    }\n\n```\n\n\n\n\n## 接口  \nInterface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量  \n如果一个变量含有了多个interface类型的方法，那么这个变量就实现了多个接口  \n如果一个变量只含有了1个interface的方部分方法，那么这个变量没有实现这个接口  \n\n## 类型断言  \n类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型可以采用以下方法进行转换  \n```go  \nvar t int  \nvar x interface{}  \nx = t  \ny, ok = x.(int)   //转成int，带检查  \n```  \n\n## 反射  \n```go  \n可以在运行时动态获取变量的相关信息  \nimport (“reflect”)  \nreflect.TypeOf，获取变量的类型，返回reflect.Type类型  \nreflect.ValueOf，获取变量的值，返回reflect.Value类型  \nreflect.Value.Kind，获取变量的类别，返回一个常量  \nreflect.Value.Interface()，转换成interface{}类型  \nreflect.Value.Kind()方法返回的常量  \n```  \n![p7](/images/go_20200408_5.png)  \n\n## IO  \n```go  \n终端读写  \nos.Stdin：标准输入  \nos.Stdout：标准输出  \nos.Stderr：标准错误输出  \n\n文件写入  \nos.OpenFile(“output.dat”,  os.O_WRONLY|os.O_CREATE, 0666)  \n第二个参数：文件打开模式：  \n1. os.O_WRONLY：只写  \n2. os.O_CREATE：创建文件  \n3. os.O_RDONLY：只读  \n4.  os.O_RDWR：读写  \n5.  os.O_TRUNC ：清空  \n第三个参数：权限控制：  \nr ——> 004  \nw——> 002  \nx——> 001  \n\n命令行参数  \nos.Args是一个string的切片，用来存储所有的命令行参数  \n```  \n## 序列化  \n### Json  \n```go  \n导入包：import “encoding/json”  \n序列化: json.Marshal(data interface{})  \n反序列化: json.UnMarshal(data []byte,  v  interface{})  \n```  \n\n## goroutine  \n不同goroutine之间如何通信  \n* 全局变量和锁同步  \n* Channel  \n  类似unix中的管道  \n  先进先出  \n  线程安全, 多个goroutine同时访问, 不需要加锁  \n  channel是有类型的, 一个整数的channel只能存放整数  \n  channel带缓冲区  \n\n## 单元测试  \n文件名必须以_test.go结尾\n函数名必须以Test开头\n\n\n\n","source":"_posts/go.md","raw":"---\ntitle: go\ndate: 2020-07-04 15:26:14\ntags:\ncategories:\n\t- go\n---\n\n\n<!-- more -->  \n## 项目构建\n* 个人  \n![p1](/images/go_20200706_p1.png)\n\n* 公司  \n![p2](/images/go_20200706_p2.png)\n\n\n## 工具\n```go\n    go fmt -w *.go   //格式化代码 \n    go fmt github.com/hello   \n    go run  src/xx/xx.go  //编译+执行\n    go build -o /bin/test /src/test  //编译生成二进制文件， -o指定目录\n    go build  github.com/xx   //注意src目录不用写\n    go install  github.com/xx  //生成可执行文件到bin目录下\n    go env //显示环境变量\n    go get //安装第三方包  \n```\n\n\n\n## 标识符  \n标识符以字母或下划线开头，大小写敏感  \n\n* 保留关键字  \n```go\n    break default func interface select case defer go map struct chan else goto package switch  \n    const fallthough if range type continue for import return var   \n```\n\n## 基本结构\n* 可执行程序的包名必须为main, 且包含一个main函数 \n* go build; go install 对于非main包会在GOPATH pkg 中生成静态库文件 \n\n\n\n* 包的别名  \n```go\n    import(  \n        a  \"fmt\"  //a是fmt的别名  \n    )  \n```\n\n* 访问控制规则    \n大写函数/变量可导出      \n小写函数变量是私有的，外部包不能访问    \n\n* 万能格式输出%v   \n\n## 初始化    \n\n* init函数    \n每个包里都有0个或多个init函数， 在main函数调用之前会执行init\n```go\n    //无参数和返回值 \n    func init(){\n\n    }\n\n```\n* 包初始化顺序 \n全局变量 -> init -> main\n\n* 有import的情况 \n![go_20200723_1](/images/go_20200723_p1.jpg)\n\n\n```go\nimport(  \n     \"test\"  //仅初始化， 不使用包里面的东西  \n)  \n```\n\n嵌套包的初始化顺序， 最里层包先初始化     \n![p3](/images/go_20200408_1.png)  \n\n## 数据类型  \n\n```go\n    int int8 int16 int32 int64 uint8 uint16 uint32 uint64 float32 float64\n```\n\n### 标识符  \n以字母或_开头, 后面跟着字母,_或数字  \n\n\n### 关键字 \n```go\n   break default func interface select case defer go map struct \n   chan else goto package switch const fallthough  if range type \n   continue for import return var \n```\n### 常量  \n编译时已经确定, const修饰，只读    \n常量必须要赋值   \n```go  \nconst 只能修饰boolean, number(int相关， 浮点， complex)和string  \nconst b string = \"hello word\"  \nconst b = \"hello word\"  \nconst c = getValue()  //错误，与c++不同  \n\n\n//优雅的写法  \nconst(  \n    a = 0  \n    b = 1  \n    c = 2 \n    d     //2 \n)  \n\n//更加专业的写法 \nconst(  \n    a = iota //0  \n    b  //1  \n    c   //2  \n)  \n\nconst(  \n    a = 1 << iota //1\n    b  //2 \n    c   //4  \n)  \n\nconst(\n    a  = iota  //0\n    b          //1 \n    c          //2 \n    d  = 8    //8  \n    e         //8 \n    f  = iota //5\n    g         //6\n)\n```  \n### 变量  \n```go  \n//第一种写法\nvar identifier type  \nvar a int  \nvar b string  \nvar c bool  \nd int = 8  \ne string = \"hello world\"  \n\n//第二种写法\nVar(  \n    a int  //默认0  \n    b string //默认\"\"  \n    c bool //默认false  \n    d = 8  \n    e = \"hello world\"  \n)  \n```  \n### 值类型和引用类型  \n值类型： 基本数据类型int, float, bool, string以及数组和struct，内存在栈中分配  \n引用类型： 指针, slice, map, chan, interface等， 内存在对上分配，GC回收  \n\n变量的作用域  \n局部变量--生命周期在函数内或语句块内  \n全局变量--生命周期在整个包，大写的可以外部访问  \n a :=1 实际是两条语句: var a int a = 1 go中不能在函数外赋值，所以:= 不能用于函数外   \n\n\n### 指针类型   \nvar p *int = &a  \n```go\n//传递数组指针和c数组指针类似 \n    func modify(arr *[3]int) { \n        (*arr)[0] = 90\n    }\n    \n    func main() { \n        a := [3]int{89, 90, 91}\n        modify(&a)\n        fmt.Println(a) \n    }\n\n//切片是引用类型 \nfunc modify(sls []int) { \n     sls[0] = 90\n}\nfunc main() { \n     a := [3]int{89, 90, 91}\n     modify(a[:])\n     fmt.Println(a)\n}\n\n```\n\n\n\n\n### 类型转化  \ntype(var)  \nint 和 int32是不同类型， 不能直接运算  \n\n### 字符串  \n* 两种表示方式  \n1.\"\" 允许转义  \n2.`` 原生字符串，允许换行  \n```go  \n    == //比较\n    len(str)  //长度\n    +, fmt.Sprintf //拼接\n    strings\n    strings.Contains  //包含  \n    strings.HasPrefix(s string, prefix string) bool //判断字符串s是否以prefix开头  \n    strings.HasSuffix(s string, suffix string) bool //判断字符串s是否以suffix结尾。  \n    strings.Index(s string, str string) int  //判断str在s中首次出现的位置，如果没有出现，则返回-1  \n    strings.LastIndex(s string, str string) int //判断str在s中最后出现的位置，如果没有出现，则返回-1  \n    strings.Replace(str string, old string, new string, n int) //字符串替换  \n    strings.Count(str string, substr string)int //字符串计数  \n    strings.ToLower(str string)string //转为小写  \n    strings.ToUpper(str string)string //转为大写  \n    strings.TrimSpace(str string) //去掉字符串首尾空白字符  \n    strings.Trim(str string, cut string) //去掉字符串首尾cut字符  \n    strings.TrimLeft(str string, cut string) //去掉字符串首cut字符  \n    strings.TrimRight(str string, cut string) //去掉字符串尾cut字符  \n    strings.Field(str string) //返回str空格分隔的所有子串的slice  \n    strings.Split(str string, split string) //返回str split分隔的所有子串的slice  \n    strings.Join(s1 []string, sep string) //用sep把s1中的所有元素链接起来  \n    strconv.Itoa(i int) //把一个整数i转成字符串  \n    strconv.Atoi(str string)(int, error) //把一个字符串转成整数  \n```  \n* 字符串底层是byte数组, 可以和[]byte类型互相转换   \n```go\n//修改字符串  \n    var str=\"hello\"\n    var byteSlice []byte\n    byteSlice = []byte(str)\n    byteSlice[0] = '0'\n    str = string(byteSlice\n```\n* rune表示utf8的字符  \n```go\n    var str=\"哈\"\n\tvar runeSlice []rune\n\truneSlice = []rune(str)\n\tfmt.Printf(\"str 长度:%d, len(str)=%d\\n\", len(runeSlice), len(str) //1, 3\n```\n\n\n### 时间和日期  \n```go  \n    //获取当前时间\n    now := time.Now()  \n\n    //获取时间戳\n    timestamp := time.Now().Unix()\n\n    //时间戳转time类型  \n    timeobj := time.Unix(timestamp, 0)\n\n    time.Now().Day()，time.Now().Minute()，time.Now().Month()，time.Now().Year()  \n\n    //格式化\n    fmt.Printf(“%02d/%02d%02d %02d:%02d:%02d”, now.Year()......)  \n    //time.Duration用来表示纳秒  \n    //一些常量  \n    const (  \n        Nanosecond  Duration = 1  \n        Microsecond          = 1000 * Nanosecond  \n        Millisecond          = 1000 * Microsecond  \n        Second               = 1000 * Millisecond  \n        Minute               = 60 * Second  \n        Hour                 = 60 * Minute  \n    )  \n    //格式化\n    now := time.Now()  \n    fmt.Println(now.Format(“02/1/2006 15:04”))  \n    fmt.Println(now.Format(“2006/1/02 15:04”))  \n    fmt.Println(now.Format(“2006/1/02”))  \n```  \n* 定时器  \n```go\n\tticker := time.Tick(1*time.Second)\n\tfor i := range ticker {\n\t\tfmt.Printf(\"%v\\n\", i) //打印出当前时间 \n\t}\n```\n\n\n## 流程控制  \n```go  \n    //if  \n    if condition {  \n    }  \n    \n    if condition {  \n    } else {  \n    }  \n    \n    if condition1 {  \n    } else if condition2 {  \n    } else if condition3 {  \n    } else {  \n    }  \n    //错误代码\n    if condition {  \n    }  \n    else{     //else必须和上一个}在一行否则编译不过去  \n    }  \n    //switch  \n    switch var {  \n        case var1:  \n        fallthrough //继续往下执行  \n        case var2:  \n        case var3:  \n        default:  \n    }  \n    //注意没有break  \n    （2）switch var {  \n            case var1, var2: //多条件在一行  \n            case var 3:  \n            default:  \n            }  \n     (3) switch{  //没有变量  \n                condition1:  \n                condition2:  \n                default:  \n            }  \n     (4) switch 语句块 {  \n         }  \n     //for  \n     (1) for i := 0; i < 100;  i++{  //注意for没有()  \n        }  \n\n     (2)  for 条件{  \n        }  \n\n     (3) fro range  \n        str := “hello world,中国”  \n        for i, v := range str {  \n            fmt.Printf(“index[%d] val[%c] len[%d]\\n”, i, v, len([]byte(v)))  \n        }  \n```  \n\n## 函数\n```go\n//其中参数列表和返回值列表是可选\nfunc functionname([parametername type]) [returntype] { \n//function body\n}\n\n```\n\n不支持重载，一个包不能有两个名字一样的函数  \n函数是一等公民，函数也是一种类型，一个函数可以赋值给变量  \n匿名函数  \n多返回值  \n```go\n    func calc(a, b int) (sum int, sub int) {\n        sum = a + b\n        sub = a - b\n        return  //返回sum, sub\n    }\n\n    sum, _ := calc(100, 200); //忽略返回值  \n\n```\n\n可变参\n```go\n    func calc_v2(a int, b ...int) int {\n        sum := a\n        for i := 0; i < len(b);i++ {\n            sum = sum + b[i]\n        }\n        return sum\n    }\n\n    sum := calc_v2(10);\n```\n\n### defer  \n当函数返回时，执行defer语句。因此，可以用来做资源清理  \n多个defer语句，按先进后出的方式执行  \ndefer语句中的变量，在defer声明时就决定了   \n```go  \n    //关闭文件句柄 \n    func read() {  \n        file := open(filename)  \n        defer file.Close()  \n    }  \n    //锁资源释放  \n    func read() {  \n        mc.Lock()  \n        defer mc.Unlock()  \n        //其他操作  \n    }    \n    //数据库连接释放  \n    func read() {  \n        conn := openDatabase()  \n        defer conn.Close()  \n        //其他操作  \n    }  \n\n    func testDefer3() {\n\t    var i int = 0\n\t    defer fmt.Printf(\"defer i=%d\\n\", i)  //打印结果i=0\n\t    i= 1000\n\t    fmt.Printf(\"i=%d\\n\", i)\n    }\n```  \n\n### 内置函数  \n```go  \n    不需要导入包  \n    close：主要用来关闭channel  \n    len：用来求长度，比如string、array、slice、map、channel  \n    new：用来对各种类型分配内存，主要用来分配值类型，比如int、struct。返回的是指针  \n    make：用来对内建类型分配内存，主要用来分配引用类型，比如channel map slice  \n    append：用来追加元素到数组、slice中  \n    panic和recover：用来做错误处理  \n\n    var b *[]int = new([]int) \n    //*b[0] = 100 error, 需要用make初始化 \n    (*b) = make([]int, 5, 100)\n\n```  \n\n\n\n* new和make的区别  \n![p4](/images/go_20200408_2.png)  \n\n\n### 匿名函数  \n```go\n    func testFunc2() {\n        f1 := func (a, b int) int {  //匿名函数  \n            return a + b\n        }\n\n        fmt.Printf(\"type of f1=%T\\n\", f1) //%T类型 \n        sum := f1(2, 5)\n        fmt.Printf(\"sum=%d\\n\", sum)\n    }\n\n    //defer和匿名函数  \n    func testFunc4() {\n        var i int = 0\n        defer func() {\n            fmt.Printf(\"defer i=%d\\n\", i) //i=100\n        }()\n\n        i = 100\n        fmt.Printf(\"i=%d\\n\", i)\n        return\n    }\n```\n### 函数类型作参数 \n```go\n    func calc(a , b int, op func(int, int)int) int {\n        return op(a, b)\n    }\n\n```\n\n### 闭包\n```go\n    //eg1\n    func add(base int) func(int) int {\n    return func(i int) int {\n    base += i\n    return base\n    }\n    }\n\n    tmp1 := add(10)\n    fmt.Println(tmp(1), tmp(2))  //11, 13\n    tmp2 := add(100) //101, 103\n    fmt.Println(tmp2(1), tmp2(2))\n\n    //eg2\n    func makeSuffixFunc(suffix string) func(string) string { \n    return func(name string) string { \n    if !strings.HasSuffix(name, suffix) { \n    return name + suffix \n    } \n    return name \n    } \n    }\n\n    func1 := makeSuffixFunc(\".bmp\") \n    func2 := makeSuffixFunc(\".jpg\") \n    fmt.Println(func1(\"test\"))  //test.bmp\n    fmt.Println(func2(\"test\")) //test.jpg\n\n\n    //eg3\n    func calc(base int) (func(int) int, func(int) int) {\n    add := func(i int) int {\n    base += i\n    return base\n    }\n    sub := func(i int) int {\n    base -= i\n    return base\n    }\n    return add, sub\n    }\n\n\n    f1, f2 := calc(10)\n    fmt.Println(f1(1), f2(2)) //11, 9\n    fmt.Println(f1(3), f2(4)) //12, 8\n    fmt.Println(f1(5), f2(6)) //13, 7\n    fmt.Println(f1(7), f2(8)) //14, 6\n\n    //eg4\n    for i:=0; i<5; i++ {\n    go func(){\n        fmt.Println(i) //i全=5\n    }()\n\n    go func1(i int){\n        fmt.Println(i)\n    }(i)    //1,2,3,4,5\n\n    }\n    time.Sleep(time.Second)\n\n```\n\n## 数组   \n* 定义\n```go\n    var a [len]int\n    //eg\n    var a[5]int \n```\n长度是数组类型的一部分，因此，var a[5] int和var a[10]int是不同的类型, 不能a=b  \n数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1  \n访问越界，如果下标在数组合法范围之外，则触发访问越界，会panic  \n数组是值类型，因此改变副本的值，不会改变本身的值 \n\n* 初始化  \n整数数组元素默认初始化是0, 字符串数组默认初始化\"\", 浮点型是0.0\n```go\nvar age0 [5] int = [5] int{1,2,3} \nvar age1 = [5]int{1,2,3,4,5}  \nvar age2 = [...]int{1,2,3,4,5,6}  \nage3 := [5]int{1,2,3} //1 2 3 0 0  \nvar str = [5]string{3:”hello world”, 4:”tom”} //指定索引赋值  \n```  \n\n* 遍历  \n```go\n    \n    for i := 0; i < len(a); i++ {\n\t\tfmt.Printf(\"a[%d]=%d\\n\", i, a[i])\n\t}\n    \n    for _, value := range a {\n\t\tfmt.Printf(\"%d\\n\", value)\n    }\n```\n\n* 多维数组 \n```go \n    var age [5][3] int  \n    var age [5][3] int = [...][3]int{{1, 2 , 3}, {4, 5, 6}}  \n\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 2; j++ {\n\t\t\tfmt.Printf(\"%d \", a[i][j])\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i, val := range a {\n\t\tfmt.Printf(\"row[%d]=%v\\n\", i, val)\n\t\tfor j, val2 := range val {\n\t\t\tfmt.Printf(\"(%d,%d)=%d \",i, j, val2)\n\t\t}\n\t\tfmt.Println()\n    }\n```\n\n* 数组拷贝\n数组是值类型\n```go\n    //b初始化时是深拷贝    \n\ta := [3]int{10, 20, 30}\n\tb := a\n\tb[0] = 1000\n\tfmt.Printf(\"a=%v\\n\", a) //10, 20, 30\n\tfmt.Printf(\"b=%v\\n\", b) //1000, 20, 30\n```\n* 数组传参 \n```go\n    //数组在传参的时候会深拷贝   \n    func modify(b [3]int) {\n\t    b[0] = 1000\n    }\n\n    func modify(b [3][3]int){\n        b[2][1] = 0\n    }\n```\n\n\n## 切片\n基于数组类型做的一层封装，可以自动扩容  \n切片是数组的一个引用，因此切片是引用类型    \n切片的长度可以改变，因此，切片是一个可变的数组  \n\n### 定义 \n```go\n    var 变量名 []类型\n    //eg\n    var str []string  \n    var arr []int\n\n```\n\n### 初始化\n```go\n    //方法1 基于数组  \n    //a[start:end]创建一个包括从start到end-1的切片  \n    a := [5]int{1,2,3,4,5}\n    var b[]int = a[1:4] //2 3 4 \n\n    //eg\n    a := [...]string{\"a\", \"b\", \"c\", \"d\", \"d\", \"f\", \"g\", \"h\"}\n    b := a[1:3]  //b的长度是2, cap是7\n    //方法二\n    c := []int{6,7,8} //写长度就是数组  \n```\n\n### 操作\n```go\n    //包含start到end之间的元素，但不包含end  \n    var slice []int = arr[start:end]  \n    var slice []int = arr[:end]  //var slice []int = arr[0:end]\n    var slice[]int = arr[start:] //var slice []int = arr[start:len(arr)]\n    var slice[]int = arr[:] //var slice []int = arr[0, len(arr)]\n\n```\n\n```go  \n    //创建\n    var slice []type = make([]type, len)  \n    slice  := make([]type, len)  \n    slice  := make([]type, len, cap)  //如果使用[]访问超过len的空间，需要使用append插入元素, 否则会panic    \n```  \n![p6](/images/go_20200408_4.png) \n\n```go\n    //将切片追加到另一个切片末尾  \n    var a []int = []int{1, 3, 4}\n\tvar b []int = []int{4, 5, 6}\n\ta = append(a, 23, 34, 45)\n\ta = append(a, b...) //将b展开\n```\n* 拷贝\n```go\n\tvar a []int = []int{1}\n\tvar b []int = []int{4, 5, 6}\n\tcopy(a, b) //不会对被拷贝的切片扩容  \n```\n\n* cap\ncap可以求出slice最大的容量，0 <= len(slice) <= cap(array)，其中array  \n如果要切片最后一个元素去掉，可以这么写: slice = slice[:len(slice)-1]  \n\n* 切片再切片\n```go\n\ta := [...]string{\"a\", \"b\", \"c\", \"d\", \"d\", \"f\", \"g\", \"h\"}\n\tb := a[1:3] //len2, cap 7\n\tb = b[:cap(b)] //len 7 cap 7\n```\n\n* 空切片\n```go\n    var a []int //直接操作会panic\n    if a == nil { //判空 \n\t\tfmt.Printf(\"a is nil\\n\")\n\t}\n\n    a = append(a, 100) //对空切片扩容  \n```\n\n* 传参  \n```go\n    func sumArray(a []int) int {\n        var sum int = 0\n        for _, v := range a {\n            sum = sum + v\n        }\n        return sum\n    }\n\n    var a [10]int = [10]int{1, 3, 3, 4, 5, 5, 8}\n    sum := sumArray(a[:]\n    \n```\n\n\n\n### 切片的内存布局    \n![p5](/images/go_20200408_3.png)  \n\n\n### string与slice  \nstring底层就是一个byte的数组，因此，也可以进行切片操作  \n```go  \nstr := “hello world”  \ns1 := str[0:5]  \nfmt.Println(s1)  \ns2 := str[5:]  \nfmt.Println(s2)  \n```  \n\n### 切片示例\n[生成密码](https://github.com/colinblack/go_devel/blob/master/tools/passwd/passwd.go)\n\n\n\n\n## map  \n```go  \n//key-value的数据结构，又叫字典或关联数组  \n//声明是不会分配内存的，初始化需要make  \n// map是引用类型  \nvar map1 map[keytype]valuetype  \nvar a map[string]string  \nvar a map[string]int  \nvar a map[int]string  \nvar a map[string]map[string]string  \n\n//申明时初始化\nvar a map[string]string = map[string]string{“hello”: “world”}  \n//make初始化\na := make(map[string]string, 10)  \n\n```\n* 操作  \n```go\n\n    a[“hello”] = “world”            //插入和更新  \n    Val, ok := a[“hello”]           //查找  \n    for k, v := range a {           //遍历  \n        fmt.Println(k,v)  \n    }  \n    delete(a, “hello”)              //删除  \n    len(a)                          //长度  \n\n    //slice of map  \n    Items := make([]map[int][int], 5)  \n    For I := 0; I < 5; i++ {  \n            items[i] = make(map[int][int])  \n    }  \n\n```  \n\n\n\n\n* 排序  \nmap中key值是无序的  \na. 先获取所有key，把key进行排序  \nb. 按照排序好的key，进行遍历  \n\n* 翻转   \n初始化另外一个map，把key、value互换即可  \n\n\n## 并发  \n* 线程同步   \na. import(“sync”)  \nb. 互斥锁, var mu sync.Mutex  \nc. 读写锁, var mu sync.RWMutex  \n\n\n## struct  \n* 用来自定义复杂数据结构  \n* struct里面可以包含多个字段（属性）  \n* struct类型可以定义方法，注意和函数的区分  \n* struct类型是值类型  \n* struct类型可以嵌套  \n* Go没有class类型，只有struct类型  \n* 结构体内字段地址连续\n* struct没有构造函数，一般可以使用工厂模式来解决这个问题  \n\n```go  \n    type student struct {  \n        Name stirng  \n        Age int  \n    }  \n\n    //初始化 \n    user := student{\n        Name : \"user\",\n        Age  : 18,\n    }\n\n    func NewStudent(name string, age int) *student {  \n        return &student{  \n            Name:name,  \n            Age:age,  \n        }  \n    }  \n\n\n    S := new (student)  \n    S := model.NewStudent(“tony”, 20)  \n```  \n\n* 指向结构体的指针 \n```go\n    var user *student //nil\n    var user01 *student = &student{}\n    user01.Name=\"user01\" //指针使用.操作，是编译器简化了\n\n    var user02 *student = &student{\n        Name : user02,\n        Age  : 18,\n    }\n\n    var user03 *student = new(student)\n```\n\n* 结构体嵌套 \n```go\n    type Address struct {\n        Province string\n        City     string\n    }\n\n    type User struct {\n        Username string\n        Sex      string\n        address  *Address\n    }\n\n\tuser := &User{\n\t\tUsername: \"user01\",\n\t\tSex:      \"man\",\n\t\taddress: &Address{\n\t\t\tProvince: \"beijing\",\n\t\t\tCity:     \"beijing\",\n\t\t},\n\t}\n```\n\n\n* 匿名字段   \n```go\n    //匿名字段默认采用类型名作为字段名 \n    type User struct { \n        Username string\n        Sex string\n        Age int\n        AvatarUrl string\n        int\n        string\n    }\n\n    var s User\n    s.int = 100\n    s.string=\"hello\"\n\n    //嵌套结构体匿名字段 \n    type Address struct {\n\t    Province   string\n    \tCity       string\n    \tCreateTime string\n    }\n    \n    type User struct {\n    \tUsername string\n    \tSex      string\n    \t*Address\n    }\n\n    //方法1\n    var user User\n    user.Address = &Address{\n\t\tProvince: \"bj\",\n\t\tCity:     \"bj\",\n\t}\n\n    //方法2\n    user.Province = \"bj01\"\n\tuser.City = \"bj01\"\n\n\n    //字段冲突解决 \n    type User01 struct {\n        City     string\n        Username string\n        Sex      string\n        *Address\n        *Email\n    }\n\n    var user01 User01\n    user01.City = \"bj\" //此时因为User01中有City被有限房屋， 如果没有再访问Address中City\n    user.Address.CreateTime = \"001\" //Address和Email中都有CreateTime需要指明 \n\n```\n\n* tag\n结构体的元信息，可以在运⾏的时候通过反射的机制读取出来\n```go\n    type User struct { \n        Username string `json:”username”,db:”user_name”`\n        Sex string `json:”sex”`\n        Age int `json:”age”`\n        avatarUrl string\n        CreateTime string\n    }\n\n    var user User\n\n    data, _ := json.Marshal(user)\n\n\n```\n* 结构体与json序列化  \n\n\n\n\n## 方法  \nGolang中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct  \n```go\n    //定义\n    func (recevier type) methodName(参数列表)(返回值列表){}  \n\n\n    type People struct {\n        Name    string\n        Country string\n    }\n\n    func (p People) Print() {\n        fmt.Printf(\"name=%s country=%s\\n\", p.Name, p.Country)\n    }\n\n    func (p People) Set(name string, country string) {\n        p.Name = name\n        p.Country = country\n    }\n\n    func (p *People) SetV2(name string, country string) {\n        p.Country = country\n        p.Name = name\n    }\n\n\tvar p1 People = People{\n\t\tName:    \"people01\",\n\t\tCountry: \"china\",\n\t}\n    p1.Set(\"people02\", \"enligsh\")  //传值不能改变p1的成员\n    (&p1).SetV2(\"people02\", \"english\") //要传指针 \n    p1.SetV2(\"people02\", \"english\")\n\n    //可以为这个包中的任意类型增加方法  \n    type Integer int\n    func (i Integer) Print() {\n\tfmt.Println(i)\n}\n\n\n```\n\n\n\n## 链表  \n```go  \ntype Student struct{  \n    Name string  \n    Next *Student  \n}  \n```  \n\n\n## 继承   \n通过匿名字段来实现   \n```go\n    type Animal struct {\n        Name string\n        Sex  string\n    }\n\n    func (a *Animal) Talk() {\n        fmt.Printf(\"i'talk, i'm %s\\n\", a.Name)\n    }\n\n    type PuruAnimal struct {\n    }\n\n    func (p *PuruAnimal) Talk() {\n        fmt.Println(\"buru dongwu talk\")\n    }\n\n    type Dog struct {\n        Feet string\n        //Animal\n        *Animal   \n        *PuruAnimal\n    }\n\n    func (d *Dog) Eat() {\n        fmt.Println(\"dog is eat\")\n    }\n\n    /*\n    func (d *Dog) Talk() {\n        fmt.Println(\"dog is talking\")\n    }*/\n\n    func main() {\n        var d *Dog = &Dog{\n            Feet: \"four feet\",\n            Animal: &Animal{\n                Name: \"dog\",\n                Sex:  \"xiong\",\n            },\n        }\n\n        d.Eat()\n        d.Animal.Talk() \n        d.PuruAnimal.Talk()\n    }\n\n```\n\n\n\n\n## 接口  \nInterface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量  \n如果一个变量含有了多个interface类型的方法，那么这个变量就实现了多个接口  \n如果一个变量只含有了1个interface的方部分方法，那么这个变量没有实现这个接口  \n\n## 类型断言  \n类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型可以采用以下方法进行转换  \n```go  \nvar t int  \nvar x interface{}  \nx = t  \ny, ok = x.(int)   //转成int，带检查  \n```  \n\n## 反射  \n```go  \n可以在运行时动态获取变量的相关信息  \nimport (“reflect”)  \nreflect.TypeOf，获取变量的类型，返回reflect.Type类型  \nreflect.ValueOf，获取变量的值，返回reflect.Value类型  \nreflect.Value.Kind，获取变量的类别，返回一个常量  \nreflect.Value.Interface()，转换成interface{}类型  \nreflect.Value.Kind()方法返回的常量  \n```  \n![p7](/images/go_20200408_5.png)  \n\n## IO  \n```go  \n终端读写  \nos.Stdin：标准输入  \nos.Stdout：标准输出  \nos.Stderr：标准错误输出  \n\n文件写入  \nos.OpenFile(“output.dat”,  os.O_WRONLY|os.O_CREATE, 0666)  \n第二个参数：文件打开模式：  \n1. os.O_WRONLY：只写  \n2. os.O_CREATE：创建文件  \n3. os.O_RDONLY：只读  \n4.  os.O_RDWR：读写  \n5.  os.O_TRUNC ：清空  \n第三个参数：权限控制：  \nr ——> 004  \nw——> 002  \nx——> 001  \n\n命令行参数  \nos.Args是一个string的切片，用来存储所有的命令行参数  \n```  \n## 序列化  \n### Json  \n```go  \n导入包：import “encoding/json”  \n序列化: json.Marshal(data interface{})  \n反序列化: json.UnMarshal(data []byte,  v  interface{})  \n```  \n\n## goroutine  \n不同goroutine之间如何通信  \n* 全局变量和锁同步  \n* Channel  \n  类似unix中的管道  \n  先进先出  \n  线程安全, 多个goroutine同时访问, 不需要加锁  \n  channel是有类型的, 一个整数的channel只能存放整数  \n  channel带缓冲区  \n\n## 单元测试  \n文件名必须以_test.go结尾\n函数名必须以Test开头\n\n\n\n","slug":"go","published":1,"updated":"2020-07-27T11:59:37.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vi000554yn89o01k6f","content":"<a id=\"more\"></a>\n<h2 id=\"项目构建\">项目构建</h2>\n<ul>\n<li><p>个人<br />\n<img src=\"/images/go_20200706_p1.png\" alt=\"p1\" /></p></li>\n<li><p>公司<br />\n<img src=\"/images/go_20200706_p2.png\" alt=\"p2\" /></p></li>\n</ul>\n<h2 id=\"工具\">工具</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> fmt -w *.<span class=\"keyword\">go</span>   <span class=\"comment\">//格式化代码 </span></span><br><span class=\"line\"><span class=\"keyword\">go</span> fmt github.com/hello   </span><br><span class=\"line\"><span class=\"keyword\">go</span> run  src/xx/xx.<span class=\"keyword\">go</span>  <span class=\"comment\">//编译+执行</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> build -o /bin/test /src/test  <span class=\"comment\">//编译生成二进制文件， -o指定目录</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> build  github.com/xx   <span class=\"comment\">//注意src目录不用写</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> install  github.com/xx  <span class=\"comment\">//生成可执行文件到bin目录下</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> env <span class=\"comment\">//显示环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get <span class=\"comment\">//安装第三方包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"标识符\">标识符</h2>\n<p>标识符以字母或下划线开头，大小写敏感</p>\n<ul>\n<li>保留关键字<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">break</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">interface</span> <span class=\"title\">select</span> <span class=\"title\">case</span> <span class=\"title\">defer</span> <span class=\"title\">go</span> <span class=\"title\">map</span> <span class=\"title\">struct</span> <span class=\"title\">chan</span> <span class=\"title\">else</span> <span class=\"title\">goto</span> <span class=\"title\">package</span> <span class=\"title\">switch</span></span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> fallthough <span class=\"keyword\">if</span> <span class=\"keyword\">range</span> <span class=\"keyword\">type</span> <span class=\"keyword\">continue</span> <span class=\"keyword\">for</span> <span class=\"keyword\">import</span> <span class=\"keyword\">return</span> <span class=\"keyword\">var</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"基本结构\">基本结构</h2>\n<ul>\n<li><p>可执行程序的包名必须为main, 且包含一个main函数</p></li>\n<li><p>go build; go install 对于非main包会在GOPATH pkg 中生成静态库文件</p></li>\n<li><p>包的别名<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(  </span><br><span class=\"line\">    a  <span class=\"string\">\"fmt\"</span>  <span class=\"comment\">//a是fmt的别名  </span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>访问控制规则<br />\n大写函数/变量可导出<br />\n小写函数变量是私有的，外部包不能访问</p></li>\n<li><p>万能格式输出%v</p></li>\n</ul>\n<h2 id=\"初始化\">初始化</h2>\n<ul>\n<li><p>init函数<br />\n每个包里都有0个或多个init函数， 在main函数调用之前会执行init <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无参数和返回值 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>包初始化顺序 全局变量 -&gt; init -&gt; main</p></li>\n<li><p>有import的情况 <img src=\"/images/go_20200723_p1.jpg\" alt=\"go_20200723_1\" /></p></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(  </span><br><span class=\"line\">     <span class=\"string\">\"test\"</span>  <span class=\"comment\">//仅初始化， 不使用包里面的东西  </span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>嵌套包的初始化顺序， 最里层包先初始化<br />\n<img src=\"/images/go_20200408_1.png\" alt=\"p3\" /></p>\n<h2 id=\"数据类型\">数据类型</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">int8</span> <span class=\"keyword\">int16</span> <span class=\"keyword\">int32</span> <span class=\"keyword\">int64</span> <span class=\"keyword\">uint8</span> <span class=\"keyword\">uint16</span> <span class=\"keyword\">uint32</span> <span class=\"keyword\">uint64</span> <span class=\"keyword\">float32</span> <span class=\"keyword\">float64</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"标识符-1\">标识符</h3>\n<p>以字母或_开头, 后面跟着字母,_或数字</p>\n<h3 id=\"关键字\">关键字</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">break</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">interface</span> <span class=\"title\">select</span> <span class=\"title\">case</span> <span class=\"title\">defer</span> <span class=\"title\">go</span> <span class=\"title\">map</span> <span class=\"title\">struct</span></span> </span><br><span class=\"line\"><span class=\"keyword\">chan</span> <span class=\"keyword\">else</span> <span class=\"keyword\">goto</span> <span class=\"keyword\">package</span> <span class=\"keyword\">switch</span> <span class=\"keyword\">const</span> fallthough  <span class=\"keyword\">if</span> <span class=\"keyword\">range</span> <span class=\"keyword\">type</span> </span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"keyword\">for</span> <span class=\"keyword\">import</span> <span class=\"keyword\">return</span> <span class=\"keyword\">var</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常量\">常量</h3>\n<p>编译时已经确定, const修饰，只读<br />\n常量必须要赋值<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 只能修饰boolean, number(<span class=\"keyword\">int</span>相关， 浮点， <span class=\"built_in\">complex</span>)和<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> b <span class=\"keyword\">string</span> = <span class=\"string\">\"hello word\"</span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">\"hello word\"</span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> c = getValue()  <span class=\"comment\">//错误，与c++不同  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优雅的写法  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span>(  </span><br><span class=\"line\">    a = <span class=\"number\">0</span>  </span><br><span class=\"line\">    b = <span class=\"number\">1</span>  </span><br><span class=\"line\">    c = <span class=\"number\">2</span> </span><br><span class=\"line\">    d     <span class=\"comment\">//2 </span></span><br><span class=\"line\">)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更加专业的写法 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span>(  </span><br><span class=\"line\">    a = <span class=\"literal\">iota</span> <span class=\"comment\">//0  </span></span><br><span class=\"line\">    b  <span class=\"comment\">//1  </span></span><br><span class=\"line\">    c   <span class=\"comment\">//2  </span></span><br><span class=\"line\">)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(  </span><br><span class=\"line\">    a = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">//1</span></span><br><span class=\"line\">    b  <span class=\"comment\">//2 </span></span><br><span class=\"line\">    c   <span class=\"comment\">//4  </span></span><br><span class=\"line\">)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">    a  = <span class=\"literal\">iota</span>  <span class=\"comment\">//0</span></span><br><span class=\"line\">    b          <span class=\"comment\">//1 </span></span><br><span class=\"line\">    c          <span class=\"comment\">//2 </span></span><br><span class=\"line\">    d  = <span class=\"number\">8</span>    <span class=\"comment\">//8  </span></span><br><span class=\"line\">    e         <span class=\"comment\">//8 </span></span><br><span class=\"line\">    f  = <span class=\"literal\">iota</span> <span class=\"comment\">//5</span></span><br><span class=\"line\">    g         <span class=\"comment\">//6</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">### 变量  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\"><span class=\"comment\">//第一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> identifier <span class=\"keyword\">type</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> b <span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> c <span class=\"keyword\">bool</span>  </span><br><span class=\"line\">d <span class=\"keyword\">int</span> = <span class=\"number\">8</span>  </span><br><span class=\"line\">e <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种写法</span></span><br><span class=\"line\">Var(  </span><br><span class=\"line\">    a <span class=\"keyword\">int</span>  <span class=\"comment\">//默认0  </span></span><br><span class=\"line\">    b <span class=\"keyword\">string</span> <span class=\"comment\">//默认\"\"  </span></span><br><span class=\"line\">    c <span class=\"keyword\">bool</span> <span class=\"comment\">//默认false  </span></span><br><span class=\"line\">    d = <span class=\"number\">8</span>  </span><br><span class=\"line\">    e = <span class=\"string\">\"hello world\"</span>  </span><br><span class=\"line\">)  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">### 值类型和引用类型  </span></span><br><span class=\"line\"><span class=\"string\">值类型： 基本数据类型int, float, bool, string以及数组和struct，内存在栈中分配  </span></span><br><span class=\"line\"><span class=\"string\">引用类型： 指针, slice, map, chan, interface等， 内存在对上分配，GC回收  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">变量的作用域  </span></span><br><span class=\"line\"><span class=\"string\">局部变量--生命周期在函数内或语句块内  </span></span><br><span class=\"line\"><span class=\"string\">全局变量--生命周期在整个包，大写的可以外部访问  </span></span><br><span class=\"line\"><span class=\"string\"> a :=1 实际是两条语句: var a int a = 1 go中不能在函数外赋值，所以:= 不能用于函数外   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 指针类型   </span></span><br><span class=\"line\"><span class=\"string\">var p *int = &amp;a  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"comment\">//传递数组指针和c数组指针类似 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(arr *[3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">        (*arr)[<span class=\"number\">0</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">        a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">91</span>&#125;</span><br><span class=\"line\">        modify(&amp;a)</span><br><span class=\"line\">        fmt.Println(a) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//切片是引用类型 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(sls []<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">     sls[<span class=\"number\">0</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">     a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">91</span>&#125;</span><br><span class=\"line\">     modify(a[:])</span><br><span class=\"line\">     fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类型转化\">类型转化</h3>\n<p>type(var)<br />\nint 和 int32是不同类型， 不能直接运算</p>\n<h3 id=\"字符串\">字符串</h3>\n<ul>\n<li>两种表示方式<br />\n1.\"\" 允许转义<br />\n2.`` 原生字符串，允许换行<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    == <span class=\"comment\">//比较</span></span><br><span class=\"line\">    <span class=\"built_in\">len</span>(str)  <span class=\"comment\">//长度</span></span><br><span class=\"line\">    +, fmt.Sprintf <span class=\"comment\">//拼接</span></span><br><span class=\"line\">    strings</span><br><span class=\"line\">    strings.Contains  <span class=\"comment\">//包含  </span></span><br><span class=\"line\">    strings.HasPrefix(s <span class=\"keyword\">string</span>, prefix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span> <span class=\"comment\">//判断字符串s是否以prefix开头  </span></span><br><span class=\"line\">    strings.HasSuffix(s <span class=\"keyword\">string</span>, suffix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span> <span class=\"comment\">//判断字符串s是否以suffix结尾。  </span></span><br><span class=\"line\">    strings.Index(s <span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span>  <span class=\"comment\">//判断str在s中首次出现的位置，如果没有出现，则返回-1  </span></span><br><span class=\"line\">    strings.LastIndex(s <span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span> <span class=\"comment\">//判断str在s中最后出现的位置，如果没有出现，则返回-1  </span></span><br><span class=\"line\">    strings.Replace(str <span class=\"keyword\">string</span>, old <span class=\"keyword\">string</span>, <span class=\"built_in\">new</span> <span class=\"keyword\">string</span>, n <span class=\"keyword\">int</span>) <span class=\"comment\">//字符串替换  </span></span><br><span class=\"line\">    strings.Count(str <span class=\"keyword\">string</span>, substr <span class=\"keyword\">string</span>)<span class=\"keyword\">int</span> <span class=\"comment\">//字符串计数  </span></span><br><span class=\"line\">    strings.ToLower(str <span class=\"keyword\">string</span>)<span class=\"keyword\">string</span> <span class=\"comment\">//转为小写  </span></span><br><span class=\"line\">    strings.ToUpper(str <span class=\"keyword\">string</span>)<span class=\"keyword\">string</span> <span class=\"comment\">//转为大写  </span></span><br><span class=\"line\">    strings.TrimSpace(str <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串首尾空白字符  </span></span><br><span class=\"line\">    strings.Trim(str <span class=\"keyword\">string</span>, cut <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串首尾cut字符  </span></span><br><span class=\"line\">    strings.TrimLeft(str <span class=\"keyword\">string</span>, cut <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串首cut字符  </span></span><br><span class=\"line\">    strings.TrimRight(str <span class=\"keyword\">string</span>, cut <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串尾cut字符  </span></span><br><span class=\"line\">    strings.Field(str <span class=\"keyword\">string</span>) <span class=\"comment\">//返回str空格分隔的所有子串的slice  </span></span><br><span class=\"line\">    strings.Split(str <span class=\"keyword\">string</span>, split <span class=\"keyword\">string</span>) <span class=\"comment\">//返回str split分隔的所有子串的slice  </span></span><br><span class=\"line\">    strings.Join(s1 []<span class=\"keyword\">string</span>, sep <span class=\"keyword\">string</span>) <span class=\"comment\">//用sep把s1中的所有元素链接起来  </span></span><br><span class=\"line\">    strconv.Itoa(i <span class=\"keyword\">int</span>) <span class=\"comment\">//把一个整数i转成字符串  </span></span><br><span class=\"line\">    strconv.Atoi(str <span class=\"keyword\">string</span>)(<span class=\"keyword\">int</span>, error) <span class=\"comment\">//把一个字符串转成整数  </span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">* 字符串底层是byte数组, 可以和[]byte类型互相转换   </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"comment\">//修改字符串  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> byteSlice []<span class=\"keyword\">byte</span></span><br><span class=\"line\">    byteSlice = []<span class=\"keyword\">byte</span>(str)</span><br><span class=\"line\">    byteSlice[<span class=\"number\">0</span>] = <span class=\"string\">'0'</span></span><br><span class=\"line\">    str = <span class=\"keyword\">string</span>(byteSlice</span><br></pre></td></tr></table></figure></li>\n<li>rune表示utf8的字符<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> str=<span class=\"string\">\"哈\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> runeSlice []<span class=\"keyword\">rune</span></span><br><span class=\"line\">runeSlice = []<span class=\"keyword\">rune</span>(str)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"str 长度:%d, len(str)=%d\\n\"</span>, <span class=\"built_in\">len</span>(runeSlice), <span class=\"built_in\">len</span>(str) <span class=\"comment\">//1, 3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"时间和日期\">时间和日期</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">    now := time.Now()  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取时间戳</span></span><br><span class=\"line\">    timestamp := time.Now().Unix()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//时间戳转time类型  </span></span><br><span class=\"line\">    timeobj := time.Unix(timestamp, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.Now().Day()，time.Now().Minute()，time.Now().Month()，time.Now().Year()  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//格式化</span></span><br><span class=\"line\">    fmt.Printf(“%<span class=\"number\">02</span>d/%<span class=\"number\">02</span>d%<span class=\"number\">02</span>d %<span class=\"number\">02</span>d:%<span class=\"number\">02</span>d:%<span class=\"number\">02</span>d”, now.Year()......)  </span><br><span class=\"line\">    <span class=\"comment\">//time.Duration用来表示纳秒  </span></span><br><span class=\"line\">    <span class=\"comment\">//一些常量  </span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> (  </span><br><span class=\"line\">        Nanosecond  Duration = <span class=\"number\">1</span>  </span><br><span class=\"line\">        Microsecond          = <span class=\"number\">1000</span> * Nanosecond  </span><br><span class=\"line\">        Millisecond          = <span class=\"number\">1000</span> * Microsecond  </span><br><span class=\"line\">        Second               = <span class=\"number\">1000</span> * Millisecond  </span><br><span class=\"line\">        Minute               = <span class=\"number\">60</span> * Second  </span><br><span class=\"line\">        Hour                 = <span class=\"number\">60</span> * Minute  </span><br><span class=\"line\">    )  </span><br><span class=\"line\">    <span class=\"comment\">//格式化</span></span><br><span class=\"line\">    now := time.Now()  </span><br><span class=\"line\">    fmt.Println(now.Format(“<span class=\"number\">02</span>/<span class=\"number\">1</span>/<span class=\"number\">2006</span> <span class=\"number\">15</span>:<span class=\"number\">04</span>”))  </span><br><span class=\"line\">    fmt.Println(now.Format(“<span class=\"number\">2006</span>/<span class=\"number\">1</span>/<span class=\"number\">02</span> <span class=\"number\">15</span>:<span class=\"number\">04</span>”))  </span><br><span class=\"line\">    fmt.Println(now.Format(“<span class=\"number\">2006</span>/<span class=\"number\">1</span>/<span class=\"number\">02</span>”))  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">* 定时器  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">\tticker := time.Tick(<span class=\"number\">1</span>*time.Second)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> ticker &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"%v\\n\"</span>, i) <span class=\"comment\">//打印出当前时间 </span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"流程控制\">流程控制</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//if  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition1 &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> condition2 &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> condition3 &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//错误代码</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;     <span class=\"comment\">//else必须和上一个&#125;在一行否则编译不过去  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//switch  </span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> <span class=\"keyword\">var</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> var1:  </span><br><span class=\"line\">        <span class=\"keyword\">fallthrough</span> <span class=\"comment\">//继续往下执行  </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> var2:  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> var3:  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//注意没有break  </span></span><br><span class=\"line\">    （<span class=\"number\">2</span>）<span class=\"keyword\">switch</span> <span class=\"keyword\">var</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> var1, var2: <span class=\"comment\">//多条件在一行  </span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">var</span> <span class=\"number\">3</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     (<span class=\"number\">3</span>) <span class=\"keyword\">switch</span>&#123;  <span class=\"comment\">//没有变量  </span></span><br><span class=\"line\">                condition1:  </span><br><span class=\"line\">                condition2:  </span><br><span class=\"line\">                <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     (<span class=\"number\">4</span>) <span class=\"keyword\">switch</span> 语句块 &#123;  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">     <span class=\"comment\">//for  </span></span><br><span class=\"line\">     (<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>;  i++&#123;  <span class=\"comment\">//注意for没有()  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">     (<span class=\"number\">2</span>)  <span class=\"keyword\">for</span> 条件&#123;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">     (<span class=\"number\">3</span>) fro <span class=\"keyword\">range</span>  </span><br><span class=\"line\">        str := “hello world,中国”  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> str &#123;  </span><br><span class=\"line\">            fmt.Printf(“index[%d] val[%c] <span class=\"built_in\">len</span>[%d]\\n”, i, v, <span class=\"built_in\">len</span>([]<span class=\"keyword\">byte</span>(v)))  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 函数</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"comment\">//其中参数列表和返回值列表是可选</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">functionname</span><span class=\"params\">([parametername <span class=\"keyword\">type</span>])</span> [<span class=\"title\">returntype</span>]</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">//function body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不支持重载，一个包不能有两个名字一样的函数<br />\n函数是一等公民，函数也是一种类型，一个函数可以赋值给变量<br />\n匿名函数<br />\n多返回值<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>, sub <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    sum = a + b</span><br><span class=\"line\">    sub = a - b</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"comment\">//返回sum, sub</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum, _ := calc(<span class=\"number\">100</span>, <span class=\"number\">200</span>); <span class=\"comment\">//忽略返回值</span></span><br></pre></td></tr></table></figure></p>\n<p>可变参 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc_v2</span><span class=\"params\">(a <span class=\"keyword\">int</span>, b ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    sum := a</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(b);i++ &#123;</span><br><span class=\"line\">        sum = sum + b[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum := calc_v2(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"defer\">defer</h3>\n<p>当函数返回时，执行defer语句。因此，可以用来做资源清理<br />\n多个defer语句，按先进后出的方式执行<br />\ndefer语句中的变量，在defer声明时就决定了<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//关闭文件句柄 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read</span><span class=\"params\">()</span></span> &#123;  </span><br><span class=\"line\">        file := open(filename)  </span><br><span class=\"line\">        <span class=\"keyword\">defer</span> file.Close()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//锁资源释放  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read</span><span class=\"params\">()</span></span> &#123;  </span><br><span class=\"line\">        mc.Lock()  </span><br><span class=\"line\">        <span class=\"keyword\">defer</span> mc.Unlock()  </span><br><span class=\"line\">        <span class=\"comment\">//其他操作  </span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"comment\">//数据库连接释放  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read</span><span class=\"params\">()</span></span> &#123;  </span><br><span class=\"line\">        conn := openDatabase()  </span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()  </span><br><span class=\"line\">        <span class=\"comment\">//其他操作  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testDefer3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t    <span class=\"keyword\">defer</span> fmt.Printf(<span class=\"string\">\"defer i=%d\\n\"</span>, i)  <span class=\"comment\">//打印结果i=0</span></span><br><span class=\"line\">\t    i= <span class=\"number\">1000</span></span><br><span class=\"line\">\t    fmt.Printf(<span class=\"string\">\"i=%d\\n\"</span>, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 内置函数  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\">    不需要导入包  </span><br><span class=\"line\">    <span class=\"built_in\">close</span>：主要用来关闭channel  </span><br><span class=\"line\">    <span class=\"built_in\">len</span>：用来求长度，比如<span class=\"keyword\">string</span>、array、slice、<span class=\"keyword\">map</span>、channel  </span><br><span class=\"line\">    <span class=\"built_in\">new</span>：用来对各种类型分配内存，主要用来分配值类型，比如<span class=\"keyword\">int</span>、<span class=\"keyword\">struct</span>。返回的是指针  </span><br><span class=\"line\">    <span class=\"built_in\">make</span>：用来对内建类型分配内存，主要用来分配引用类型，比如channel <span class=\"keyword\">map</span> slice  </span><br><span class=\"line\">    <span class=\"built_in\">append</span>：用来追加元素到数组、slice中  </span><br><span class=\"line\">    <span class=\"built_in\">panic</span>和<span class=\"built_in\">recover</span>：用来做错误处理  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b *[]<span class=\"keyword\">int</span> = <span class=\"built_in\">new</span>([]<span class=\"keyword\">int</span>) </span><br><span class=\"line\">    <span class=\"comment\">//*b[0] = 100 error, 需要用make初始化 </span></span><br><span class=\"line\">    (*b) = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* new和make的区别  </span></span><br><span class=\"line\"><span class=\"string\">![p4](/images/go_20200408_2.png)  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 匿名函数  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testFunc2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        f1 := <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;  <span class=\"comment\">//匿名函数  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"type of f1=%T\\n\"</span>, f1) <span class=\"comment\">//%T类型 </span></span><br><span class=\"line\">        sum := f1(<span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"sum=%d\\n\"</span>, sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//defer和匿名函数  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testFunc4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">\"defer i=%d\\n\"</span>, i) <span class=\"comment\">//i=100</span></span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">        i = <span class=\"number\">100</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"i=%d\\n\"</span>, i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure> ### 函数类型作参数 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(a , b <span class=\"keyword\">int</span>, op <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span><span class=\"title\">int</span>) <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> op(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"闭包\">闭包</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//eg1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(base <span class=\"keyword\">int</span>)</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">base += i</span><br><span class=\"line\"><span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tmp1 := add(<span class=\"number\">10</span>)</span><br><span class=\"line\">fmt.Println(tmp(<span class=\"number\">1</span>), tmp(<span class=\"number\">2</span>))  <span class=\"comment\">//11, 13</span></span><br><span class=\"line\">tmp2 := add(<span class=\"number\">100</span>) <span class=\"comment\">//101, 103</span></span><br><span class=\"line\">fmt.Println(tmp2(<span class=\"number\">1</span>), tmp2(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeSuffixFunc</span><span class=\"params\">(suffix <span class=\"keyword\">string</span>)</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> !strings.HasSuffix(name, suffix) &#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> name + suffix </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">return</span> name </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func1 := makeSuffixFunc(<span class=\"string\">\".bmp\"</span>) </span><br><span class=\"line\">func2 := makeSuffixFunc(<span class=\"string\">\".jpg\"</span>) </span><br><span class=\"line\">fmt.Println(func1(<span class=\"string\">\"test\"</span>))  <span class=\"comment\">//test.bmp</span></span><br><span class=\"line\">fmt.Println(func2(<span class=\"string\">\"test\"</span>)) <span class=\"comment\">//test.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(base <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span>, <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span>)</span> &#123;</span><br><span class=\"line\">add := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">base += i</span><br><span class=\"line\"><span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sub := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">base -= i</span><br><span class=\"line\"><span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> add, sub</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1, f2 := calc(<span class=\"number\">10</span>)</span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">1</span>), f2(<span class=\"number\">2</span>)) <span class=\"comment\">//11, 9</span></span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">3</span>), f2(<span class=\"number\">4</span>)) <span class=\"comment\">//12, 8</span></span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">5</span>), f2(<span class=\"number\">6</span>)) <span class=\"comment\">//13, 7</span></span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">7</span>), f2(<span class=\"number\">8</span>)) <span class=\"comment\">//14, 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg4</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(i) <span class=\"comment\">//i全=5</span></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> func1(i <span class=\"keyword\">int</span>)&#123;</span><br><span class=\"line\">    fmt.Println(i)</span><br><span class=\"line\">&#125;(i)    <span class=\"comment\">//1,2,3,4,5</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">time.Sleep(time.Second)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组\">数组</h2>\n<ul>\n<li><p>定义 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"built_in\">len</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"comment\">//eg</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a[<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure> 长度是数组类型的一部分，因此，var a[5] int和var a[10]int是不同的类型, 不能a=b<br />\n数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1<br />\n访问越界，如果下标在数组合法范围之外，则触发访问越界，会panic<br />\n数组是值类型，因此改变副本的值，不会改变本身的值</p></li>\n<li><p>初始化<br />\n整数数组元素默认初始化是0, 字符串数组默认初始化\"\", 浮点型是0.0 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age0 [<span class=\"number\">5</span>] <span class=\"keyword\">int</span> = [<span class=\"number\">5</span>] <span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> age1 = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> age2 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;  </span><br><span class=\"line\">age3 := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; <span class=\"comment\">//1 2 3 0 0  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = [<span class=\"number\">5</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">3</span>:”hello world”, <span class=\"number\">4</span>:”tom”&#125; <span class=\"comment\">//指定索引赋值  </span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 遍历  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"a[%d]=%d\\n\"</span>, i, a[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"%d\\n\"</span>, value)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>多维数组 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> age [<span class=\"number\">5</span>][<span class=\"number\">3</span>] <span class=\"keyword\">int</span>  </span><br><span class=\"line\">   <span class=\"keyword\">var</span> age [<span class=\"number\">5</span>][<span class=\"number\">3</span>] <span class=\"keyword\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span> , <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"%d \"</span>, a[i][j])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, val := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"row[%d]=%v\\n\"</span>, i, val)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j, val2 := <span class=\"keyword\">range</span> val &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"(%d,%d)=%d \"</span>,i, j, val2)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>数组拷贝 数组是值类型 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//b初始化时是深拷贝    </span></span><br><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">b := a</span><br><span class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"a=%v\\n\"</span>, a) <span class=\"comment\">//10, 20, 30</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"b=%v\\n\"</span>, b) <span class=\"comment\">//1000, 20, 30</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>数组传参 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组在传参的时候会深拷贝   </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(b [3]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\"> b[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(b [3][3]<span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    b[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"切片\">切片</h2>\n<p>基于数组类型做的一层封装，可以自动扩容<br />\n切片是数组的一个引用，因此切片是引用类型<br />\n切片的长度可以改变，因此，切片是一个可变的数组</p>\n<h3 id=\"定义\">定义</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 []类型</span><br><span class=\"line\"><span class=\"comment\">//eg</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str []<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> arr []<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化-1\">初始化</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法1 基于数组  </span></span><br><span class=\"line\"><span class=\"comment\">//a[start:end]创建一个包括从start到end-1的切片  </span></span><br><span class=\"line\">a := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b[]<span class=\"keyword\">int</span> = a[<span class=\"number\">1</span>:<span class=\"number\">4</span>] <span class=\"comment\">//2 3 4 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg</span></span><br><span class=\"line\">a := [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>&#125;</span><br><span class=\"line\">b := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>]  <span class=\"comment\">//b的长度是2, cap是7</span></span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\">c := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125; <span class=\"comment\">//写长度就是数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"操作\">操作</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含start到end之间的元素，但不包含end  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice []<span class=\"keyword\">int</span> = arr[start:end]  </span><br><span class=\"line\"><span class=\"keyword\">var</span> slice []<span class=\"keyword\">int</span> = arr[:end]  <span class=\"comment\">//var slice []int = arr[0:end]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice[]<span class=\"keyword\">int</span> = arr[start:] <span class=\"comment\">//var slice []int = arr[start:len(arr)]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice[]<span class=\"keyword\">int</span> = arr[:] <span class=\"comment\">//var slice []int = arr[0, len(arr)]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//创建</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> slice []<span class=\"keyword\">type</span> = <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)  </span><br><span class=\"line\">    slice  := <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)  </span><br><span class=\"line\">    slice  := <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>, <span class=\"built_in\">cap</span>)  <span class=\"comment\">//如果使用[]访问超过len的空间，需要使用append插入元素, 否则会panic    </span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">![p6](/images/go_20200408_4.png) </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"comment\">//将切片追加到另一个切片末尾  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\ta = <span class=\"built_in\">append</span>(a, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">45</span>)</span><br><span class=\"line\">\ta = <span class=\"built_in\">append</span>(a, b...) <span class=\"comment\">//将b展开</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>拷贝 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a, b) <span class=\"comment\">//不会对被拷贝的切片扩容</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>cap cap可以求出slice最大的容量，0 &lt;= len(slice) &lt;= cap(array)，其中array<br />\n如果要切片最后一个元素去掉，可以这么写: slice = slice[:len(slice)-1]</p></li>\n<li><p>切片再切片 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>&#125;</span><br><span class=\"line\">b := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\">//len2, cap 7</span></span><br><span class=\"line\">b = b[:<span class=\"built_in\">cap</span>(b)] <span class=\"comment\">//len 7 cap 7</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>空切片 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> <span class=\"comment\">//直接操作会panic</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> a == <span class=\"literal\">nil</span> &#123; <span class=\"comment\">//判空 </span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"a is nil\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   a = <span class=\"built_in\">append</span>(a, <span class=\"number\">100</span>) <span class=\"comment\">//对空切片扩容</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>传参<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sumArray</span><span class=\"params\">(a []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        sum = sum + v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">10</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">10</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">sum := sumArray(a[:]</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"切片的内存布局\">切片的内存布局</h3>\n<figure>\n<img src=\"/images/go_20200408_3.png\" alt=\"p5\" /><figcaption aria-hidden=\"true\">p5</figcaption>\n</figure>\n<h3 id=\"string与slice\">string与slice</h3>\n<p>string底层就是一个byte的数组，因此，也可以进行切片操作<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str := “hello world”  </span><br><span class=\"line\">s1 := str[<span class=\"number\">0</span>:<span class=\"number\">5</span>]  </span><br><span class=\"line\">fmt.Println(s1)  </span><br><span class=\"line\">s2 := str[<span class=\"number\">5</span>:]  </span><br><span class=\"line\">fmt.Println(s2)  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 切片示例</span></span><br><span class=\"line\"><span class=\"string\">[生成密码](https://github.com/colinblack/go_devel/blob/master/tools/passwd/passwd.go)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## map  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\"><span class=\"comment\">//key-value的数据结构，又叫字典或关联数组  </span></span><br><span class=\"line\"><span class=\"comment\">//声明是不会分配内存的，初始化需要make  </span></span><br><span class=\"line\"><span class=\"comment\">// map是引用类型  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map1 <span class=\"keyword\">map</span>[keytype]valuetype  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//申明时初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;“hello”: “world”&#125;  </span><br><span class=\"line\"><span class=\"comment\">//make初始化</span></span><br><span class=\"line\">a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure> * 操作<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    a[“hello”] = “world”            <span class=\"comment\">//插入和更新  </span></span><br><span class=\"line\">    Val, ok := a[“hello”]           <span class=\"comment\">//查找  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> a &#123;           <span class=\"comment\">//遍历  </span></span><br><span class=\"line\">        fmt.Println(k,v)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(a, “hello”)              <span class=\"comment\">//删除  </span></span><br><span class=\"line\">    <span class=\"built_in\">len</span>(a)                          <span class=\"comment\">//长度  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//slice of map  </span></span><br><span class=\"line\">    Items := <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][<span class=\"keyword\">int</span>], <span class=\"number\">5</span>)  </span><br><span class=\"line\">    For I := <span class=\"number\">0</span>; I &lt; <span class=\"number\">5</span>; i++ &#123;  </span><br><span class=\"line\">            items[i] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][<span class=\"keyword\">int</span>])  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 排序  </span></span><br><span class=\"line\"><span class=\"string\">map中key值是无序的  </span></span><br><span class=\"line\"><span class=\"string\">a. 先获取所有key，把key进行排序  </span></span><br><span class=\"line\"><span class=\"string\">b. 按照排序好的key，进行遍历  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 翻转   </span></span><br><span class=\"line\"><span class=\"string\">初始化另外一个map，把key、value互换即可  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 并发  </span></span><br><span class=\"line\"><span class=\"string\">* 线程同步   </span></span><br><span class=\"line\"><span class=\"string\">a. import(“sync”)  </span></span><br><span class=\"line\"><span class=\"string\">b. 互斥锁, var mu sync.Mutex  </span></span><br><span class=\"line\"><span class=\"string\">c. 读写锁, var mu sync.RWMutex  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## struct  </span></span><br><span class=\"line\"><span class=\"string\">* 用来自定义复杂数据结构  </span></span><br><span class=\"line\"><span class=\"string\">* struct里面可以包含多个字段（属性）  </span></span><br><span class=\"line\"><span class=\"string\">* struct类型可以定义方法，注意和函数的区分  </span></span><br><span class=\"line\"><span class=\"string\">* struct类型是值类型  </span></span><br><span class=\"line\"><span class=\"string\">* struct类型可以嵌套  </span></span><br><span class=\"line\"><span class=\"string\">* Go没有class类型，只有struct类型  </span></span><br><span class=\"line\"><span class=\"string\">* 结构体内字段地址连续</span></span><br><span class=\"line\"><span class=\"string\">* struct没有构造函数，一般可以使用工厂模式来解决这个问题  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\">    <span class=\"keyword\">type</span> student <span class=\"keyword\">struct</span> &#123;  </span><br><span class=\"line\">        Name stirng  </span><br><span class=\"line\">        Age <span class=\"keyword\">int</span>  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化 </span></span><br><span class=\"line\">    user := student&#123;</span><br><span class=\"line\">        Name : <span class=\"string\">\"user\"</span>,</span><br><span class=\"line\">        Age  : <span class=\"number\">18</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStudent</span><span class=\"params\">(name <span class=\"keyword\">string</span>, age <span class=\"keyword\">int</span>)</span> *<span class=\"title\">student</span></span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;student&#123;  </span><br><span class=\"line\">            Name:name,  </span><br><span class=\"line\">            Age:age,  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    S := <span class=\"built_in\">new</span> (student)  </span><br><span class=\"line\">    S := model.NewStudent(“tony”, <span class=\"number\">20</span>)  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 指向结构体的指针 </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user *student <span class=\"comment\">//nil</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user01 *student = &amp;student&#123;&#125;</span><br><span class=\"line\">    user01.Name=<span class=\"string\">\"user01\"</span> <span class=\"comment\">//指针使用.操作，是编译器简化了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user02 *student = &amp;student&#123;</span><br><span class=\"line\">        Name : user02,</span><br><span class=\"line\">        Age  : <span class=\"number\">18</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user03 *student = <span class=\"built_in\">new</span>(student)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>结构体嵌套 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">       Province <span class=\"keyword\">string</span></span><br><span class=\"line\">       City     <span class=\"keyword\">string</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">       Username <span class=\"keyword\">string</span></span><br><span class=\"line\">       Sex      <span class=\"keyword\">string</span></span><br><span class=\"line\">       address  *Address</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">user := &amp;User&#123;</span><br><span class=\"line\">\tUsername: <span class=\"string\">\"user01\"</span>,</span><br><span class=\"line\">\tSex:      <span class=\"string\">\"man\"</span>,</span><br><span class=\"line\">\taddress: &amp;Address&#123;</span><br><span class=\"line\">\t\tProvince: <span class=\"string\">\"beijing\"</span>,</span><br><span class=\"line\">\t\tCity:     <span class=\"string\">\"beijing\"</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>匿名字段<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//匿名字段默认采用类型名作为字段名 </span></span><br><span class=\"line\">   <span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123; </span><br><span class=\"line\">       Username <span class=\"keyword\">string</span></span><br><span class=\"line\">       Sex <span class=\"keyword\">string</span></span><br><span class=\"line\">       Age <span class=\"keyword\">int</span></span><br><span class=\"line\">       AvatarUrl <span class=\"keyword\">string</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span></span><br><span class=\"line\">       <span class=\"keyword\">string</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> s User</span><br><span class=\"line\">   s.<span class=\"keyword\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">   s.<span class=\"keyword\">string</span>=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//嵌套结构体匿名字段 </span></span><br><span class=\"line\">   <span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Province   <span class=\"keyword\">string</span></span><br><span class=\"line\">   \tCity       <span class=\"keyword\">string</span></span><br><span class=\"line\">   \tCreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   \tUsername <span class=\"keyword\">string</span></span><br><span class=\"line\">   \tSex      <span class=\"keyword\">string</span></span><br><span class=\"line\">   \t*Address</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//方法1</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> user User</span><br><span class=\"line\">   user.Address = &amp;Address&#123;</span><br><span class=\"line\">\tProvince: <span class=\"string\">\"bj\"</span>,</span><br><span class=\"line\">\tCity:     <span class=\"string\">\"bj\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//方法2</span></span><br><span class=\"line\">   user.Province = <span class=\"string\">\"bj01\"</span></span><br><span class=\"line\">user.City = <span class=\"string\">\"bj01\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//字段冲突解决 </span></span><br><span class=\"line\">   <span class=\"keyword\">type</span> User01 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">       City     <span class=\"keyword\">string</span></span><br><span class=\"line\">       Username <span class=\"keyword\">string</span></span><br><span class=\"line\">       Sex      <span class=\"keyword\">string</span></span><br><span class=\"line\">       *Address</span><br><span class=\"line\">       *Email</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> user01 User01</span><br><span class=\"line\">   user01.City = <span class=\"string\">\"bj\"</span> <span class=\"comment\">//此时因为User01中有City被有限房屋， 如果没有再访问Address中City</span></span><br><span class=\"line\">   user.Address.CreateTime = <span class=\"string\">\"001\"</span> <span class=\"comment\">//Address和Email中都有CreateTime需要指明</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>tag 结构体的元信息，可以在运⾏的时候通过反射的机制读取出来 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123; </span><br><span class=\"line\">    Username <span class=\"keyword\">string</span> <span class=\"string\">`json:”username”,db:”user_name”`</span></span><br><span class=\"line\">    Sex <span class=\"keyword\">string</span> <span class=\"string\">`json:”sex”`</span></span><br><span class=\"line\">    Age <span class=\"keyword\">int</span> <span class=\"string\">`json:”age”`</span></span><br><span class=\"line\">    avatarUrl <span class=\"keyword\">string</span></span><br><span class=\"line\">    CreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\"></span><br><span class=\"line\">data, _ := json.Marshal(user)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>结构体与json序列化</p></li>\n</ul>\n<h2 id=\"方法\">方法</h2>\n<p>Golang中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(recevier <span class=\"keyword\">type</span>)</span> <span class=\"title\">methodName</span><span class=\"params\">(参数列表)</span><span class=\"params\">(返回值列表)</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">type</span> People <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Name    <span class=\"keyword\">string</span></span><br><span class=\"line\">        Country <span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p People)</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"name=%s country=%s\\n\"</span>, p.Name, p.Country)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p People)</span> <span class=\"title\">Set</span><span class=\"params\">(name <span class=\"keyword\">string</span>, country <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">        p.Name = name</span><br><span class=\"line\">        p.Country = country</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *People)</span> <span class=\"title\">SetV2</span><span class=\"params\">(name <span class=\"keyword\">string</span>, country <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">        p.Country = country</span><br><span class=\"line\">        p.Name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p1 People = People&#123;</span><br><span class=\"line\">\t\tName:    <span class=\"string\">\"people01\"</span>,</span><br><span class=\"line\">\t\tCountry: <span class=\"string\">\"china\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    p1.Set(<span class=\"string\">\"people02\"</span>, <span class=\"string\">\"enligsh\"</span>)  <span class=\"comment\">//传值不能改变p1的成员</span></span><br><span class=\"line\">    (&amp;p1).SetV2(<span class=\"string\">\"people02\"</span>, <span class=\"string\">\"english\"</span>) <span class=\"comment\">//要传指针 </span></span><br><span class=\"line\">    p1.SetV2(<span class=\"string\">\"people02\"</span>, <span class=\"string\">\"english\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可以为这个包中的任意类型增加方法  </span></span><br><span class=\"line\">    <span class=\"keyword\">type</span> Integer <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i Integer)</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"链表\">链表</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;  </span><br><span class=\"line\">    Name <span class=\"keyword\">string</span>  </span><br><span class=\"line\">    Next *Student  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 继承   </span></span><br><span class=\"line\"><span class=\"string\">通过匿名字段来实现   </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Name <span class=\"keyword\">string</span></span><br><span class=\"line\">        Sex  <span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Animal)</span> <span class=\"title\">Talk</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"i'talk, i'm %s\\n\"</span>, a.Name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">type</span> PuruAnimal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *PuruAnimal)</span> <span class=\"title\">Talk</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"buru dongwu talk\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Feet <span class=\"keyword\">string</span></span><br><span class=\"line\">        <span class=\"comment\">//Animal</span></span><br><span class=\"line\">        *Animal   </span><br><span class=\"line\">        *PuruAnimal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span> <span class=\"title\">Eat</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"dog is eat\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    func (d *Dog) Talk() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(\"dog is talking\")</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d *Dog = &amp;Dog&#123;</span><br><span class=\"line\">            Feet: <span class=\"string\">\"four feet\"</span>,</span><br><span class=\"line\">            Animal: &amp;Animal&#123;</span><br><span class=\"line\">                Name: <span class=\"string\">\"dog\"</span>,</span><br><span class=\"line\">                Sex:  <span class=\"string\">\"xiong\"</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        d.Eat()</span><br><span class=\"line\">        d.Animal.Talk() </span><br><span class=\"line\">        d.PuruAnimal.Talk()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\">接口</h2>\n<p>Interface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量<br />\n如果一个变量含有了多个interface类型的方法，那么这个变量就实现了多个接口<br />\n如果一个变量只含有了1个interface的方部分方法，那么这个变量没有实现这个接口</p>\n<h2 id=\"类型断言\">类型断言</h2>\n<p>类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型可以采用以下方法进行转换</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">var</span> t <span class=\"dt\">int</span>  </span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">var</span> x <span class=\"kw\">interface</span>{}  </span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>x = t  </span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>y, ok = x.(<span class=\"dt\">int</span>)   <span class=\"co\">//转成int，带检查  </span></span></code></pre></div>\n<h2 id=\"反射\">反射</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>可以在运行时动态获取变量的相关信息  </span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">import</span> (“reflect”)  </span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.TypeOf，获取变量的类型，返回reflect.Type类型  </span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.ValueOf，获取变量的值，返回reflect.Value类型  </span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.Value.Kind，获取变量的类别，返回一个常量  </span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.Value.Interface()，转换成interface{}类型  </span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.Value.Kind()方法返回的常量  </span></code></pre></div>\n<figure>\n<img src=\"/images/go_20200408_5.png\" alt=\"p7\" /><figcaption aria-hidden=\"true\">p7</figcaption>\n</figure>\n<h2 id=\"io\">IO</h2>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>终端读写  </span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Stdin：标准输入  </span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Stdout：标准输出  </span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Stderr：标准错误输出  </span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>文件写入  </span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.OpenFile(“output.dat”,  os.O_WRONLY|os.O_CREATE, <span class=\"dv\">0666</span>)  </span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>第二个参数：文件打开模式：  </span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span>. os.O_WRONLY：只写  </span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">2</span>. os.O_CREATE：创建文件  </span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">3</span>. os.O_RDONLY：只读  </span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">4</span>.  os.O_RDWR：读写  </span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">5</span>.  os.O_TRUNC ：清空  </span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>第三个参数：权限控制：  </span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>r ——&gt; <span class=\"dv\">004</span>  </span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>w——&gt; <span class=\"dv\">002</span>  </span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>x——&gt; <span class=\"dv\">001</span>  </span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>命令行参数  </span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Args是一个string的切片，用来存储所有的命令行参数  </span></code></pre></div>\n<h2 id=\"序列化\">序列化</h2>\n<h3 id=\"json\">Json</h3>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>导入包：import “encoding/json”  </span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>序列化: json.Marshal(data <span class=\"kw\">interface</span>{})  </span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>反序列化: json.UnMarshal(data []<span class=\"dt\">byte</span>,  v  <span class=\"kw\">interface</span>{})  </span></code></pre></div>\n<h2 id=\"goroutine\">goroutine</h2>\n<p>不同goroutine之间如何通信<br />\n* 全局变量和锁同步<br />\n* Channel<br />\n类似unix中的管道<br />\n先进先出<br />\n线程安全, 多个goroutine同时访问, 不需要加锁<br />\nchannel是有类型的, 一个整数的channel只能存放整数<br />\nchannel带缓冲区</p>\n<h2 id=\"单元测试\">单元测试</h2>\n<p>文件名必须以_test.go结尾 函数名必须以Test开头</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目构建\">项目构建</h2>\n<ul>\n<li><p>个人<br />\n<img src=\"/images/go_20200706_p1.png\" alt=\"p1\" /></p></li>\n<li><p>公司<br />\n<img src=\"/images/go_20200706_p2.png\" alt=\"p2\" /></p></li>\n</ul>\n<h2 id=\"工具\">工具</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> fmt -w *.<span class=\"keyword\">go</span>   <span class=\"comment\">//格式化代码 </span></span><br><span class=\"line\"><span class=\"keyword\">go</span> fmt github.com/hello   </span><br><span class=\"line\"><span class=\"keyword\">go</span> run  src/xx/xx.<span class=\"keyword\">go</span>  <span class=\"comment\">//编译+执行</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> build -o /bin/test /src/test  <span class=\"comment\">//编译生成二进制文件， -o指定目录</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> build  github.com/xx   <span class=\"comment\">//注意src目录不用写</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> install  github.com/xx  <span class=\"comment\">//生成可执行文件到bin目录下</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> env <span class=\"comment\">//显示环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get <span class=\"comment\">//安装第三方包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"标识符\">标识符</h2>\n<p>标识符以字母或下划线开头，大小写敏感</p>\n<ul>\n<li>保留关键字<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">break</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">interface</span> <span class=\"title\">select</span> <span class=\"title\">case</span> <span class=\"title\">defer</span> <span class=\"title\">go</span> <span class=\"title\">map</span> <span class=\"title\">struct</span> <span class=\"title\">chan</span> <span class=\"title\">else</span> <span class=\"title\">goto</span> <span class=\"title\">package</span> <span class=\"title\">switch</span></span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> fallthough <span class=\"keyword\">if</span> <span class=\"keyword\">range</span> <span class=\"keyword\">type</span> <span class=\"keyword\">continue</span> <span class=\"keyword\">for</span> <span class=\"keyword\">import</span> <span class=\"keyword\">return</span> <span class=\"keyword\">var</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"基本结构\">基本结构</h2>\n<ul>\n<li><p>可执行程序的包名必须为main, 且包含一个main函数</p></li>\n<li><p>go build; go install 对于非main包会在GOPATH pkg 中生成静态库文件</p></li>\n<li><p>包的别名<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(  </span><br><span class=\"line\">    a  <span class=\"string\">\"fmt\"</span>  <span class=\"comment\">//a是fmt的别名  </span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>访问控制规则<br />\n大写函数/变量可导出<br />\n小写函数变量是私有的，外部包不能访问</p></li>\n<li><p>万能格式输出%v</p></li>\n</ul>\n<h2 id=\"初始化\">初始化</h2>\n<ul>\n<li><p>init函数<br />\n每个包里都有0个或多个init函数， 在main函数调用之前会执行init <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无参数和返回值 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>包初始化顺序 全局变量 -&gt; init -&gt; main</p></li>\n<li><p>有import的情况 <img src=\"/images/go_20200723_p1.jpg\" alt=\"go_20200723_1\" /></p></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(  </span><br><span class=\"line\">     <span class=\"string\">\"test\"</span>  <span class=\"comment\">//仅初始化， 不使用包里面的东西  </span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>嵌套包的初始化顺序， 最里层包先初始化<br />\n<img src=\"/images/go_20200408_1.png\" alt=\"p3\" /></p>\n<h2 id=\"数据类型\">数据类型</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">int8</span> <span class=\"keyword\">int16</span> <span class=\"keyword\">int32</span> <span class=\"keyword\">int64</span> <span class=\"keyword\">uint8</span> <span class=\"keyword\">uint16</span> <span class=\"keyword\">uint32</span> <span class=\"keyword\">uint64</span> <span class=\"keyword\">float32</span> <span class=\"keyword\">float64</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"标识符-1\">标识符</h3>\n<p>以字母或_开头, 后面跟着字母,_或数字</p>\n<h3 id=\"关键字\">关键字</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">break</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">interface</span> <span class=\"title\">select</span> <span class=\"title\">case</span> <span class=\"title\">defer</span> <span class=\"title\">go</span> <span class=\"title\">map</span> <span class=\"title\">struct</span></span> </span><br><span class=\"line\"><span class=\"keyword\">chan</span> <span class=\"keyword\">else</span> <span class=\"keyword\">goto</span> <span class=\"keyword\">package</span> <span class=\"keyword\">switch</span> <span class=\"keyword\">const</span> fallthough  <span class=\"keyword\">if</span> <span class=\"keyword\">range</span> <span class=\"keyword\">type</span> </span><br><span class=\"line\"><span class=\"keyword\">continue</span> <span class=\"keyword\">for</span> <span class=\"keyword\">import</span> <span class=\"keyword\">return</span> <span class=\"keyword\">var</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常量\">常量</h3>\n<p>编译时已经确定, const修饰，只读<br />\n常量必须要赋值<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 只能修饰boolean, number(<span class=\"keyword\">int</span>相关， 浮点， <span class=\"built_in\">complex</span>)和<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> b <span class=\"keyword\">string</span> = <span class=\"string\">\"hello word\"</span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">\"hello word\"</span>  </span><br><span class=\"line\"><span class=\"keyword\">const</span> c = getValue()  <span class=\"comment\">//错误，与c++不同  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优雅的写法  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span>(  </span><br><span class=\"line\">    a = <span class=\"number\">0</span>  </span><br><span class=\"line\">    b = <span class=\"number\">1</span>  </span><br><span class=\"line\">    c = <span class=\"number\">2</span> </span><br><span class=\"line\">    d     <span class=\"comment\">//2 </span></span><br><span class=\"line\">)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更加专业的写法 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span>(  </span><br><span class=\"line\">    a = <span class=\"literal\">iota</span> <span class=\"comment\">//0  </span></span><br><span class=\"line\">    b  <span class=\"comment\">//1  </span></span><br><span class=\"line\">    c   <span class=\"comment\">//2  </span></span><br><span class=\"line\">)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(  </span><br><span class=\"line\">    a = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">//1</span></span><br><span class=\"line\">    b  <span class=\"comment\">//2 </span></span><br><span class=\"line\">    c   <span class=\"comment\">//4  </span></span><br><span class=\"line\">)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">    a  = <span class=\"literal\">iota</span>  <span class=\"comment\">//0</span></span><br><span class=\"line\">    b          <span class=\"comment\">//1 </span></span><br><span class=\"line\">    c          <span class=\"comment\">//2 </span></span><br><span class=\"line\">    d  = <span class=\"number\">8</span>    <span class=\"comment\">//8  </span></span><br><span class=\"line\">    e         <span class=\"comment\">//8 </span></span><br><span class=\"line\">    f  = <span class=\"literal\">iota</span> <span class=\"comment\">//5</span></span><br><span class=\"line\">    g         <span class=\"comment\">//6</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">### 变量  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\"><span class=\"comment\">//第一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> identifier <span class=\"keyword\">type</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> b <span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> c <span class=\"keyword\">bool</span>  </span><br><span class=\"line\">d <span class=\"keyword\">int</span> = <span class=\"number\">8</span>  </span><br><span class=\"line\">e <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种写法</span></span><br><span class=\"line\">Var(  </span><br><span class=\"line\">    a <span class=\"keyword\">int</span>  <span class=\"comment\">//默认0  </span></span><br><span class=\"line\">    b <span class=\"keyword\">string</span> <span class=\"comment\">//默认\"\"  </span></span><br><span class=\"line\">    c <span class=\"keyword\">bool</span> <span class=\"comment\">//默认false  </span></span><br><span class=\"line\">    d = <span class=\"number\">8</span>  </span><br><span class=\"line\">    e = <span class=\"string\">\"hello world\"</span>  </span><br><span class=\"line\">)  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">### 值类型和引用类型  </span></span><br><span class=\"line\"><span class=\"string\">值类型： 基本数据类型int, float, bool, string以及数组和struct，内存在栈中分配  </span></span><br><span class=\"line\"><span class=\"string\">引用类型： 指针, slice, map, chan, interface等， 内存在对上分配，GC回收  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">变量的作用域  </span></span><br><span class=\"line\"><span class=\"string\">局部变量--生命周期在函数内或语句块内  </span></span><br><span class=\"line\"><span class=\"string\">全局变量--生命周期在整个包，大写的可以外部访问  </span></span><br><span class=\"line\"><span class=\"string\"> a :=1 实际是两条语句: var a int a = 1 go中不能在函数外赋值，所以:= 不能用于函数外   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 指针类型   </span></span><br><span class=\"line\"><span class=\"string\">var p *int = &amp;a  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"comment\">//传递数组指针和c数组指针类似 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(arr *[3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">        (*arr)[<span class=\"number\">0</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">        a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">91</span>&#125;</span><br><span class=\"line\">        modify(&amp;a)</span><br><span class=\"line\">        fmt.Println(a) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//切片是引用类型 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(sls []<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">     sls[<span class=\"number\">0</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">     a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">91</span>&#125;</span><br><span class=\"line\">     modify(a[:])</span><br><span class=\"line\">     fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类型转化\">类型转化</h3>\n<p>type(var)<br />\nint 和 int32是不同类型， 不能直接运算</p>\n<h3 id=\"字符串\">字符串</h3>\n<ul>\n<li>两种表示方式<br />\n1.\"\" 允许转义<br />\n2.`` 原生字符串，允许换行<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    == <span class=\"comment\">//比较</span></span><br><span class=\"line\">    <span class=\"built_in\">len</span>(str)  <span class=\"comment\">//长度</span></span><br><span class=\"line\">    +, fmt.Sprintf <span class=\"comment\">//拼接</span></span><br><span class=\"line\">    strings</span><br><span class=\"line\">    strings.Contains  <span class=\"comment\">//包含  </span></span><br><span class=\"line\">    strings.HasPrefix(s <span class=\"keyword\">string</span>, prefix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span> <span class=\"comment\">//判断字符串s是否以prefix开头  </span></span><br><span class=\"line\">    strings.HasSuffix(s <span class=\"keyword\">string</span>, suffix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span> <span class=\"comment\">//判断字符串s是否以suffix结尾。  </span></span><br><span class=\"line\">    strings.Index(s <span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span>  <span class=\"comment\">//判断str在s中首次出现的位置，如果没有出现，则返回-1  </span></span><br><span class=\"line\">    strings.LastIndex(s <span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span> <span class=\"comment\">//判断str在s中最后出现的位置，如果没有出现，则返回-1  </span></span><br><span class=\"line\">    strings.Replace(str <span class=\"keyword\">string</span>, old <span class=\"keyword\">string</span>, <span class=\"built_in\">new</span> <span class=\"keyword\">string</span>, n <span class=\"keyword\">int</span>) <span class=\"comment\">//字符串替换  </span></span><br><span class=\"line\">    strings.Count(str <span class=\"keyword\">string</span>, substr <span class=\"keyword\">string</span>)<span class=\"keyword\">int</span> <span class=\"comment\">//字符串计数  </span></span><br><span class=\"line\">    strings.ToLower(str <span class=\"keyword\">string</span>)<span class=\"keyword\">string</span> <span class=\"comment\">//转为小写  </span></span><br><span class=\"line\">    strings.ToUpper(str <span class=\"keyword\">string</span>)<span class=\"keyword\">string</span> <span class=\"comment\">//转为大写  </span></span><br><span class=\"line\">    strings.TrimSpace(str <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串首尾空白字符  </span></span><br><span class=\"line\">    strings.Trim(str <span class=\"keyword\">string</span>, cut <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串首尾cut字符  </span></span><br><span class=\"line\">    strings.TrimLeft(str <span class=\"keyword\">string</span>, cut <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串首cut字符  </span></span><br><span class=\"line\">    strings.TrimRight(str <span class=\"keyword\">string</span>, cut <span class=\"keyword\">string</span>) <span class=\"comment\">//去掉字符串尾cut字符  </span></span><br><span class=\"line\">    strings.Field(str <span class=\"keyword\">string</span>) <span class=\"comment\">//返回str空格分隔的所有子串的slice  </span></span><br><span class=\"line\">    strings.Split(str <span class=\"keyword\">string</span>, split <span class=\"keyword\">string</span>) <span class=\"comment\">//返回str split分隔的所有子串的slice  </span></span><br><span class=\"line\">    strings.Join(s1 []<span class=\"keyword\">string</span>, sep <span class=\"keyword\">string</span>) <span class=\"comment\">//用sep把s1中的所有元素链接起来  </span></span><br><span class=\"line\">    strconv.Itoa(i <span class=\"keyword\">int</span>) <span class=\"comment\">//把一个整数i转成字符串  </span></span><br><span class=\"line\">    strconv.Atoi(str <span class=\"keyword\">string</span>)(<span class=\"keyword\">int</span>, error) <span class=\"comment\">//把一个字符串转成整数  </span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">* 字符串底层是byte数组, 可以和[]byte类型互相转换   </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"comment\">//修改字符串  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> byteSlice []<span class=\"keyword\">byte</span></span><br><span class=\"line\">    byteSlice = []<span class=\"keyword\">byte</span>(str)</span><br><span class=\"line\">    byteSlice[<span class=\"number\">0</span>] = <span class=\"string\">'0'</span></span><br><span class=\"line\">    str = <span class=\"keyword\">string</span>(byteSlice</span><br></pre></td></tr></table></figure></li>\n<li>rune表示utf8的字符<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> str=<span class=\"string\">\"哈\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> runeSlice []<span class=\"keyword\">rune</span></span><br><span class=\"line\">runeSlice = []<span class=\"keyword\">rune</span>(str)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"str 长度:%d, len(str)=%d\\n\"</span>, <span class=\"built_in\">len</span>(runeSlice), <span class=\"built_in\">len</span>(str) <span class=\"comment\">//1, 3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"时间和日期\">时间和日期</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">    now := time.Now()  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取时间戳</span></span><br><span class=\"line\">    timestamp := time.Now().Unix()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//时间戳转time类型  </span></span><br><span class=\"line\">    timeobj := time.Unix(timestamp, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.Now().Day()，time.Now().Minute()，time.Now().Month()，time.Now().Year()  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//格式化</span></span><br><span class=\"line\">    fmt.Printf(“%<span class=\"number\">02</span>d/%<span class=\"number\">02</span>d%<span class=\"number\">02</span>d %<span class=\"number\">02</span>d:%<span class=\"number\">02</span>d:%<span class=\"number\">02</span>d”, now.Year()......)  </span><br><span class=\"line\">    <span class=\"comment\">//time.Duration用来表示纳秒  </span></span><br><span class=\"line\">    <span class=\"comment\">//一些常量  </span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> (  </span><br><span class=\"line\">        Nanosecond  Duration = <span class=\"number\">1</span>  </span><br><span class=\"line\">        Microsecond          = <span class=\"number\">1000</span> * Nanosecond  </span><br><span class=\"line\">        Millisecond          = <span class=\"number\">1000</span> * Microsecond  </span><br><span class=\"line\">        Second               = <span class=\"number\">1000</span> * Millisecond  </span><br><span class=\"line\">        Minute               = <span class=\"number\">60</span> * Second  </span><br><span class=\"line\">        Hour                 = <span class=\"number\">60</span> * Minute  </span><br><span class=\"line\">    )  </span><br><span class=\"line\">    <span class=\"comment\">//格式化</span></span><br><span class=\"line\">    now := time.Now()  </span><br><span class=\"line\">    fmt.Println(now.Format(“<span class=\"number\">02</span>/<span class=\"number\">1</span>/<span class=\"number\">2006</span> <span class=\"number\">15</span>:<span class=\"number\">04</span>”))  </span><br><span class=\"line\">    fmt.Println(now.Format(“<span class=\"number\">2006</span>/<span class=\"number\">1</span>/<span class=\"number\">02</span> <span class=\"number\">15</span>:<span class=\"number\">04</span>”))  </span><br><span class=\"line\">    fmt.Println(now.Format(“<span class=\"number\">2006</span>/<span class=\"number\">1</span>/<span class=\"number\">02</span>”))  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">* 定时器  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">\tticker := time.Tick(<span class=\"number\">1</span>*time.Second)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> ticker &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"%v\\n\"</span>, i) <span class=\"comment\">//打印出当前时间 </span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"流程控制\">流程控制</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//if  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition1 &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> condition2 &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> condition3 &#123;  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//错误代码</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;     <span class=\"comment\">//else必须和上一个&#125;在一行否则编译不过去  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//switch  </span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> <span class=\"keyword\">var</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> var1:  </span><br><span class=\"line\">        <span class=\"keyword\">fallthrough</span> <span class=\"comment\">//继续往下执行  </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> var2:  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> var3:  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//注意没有break  </span></span><br><span class=\"line\">    （<span class=\"number\">2</span>）<span class=\"keyword\">switch</span> <span class=\"keyword\">var</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> var1, var2: <span class=\"comment\">//多条件在一行  </span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">var</span> <span class=\"number\">3</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     (<span class=\"number\">3</span>) <span class=\"keyword\">switch</span>&#123;  <span class=\"comment\">//没有变量  </span></span><br><span class=\"line\">                condition1:  </span><br><span class=\"line\">                condition2:  </span><br><span class=\"line\">                <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     (<span class=\"number\">4</span>) <span class=\"keyword\">switch</span> 语句块 &#123;  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">     <span class=\"comment\">//for  </span></span><br><span class=\"line\">     (<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>;  i++&#123;  <span class=\"comment\">//注意for没有()  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">     (<span class=\"number\">2</span>)  <span class=\"keyword\">for</span> 条件&#123;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">     (<span class=\"number\">3</span>) fro <span class=\"keyword\">range</span>  </span><br><span class=\"line\">        str := “hello world,中国”  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> str &#123;  </span><br><span class=\"line\">            fmt.Printf(“index[%d] val[%c] <span class=\"built_in\">len</span>[%d]\\n”, i, v, <span class=\"built_in\">len</span>([]<span class=\"keyword\">byte</span>(v)))  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 函数</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"comment\">//其中参数列表和返回值列表是可选</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">functionname</span><span class=\"params\">([parametername <span class=\"keyword\">type</span>])</span> [<span class=\"title\">returntype</span>]</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">//function body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不支持重载，一个包不能有两个名字一样的函数<br />\n函数是一等公民，函数也是一种类型，一个函数可以赋值给变量<br />\n匿名函数<br />\n多返回值<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>, sub <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    sum = a + b</span><br><span class=\"line\">    sub = a - b</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"comment\">//返回sum, sub</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum, _ := calc(<span class=\"number\">100</span>, <span class=\"number\">200</span>); <span class=\"comment\">//忽略返回值</span></span><br></pre></td></tr></table></figure></p>\n<p>可变参 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc_v2</span><span class=\"params\">(a <span class=\"keyword\">int</span>, b ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    sum := a</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(b);i++ &#123;</span><br><span class=\"line\">        sum = sum + b[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum := calc_v2(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"defer\">defer</h3>\n<p>当函数返回时，执行defer语句。因此，可以用来做资源清理<br />\n多个defer语句，按先进后出的方式执行<br />\ndefer语句中的变量，在defer声明时就决定了<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//关闭文件句柄 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read</span><span class=\"params\">()</span></span> &#123;  </span><br><span class=\"line\">        file := open(filename)  </span><br><span class=\"line\">        <span class=\"keyword\">defer</span> file.Close()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//锁资源释放  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read</span><span class=\"params\">()</span></span> &#123;  </span><br><span class=\"line\">        mc.Lock()  </span><br><span class=\"line\">        <span class=\"keyword\">defer</span> mc.Unlock()  </span><br><span class=\"line\">        <span class=\"comment\">//其他操作  </span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"comment\">//数据库连接释放  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read</span><span class=\"params\">()</span></span> &#123;  </span><br><span class=\"line\">        conn := openDatabase()  </span><br><span class=\"line\">        <span class=\"keyword\">defer</span> conn.Close()  </span><br><span class=\"line\">        <span class=\"comment\">//其他操作  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testDefer3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t    <span class=\"keyword\">defer</span> fmt.Printf(<span class=\"string\">\"defer i=%d\\n\"</span>, i)  <span class=\"comment\">//打印结果i=0</span></span><br><span class=\"line\">\t    i= <span class=\"number\">1000</span></span><br><span class=\"line\">\t    fmt.Printf(<span class=\"string\">\"i=%d\\n\"</span>, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 内置函数  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\">    不需要导入包  </span><br><span class=\"line\">    <span class=\"built_in\">close</span>：主要用来关闭channel  </span><br><span class=\"line\">    <span class=\"built_in\">len</span>：用来求长度，比如<span class=\"keyword\">string</span>、array、slice、<span class=\"keyword\">map</span>、channel  </span><br><span class=\"line\">    <span class=\"built_in\">new</span>：用来对各种类型分配内存，主要用来分配值类型，比如<span class=\"keyword\">int</span>、<span class=\"keyword\">struct</span>。返回的是指针  </span><br><span class=\"line\">    <span class=\"built_in\">make</span>：用来对内建类型分配内存，主要用来分配引用类型，比如channel <span class=\"keyword\">map</span> slice  </span><br><span class=\"line\">    <span class=\"built_in\">append</span>：用来追加元素到数组、slice中  </span><br><span class=\"line\">    <span class=\"built_in\">panic</span>和<span class=\"built_in\">recover</span>：用来做错误处理  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b *[]<span class=\"keyword\">int</span> = <span class=\"built_in\">new</span>([]<span class=\"keyword\">int</span>) </span><br><span class=\"line\">    <span class=\"comment\">//*b[0] = 100 error, 需要用make初始化 </span></span><br><span class=\"line\">    (*b) = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* new和make的区别  </span></span><br><span class=\"line\"><span class=\"string\">![p4](/images/go_20200408_2.png)  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 匿名函数  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testFunc2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        f1 := <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;  <span class=\"comment\">//匿名函数  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"type of f1=%T\\n\"</span>, f1) <span class=\"comment\">//%T类型 </span></span><br><span class=\"line\">        sum := f1(<span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"sum=%d\\n\"</span>, sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//defer和匿名函数  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testFunc4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">\"defer i=%d\\n\"</span>, i) <span class=\"comment\">//i=100</span></span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">        i = <span class=\"number\">100</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"i=%d\\n\"</span>, i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure> ### 函数类型作参数 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(a , b <span class=\"keyword\">int</span>, op <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span><span class=\"title\">int</span>) <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> op(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"闭包\">闭包</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//eg1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(base <span class=\"keyword\">int</span>)</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">base += i</span><br><span class=\"line\"><span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tmp1 := add(<span class=\"number\">10</span>)</span><br><span class=\"line\">fmt.Println(tmp(<span class=\"number\">1</span>), tmp(<span class=\"number\">2</span>))  <span class=\"comment\">//11, 13</span></span><br><span class=\"line\">tmp2 := add(<span class=\"number\">100</span>) <span class=\"comment\">//101, 103</span></span><br><span class=\"line\">fmt.Println(tmp2(<span class=\"number\">1</span>), tmp2(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeSuffixFunc</span><span class=\"params\">(suffix <span class=\"keyword\">string</span>)</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> !strings.HasSuffix(name, suffix) &#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> name + suffix </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">return</span> name </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func1 := makeSuffixFunc(<span class=\"string\">\".bmp\"</span>) </span><br><span class=\"line\">func2 := makeSuffixFunc(<span class=\"string\">\".jpg\"</span>) </span><br><span class=\"line\">fmt.Println(func1(<span class=\"string\">\"test\"</span>))  <span class=\"comment\">//test.bmp</span></span><br><span class=\"line\">fmt.Println(func2(<span class=\"string\">\"test\"</span>)) <span class=\"comment\">//test.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(base <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span>, <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span>)</span> &#123;</span><br><span class=\"line\">add := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">base += i</span><br><span class=\"line\"><span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sub := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">base -= i</span><br><span class=\"line\"><span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> add, sub</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1, f2 := calc(<span class=\"number\">10</span>)</span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">1</span>), f2(<span class=\"number\">2</span>)) <span class=\"comment\">//11, 9</span></span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">3</span>), f2(<span class=\"number\">4</span>)) <span class=\"comment\">//12, 8</span></span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">5</span>), f2(<span class=\"number\">6</span>)) <span class=\"comment\">//13, 7</span></span><br><span class=\"line\">fmt.Println(f1(<span class=\"number\">7</span>), f2(<span class=\"number\">8</span>)) <span class=\"comment\">//14, 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg4</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(i) <span class=\"comment\">//i全=5</span></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> func1(i <span class=\"keyword\">int</span>)&#123;</span><br><span class=\"line\">    fmt.Println(i)</span><br><span class=\"line\">&#125;(i)    <span class=\"comment\">//1,2,3,4,5</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">time.Sleep(time.Second)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组\">数组</h2>\n<ul>\n<li><p>定义 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"built_in\">len</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"comment\">//eg</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a[<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure> 长度是数组类型的一部分，因此，var a[5] int和var a[10]int是不同的类型, 不能a=b<br />\n数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1<br />\n访问越界，如果下标在数组合法范围之外，则触发访问越界，会panic<br />\n数组是值类型，因此改变副本的值，不会改变本身的值</p></li>\n<li><p>初始化<br />\n整数数组元素默认初始化是0, 字符串数组默认初始化\"\", 浮点型是0.0 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age0 [<span class=\"number\">5</span>] <span class=\"keyword\">int</span> = [<span class=\"number\">5</span>] <span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> age1 = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> age2 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;  </span><br><span class=\"line\">age3 := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; <span class=\"comment\">//1 2 3 0 0  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = [<span class=\"number\">5</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">3</span>:”hello world”, <span class=\"number\">4</span>:”tom”&#125; <span class=\"comment\">//指定索引赋值  </span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 遍历  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"a[%d]=%d\\n\"</span>, i, a[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"%d\\n\"</span>, value)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>多维数组 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> age [<span class=\"number\">5</span>][<span class=\"number\">3</span>] <span class=\"keyword\">int</span>  </span><br><span class=\"line\">   <span class=\"keyword\">var</span> age [<span class=\"number\">5</span>][<span class=\"number\">3</span>] <span class=\"keyword\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span> , <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"%d \"</span>, a[i][j])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, val := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"row[%d]=%v\\n\"</span>, i, val)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j, val2 := <span class=\"keyword\">range</span> val &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"(%d,%d)=%d \"</span>,i, j, val2)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>数组拷贝 数组是值类型 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//b初始化时是深拷贝    </span></span><br><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">b := a</span><br><span class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"a=%v\\n\"</span>, a) <span class=\"comment\">//10, 20, 30</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"b=%v\\n\"</span>, b) <span class=\"comment\">//1000, 20, 30</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>数组传参 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组在传参的时候会深拷贝   </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(b [3]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\"> b[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(b [3][3]<span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    b[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"切片\">切片</h2>\n<p>基于数组类型做的一层封装，可以自动扩容<br />\n切片是数组的一个引用，因此切片是引用类型<br />\n切片的长度可以改变，因此，切片是一个可变的数组</p>\n<h3 id=\"定义\">定义</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 []类型</span><br><span class=\"line\"><span class=\"comment\">//eg</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str []<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> arr []<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化-1\">初始化</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法1 基于数组  </span></span><br><span class=\"line\"><span class=\"comment\">//a[start:end]创建一个包括从start到end-1的切片  </span></span><br><span class=\"line\">a := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b[]<span class=\"keyword\">int</span> = a[<span class=\"number\">1</span>:<span class=\"number\">4</span>] <span class=\"comment\">//2 3 4 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//eg</span></span><br><span class=\"line\">a := [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>&#125;</span><br><span class=\"line\">b := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>]  <span class=\"comment\">//b的长度是2, cap是7</span></span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\">c := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125; <span class=\"comment\">//写长度就是数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"操作\">操作</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含start到end之间的元素，但不包含end  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice []<span class=\"keyword\">int</span> = arr[start:end]  </span><br><span class=\"line\"><span class=\"keyword\">var</span> slice []<span class=\"keyword\">int</span> = arr[:end]  <span class=\"comment\">//var slice []int = arr[0:end]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice[]<span class=\"keyword\">int</span> = arr[start:] <span class=\"comment\">//var slice []int = arr[start:len(arr)]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice[]<span class=\"keyword\">int</span> = arr[:] <span class=\"comment\">//var slice []int = arr[0, len(arr)]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//创建</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> slice []<span class=\"keyword\">type</span> = <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)  </span><br><span class=\"line\">    slice  := <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)  </span><br><span class=\"line\">    slice  := <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>, <span class=\"built_in\">cap</span>)  <span class=\"comment\">//如果使用[]访问超过len的空间，需要使用append插入元素, 否则会panic    </span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">![p6](/images/go_20200408_4.png) </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"comment\">//将切片追加到另一个切片末尾  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\ta = <span class=\"built_in\">append</span>(a, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">45</span>)</span><br><span class=\"line\">\ta = <span class=\"built_in\">append</span>(a, b...) <span class=\"comment\">//将b展开</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>拷贝 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">copy</span>(a, b) <span class=\"comment\">//不会对被拷贝的切片扩容</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>cap cap可以求出slice最大的容量，0 &lt;= len(slice) &lt;= cap(array)，其中array<br />\n如果要切片最后一个元素去掉，可以这么写: slice = slice[:len(slice)-1]</p></li>\n<li><p>切片再切片 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>&#125;</span><br><span class=\"line\">b := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\">//len2, cap 7</span></span><br><span class=\"line\">b = b[:<span class=\"built_in\">cap</span>(b)] <span class=\"comment\">//len 7 cap 7</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>空切片 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> <span class=\"comment\">//直接操作会panic</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> a == <span class=\"literal\">nil</span> &#123; <span class=\"comment\">//判空 </span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"a is nil\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   a = <span class=\"built_in\">append</span>(a, <span class=\"number\">100</span>) <span class=\"comment\">//对空切片扩容</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>传参<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sumArray</span><span class=\"params\">(a []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        sum = sum + v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">10</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">10</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">sum := sumArray(a[:]</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"切片的内存布局\">切片的内存布局</h3>\n<figure>\n<img src=\"/images/go_20200408_3.png\" alt=\"p5\" /><figcaption aria-hidden=\"true\">p5</figcaption>\n</figure>\n<h3 id=\"string与slice\">string与slice</h3>\n<p>string底层就是一个byte的数组，因此，也可以进行切片操作<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str := “hello world”  </span><br><span class=\"line\">s1 := str[<span class=\"number\">0</span>:<span class=\"number\">5</span>]  </span><br><span class=\"line\">fmt.Println(s1)  </span><br><span class=\"line\">s2 := str[<span class=\"number\">5</span>:]  </span><br><span class=\"line\">fmt.Println(s2)  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 切片示例</span></span><br><span class=\"line\"><span class=\"string\">[生成密码](https://github.com/colinblack/go_devel/blob/master/tools/passwd/passwd.go)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## map  </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\"><span class=\"comment\">//key-value的数据结构，又叫字典或关联数组  </span></span><br><span class=\"line\"><span class=\"comment\">//声明是不会分配内存的，初始化需要make  </span></span><br><span class=\"line\"><span class=\"comment\">// map是引用类型  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map1 <span class=\"keyword\">map</span>[keytype]valuetype  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>  </span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//申明时初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;“hello”: “world”&#125;  </span><br><span class=\"line\"><span class=\"comment\">//make初始化</span></span><br><span class=\"line\">a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure> * 操作<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    a[“hello”] = “world”            <span class=\"comment\">//插入和更新  </span></span><br><span class=\"line\">    Val, ok := a[“hello”]           <span class=\"comment\">//查找  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> a &#123;           <span class=\"comment\">//遍历  </span></span><br><span class=\"line\">        fmt.Println(k,v)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(a, “hello”)              <span class=\"comment\">//删除  </span></span><br><span class=\"line\">    <span class=\"built_in\">len</span>(a)                          <span class=\"comment\">//长度  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//slice of map  </span></span><br><span class=\"line\">    Items := <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][<span class=\"keyword\">int</span>], <span class=\"number\">5</span>)  </span><br><span class=\"line\">    For I := <span class=\"number\">0</span>; I &lt; <span class=\"number\">5</span>; i++ &#123;  </span><br><span class=\"line\">            items[i] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][<span class=\"keyword\">int</span>])  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 排序  </span></span><br><span class=\"line\"><span class=\"string\">map中key值是无序的  </span></span><br><span class=\"line\"><span class=\"string\">a. 先获取所有key，把key进行排序  </span></span><br><span class=\"line\"><span class=\"string\">b. 按照排序好的key，进行遍历  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 翻转   </span></span><br><span class=\"line\"><span class=\"string\">初始化另外一个map，把key、value互换即可  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 并发  </span></span><br><span class=\"line\"><span class=\"string\">* 线程同步   </span></span><br><span class=\"line\"><span class=\"string\">a. import(“sync”)  </span></span><br><span class=\"line\"><span class=\"string\">b. 互斥锁, var mu sync.Mutex  </span></span><br><span class=\"line\"><span class=\"string\">c. 读写锁, var mu sync.RWMutex  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## struct  </span></span><br><span class=\"line\"><span class=\"string\">* 用来自定义复杂数据结构  </span></span><br><span class=\"line\"><span class=\"string\">* struct里面可以包含多个字段（属性）  </span></span><br><span class=\"line\"><span class=\"string\">* struct类型可以定义方法，注意和函数的区分  </span></span><br><span class=\"line\"><span class=\"string\">* struct类型是值类型  </span></span><br><span class=\"line\"><span class=\"string\">* struct类型可以嵌套  </span></span><br><span class=\"line\"><span class=\"string\">* Go没有class类型，只有struct类型  </span></span><br><span class=\"line\"><span class=\"string\">* 结构体内字段地址连续</span></span><br><span class=\"line\"><span class=\"string\">* struct没有构造函数，一般可以使用工厂模式来解决这个问题  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span>  </span><br><span class=\"line\">    <span class=\"keyword\">type</span> student <span class=\"keyword\">struct</span> &#123;  </span><br><span class=\"line\">        Name stirng  </span><br><span class=\"line\">        Age <span class=\"keyword\">int</span>  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化 </span></span><br><span class=\"line\">    user := student&#123;</span><br><span class=\"line\">        Name : <span class=\"string\">\"user\"</span>,</span><br><span class=\"line\">        Age  : <span class=\"number\">18</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStudent</span><span class=\"params\">(name <span class=\"keyword\">string</span>, age <span class=\"keyword\">int</span>)</span> *<span class=\"title\">student</span></span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;student&#123;  </span><br><span class=\"line\">            Name:name,  </span><br><span class=\"line\">            Age:age,  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    S := <span class=\"built_in\">new</span> (student)  </span><br><span class=\"line\">    S := model.NewStudent(“tony”, <span class=\"number\">20</span>)  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* 指向结构体的指针 </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user *student <span class=\"comment\">//nil</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user01 *student = &amp;student&#123;&#125;</span><br><span class=\"line\">    user01.Name=<span class=\"string\">\"user01\"</span> <span class=\"comment\">//指针使用.操作，是编译器简化了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user02 *student = &amp;student&#123;</span><br><span class=\"line\">        Name : user02,</span><br><span class=\"line\">        Age  : <span class=\"number\">18</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user03 *student = <span class=\"built_in\">new</span>(student)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>结构体嵌套 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">       Province <span class=\"keyword\">string</span></span><br><span class=\"line\">       City     <span class=\"keyword\">string</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">       Username <span class=\"keyword\">string</span></span><br><span class=\"line\">       Sex      <span class=\"keyword\">string</span></span><br><span class=\"line\">       address  *Address</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">user := &amp;User&#123;</span><br><span class=\"line\">\tUsername: <span class=\"string\">\"user01\"</span>,</span><br><span class=\"line\">\tSex:      <span class=\"string\">\"man\"</span>,</span><br><span class=\"line\">\taddress: &amp;Address&#123;</span><br><span class=\"line\">\t\tProvince: <span class=\"string\">\"beijing\"</span>,</span><br><span class=\"line\">\t\tCity:     <span class=\"string\">\"beijing\"</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>匿名字段<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//匿名字段默认采用类型名作为字段名 </span></span><br><span class=\"line\">   <span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123; </span><br><span class=\"line\">       Username <span class=\"keyword\">string</span></span><br><span class=\"line\">       Sex <span class=\"keyword\">string</span></span><br><span class=\"line\">       Age <span class=\"keyword\">int</span></span><br><span class=\"line\">       AvatarUrl <span class=\"keyword\">string</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span></span><br><span class=\"line\">       <span class=\"keyword\">string</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> s User</span><br><span class=\"line\">   s.<span class=\"keyword\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">   s.<span class=\"keyword\">string</span>=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//嵌套结构体匿名字段 </span></span><br><span class=\"line\">   <span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Province   <span class=\"keyword\">string</span></span><br><span class=\"line\">   \tCity       <span class=\"keyword\">string</span></span><br><span class=\"line\">   \tCreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   \tUsername <span class=\"keyword\">string</span></span><br><span class=\"line\">   \tSex      <span class=\"keyword\">string</span></span><br><span class=\"line\">   \t*Address</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//方法1</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> user User</span><br><span class=\"line\">   user.Address = &amp;Address&#123;</span><br><span class=\"line\">\tProvince: <span class=\"string\">\"bj\"</span>,</span><br><span class=\"line\">\tCity:     <span class=\"string\">\"bj\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//方法2</span></span><br><span class=\"line\">   user.Province = <span class=\"string\">\"bj01\"</span></span><br><span class=\"line\">user.City = <span class=\"string\">\"bj01\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//字段冲突解决 </span></span><br><span class=\"line\">   <span class=\"keyword\">type</span> User01 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">       City     <span class=\"keyword\">string</span></span><br><span class=\"line\">       Username <span class=\"keyword\">string</span></span><br><span class=\"line\">       Sex      <span class=\"keyword\">string</span></span><br><span class=\"line\">       *Address</span><br><span class=\"line\">       *Email</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> user01 User01</span><br><span class=\"line\">   user01.City = <span class=\"string\">\"bj\"</span> <span class=\"comment\">//此时因为User01中有City被有限房屋， 如果没有再访问Address中City</span></span><br><span class=\"line\">   user.Address.CreateTime = <span class=\"string\">\"001\"</span> <span class=\"comment\">//Address和Email中都有CreateTime需要指明</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>tag 结构体的元信息，可以在运⾏的时候通过反射的机制读取出来 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123; </span><br><span class=\"line\">    Username <span class=\"keyword\">string</span> <span class=\"string\">`json:”username”,db:”user_name”`</span></span><br><span class=\"line\">    Sex <span class=\"keyword\">string</span> <span class=\"string\">`json:”sex”`</span></span><br><span class=\"line\">    Age <span class=\"keyword\">int</span> <span class=\"string\">`json:”age”`</span></span><br><span class=\"line\">    avatarUrl <span class=\"keyword\">string</span></span><br><span class=\"line\">    CreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\"></span><br><span class=\"line\">data, _ := json.Marshal(user)</span><br></pre></td></tr></table></figure></p></li>\n<li><p>结构体与json序列化</p></li>\n</ul>\n<h2 id=\"方法\">方法</h2>\n<p>Golang中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct<br />\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(recevier <span class=\"keyword\">type</span>)</span> <span class=\"title\">methodName</span><span class=\"params\">(参数列表)</span><span class=\"params\">(返回值列表)</span></span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">type</span> People <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Name    <span class=\"keyword\">string</span></span><br><span class=\"line\">        Country <span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p People)</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"name=%s country=%s\\n\"</span>, p.Name, p.Country)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p People)</span> <span class=\"title\">Set</span><span class=\"params\">(name <span class=\"keyword\">string</span>, country <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">        p.Name = name</span><br><span class=\"line\">        p.Country = country</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *People)</span> <span class=\"title\">SetV2</span><span class=\"params\">(name <span class=\"keyword\">string</span>, country <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">        p.Country = country</span><br><span class=\"line\">        p.Name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p1 People = People&#123;</span><br><span class=\"line\">\t\tName:    <span class=\"string\">\"people01\"</span>,</span><br><span class=\"line\">\t\tCountry: <span class=\"string\">\"china\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    p1.Set(<span class=\"string\">\"people02\"</span>, <span class=\"string\">\"enligsh\"</span>)  <span class=\"comment\">//传值不能改变p1的成员</span></span><br><span class=\"line\">    (&amp;p1).SetV2(<span class=\"string\">\"people02\"</span>, <span class=\"string\">\"english\"</span>) <span class=\"comment\">//要传指针 </span></span><br><span class=\"line\">    p1.SetV2(<span class=\"string\">\"people02\"</span>, <span class=\"string\">\"english\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可以为这个包中的任意类型增加方法  </span></span><br><span class=\"line\">    <span class=\"keyword\">type</span> Integer <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i Integer)</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"链表\">链表</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;  </span><br><span class=\"line\">    Name <span class=\"keyword\">string</span>  </span><br><span class=\"line\">    Next *Student  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 继承   </span></span><br><span class=\"line\"><span class=\"string\">通过匿名字段来实现   </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"keyword\">go</span></span><br><span class=\"line\">    <span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Name <span class=\"keyword\">string</span></span><br><span class=\"line\">        Sex  <span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Animal)</span> <span class=\"title\">Talk</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"i'talk, i'm %s\\n\"</span>, a.Name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">type</span> PuruAnimal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *PuruAnimal)</span> <span class=\"title\">Talk</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"buru dongwu talk\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Feet <span class=\"keyword\">string</span></span><br><span class=\"line\">        <span class=\"comment\">//Animal</span></span><br><span class=\"line\">        *Animal   </span><br><span class=\"line\">        *PuruAnimal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span> <span class=\"title\">Eat</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"dog is eat\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    func (d *Dog) Talk() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(\"dog is talking\")</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d *Dog = &amp;Dog&#123;</span><br><span class=\"line\">            Feet: <span class=\"string\">\"four feet\"</span>,</span><br><span class=\"line\">            Animal: &amp;Animal&#123;</span><br><span class=\"line\">                Name: <span class=\"string\">\"dog\"</span>,</span><br><span class=\"line\">                Sex:  <span class=\"string\">\"xiong\"</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        d.Eat()</span><br><span class=\"line\">        d.Animal.Talk() </span><br><span class=\"line\">        d.PuruAnimal.Talk()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\">接口</h2>\n<p>Interface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量<br />\n如果一个变量含有了多个interface类型的方法，那么这个变量就实现了多个接口<br />\n如果一个变量只含有了1个interface的方部分方法，那么这个变量没有实现这个接口</p>\n<h2 id=\"类型断言\">类型断言</h2>\n<p>类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型可以采用以下方法进行转换</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">var</span> t <span class=\"dt\">int</span>  </span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">var</span> x <span class=\"kw\">interface</span>{}  </span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>x = t  </span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>y, ok = x.(<span class=\"dt\">int</span>)   <span class=\"co\">//转成int，带检查  </span></span></code></pre></div>\n<h2 id=\"反射\">反射</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>可以在运行时动态获取变量的相关信息  </span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">import</span> (“reflect”)  </span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.TypeOf，获取变量的类型，返回reflect.Type类型  </span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.ValueOf，获取变量的值，返回reflect.Value类型  </span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.Value.Kind，获取变量的类别，返回一个常量  </span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.Value.Interface()，转换成interface{}类型  </span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>reflect.Value.Kind()方法返回的常量  </span></code></pre></div>\n<figure>\n<img src=\"/images/go_20200408_5.png\" alt=\"p7\" /><figcaption aria-hidden=\"true\">p7</figcaption>\n</figure>\n<h2 id=\"io\">IO</h2>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>终端读写  </span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Stdin：标准输入  </span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Stdout：标准输出  </span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Stderr：标准错误输出  </span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>文件写入  </span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.OpenFile(“output.dat”,  os.O_WRONLY|os.O_CREATE, <span class=\"dv\">0666</span>)  </span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>第二个参数：文件打开模式：  </span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span>. os.O_WRONLY：只写  </span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">2</span>. os.O_CREATE：创建文件  </span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">3</span>. os.O_RDONLY：只读  </span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">4</span>.  os.O_RDWR：读写  </span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">5</span>.  os.O_TRUNC ：清空  </span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>第三个参数：权限控制：  </span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>r ——&gt; <span class=\"dv\">004</span>  </span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>w——&gt; <span class=\"dv\">002</span>  </span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>x——&gt; <span class=\"dv\">001</span>  </span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>命令行参数  </span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>os.Args是一个string的切片，用来存储所有的命令行参数  </span></code></pre></div>\n<h2 id=\"序列化\">序列化</h2>\n<h3 id=\"json\">Json</h3>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>导入包：import “encoding/json”  </span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>序列化: json.Marshal(data <span class=\"kw\">interface</span>{})  </span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>反序列化: json.UnMarshal(data []<span class=\"dt\">byte</span>,  v  <span class=\"kw\">interface</span>{})  </span></code></pre></div>\n<h2 id=\"goroutine\">goroutine</h2>\n<p>不同goroutine之间如何通信<br />\n* 全局变量和锁同步<br />\n* Channel<br />\n类似unix中的管道<br />\n先进先出<br />\n线程安全, 多个goroutine同时访问, 不需要加锁<br />\nchannel是有类型的, 一个整数的channel只能存放整数<br />\nchannel带缓冲区</p>\n<h2 id=\"单元测试\">单元测试</h2>\n<p>文件名必须以_test.go结尾 函数名必须以Test开头</p>"},{"title":"interview","date":"2020-08-03T12:16:31.000Z","_content":"\n## 消息队列　\n### 为什么使用消息队列　\n1. 解耦\n解耦前:  \n![interview_2020080401](/images/interview_2020080401.png)  \n解耦后:  \n![interview_2020080402](/images/interview_2020080402.png)  \n\n2. 异步  \n同步:  \n![interview_2020080403](/images/interview_2020080403.png)  \n\n异步:  \n![interview_2020080404](/images/interview_2020080404.png)  \n  \n\n3. 削峰    \n削峰前:   \n![interview_2020080405](/images/interview_2020080405.png)  \n  \n削峰后:  \n![interview_2020080406](/images/interview_2020080406.png)  \n\n### 消息队列优缺点　　\n![interview_2020080407](/images/interview_2020080407.png)  \n\n\n\n### kafka, activemq, rabbitmq, rocketmq都有哪些优缺点　　\n| 特性                    | ActiveMQ                                                     | RabbitMQ                                                     | RocketMQ                                                     | Kafka                                                        |\n| :---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 单机吞吐量              | 万级，吞吐量比RocketMQ和Kafka要低了一个数量级                | 万级，吞吐量比RocketMQ和Kafka要低了一个数量级                | 10万级，RocketMQ也是可以支撑高吞吐的一种MQ                   | 10万级别，这是kafka最大的优点，就是吞吐量高。 一般配合大数据类的系统来进行实时数据计算、日志采集等场景 |\n| topic数量对吞吐量的影响 |                                                              |                                                              | topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降 这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic | topic从几十个到几百个的时候，吞吐量会大幅度下降 所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源 |\n| 时效性                  | ms级                                                         | 微秒级，这是rabbitmq的一大特点，延迟是最低的                 | ms级                                                         | 延迟在ms级以内                                               |\n| 可用性                  | 高，基于主从架构实现高可用性                                 | 高，基于主从架构实现高可用性                                 | 非常高，分布式架构                                           | 非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 |\n| 消息可靠性              | 有较低的概率丢失数据                                         |                                                              | 经过参数优化配置，可以做到0丢失                              | 经过参数优化配置，消息可以做到0丢失                          |\n| 功能支持                | MQ领域的功能极其完备                                         | 基于erlang开发，所以并发能力很强，性能极其好，延时很低       | MQ功能较为完善，还是分布式的，扩展性好                       | 功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准 |\n| 优劣势总结              | 非常成熟，功能强大，在业内大量的公司以及项目中都有应用 偶尔会有较低概率丢失消息 而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本 而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用 | erlang语言开发，性能极其好，延时很低； 吞吐量到万级，MQ功能比较完备 而且开源提供的管理界面非常棒，用起来很好用 社区相对比较活跃，几乎每个月都发布几个版本分 在国内一些互联网公司近几年用rabbitmq也比较多一些 但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。 而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。 而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。 | 接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障 日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景 而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码 还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的 | kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展 同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量 而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略 这个特性天然适合大数据实时计算以及日志收集 |\n\n消息队列技术选型　  \n中小型公司　RabbitMQ  \n大型公司，基础架构研发实力较强　RocketMQ  \n大数据领域的实时计算、日志采集等场景　Kafka  \n\n\n### 消息队列如何保证高可用　\n* RabbitMQ的高可用性　　\n　rabbitmq有三种模式：单机模式，普通集群模式，镜像集群模式　\n1. 单机模式　\n生产没人用单机模式　\n\n\n2. 普通集群模式　\n![interview_2020080501](/images/interview_2020080501.png)  \n\n3. 镜像集群模式\n![interview_2020080502](/images/interview_2020080502.png)  \n如何开启:在管理控制界面新增策略，要求数据同步到所有节点的，也可以要求就同步到指定数量的节点　　\n\n* Kafka的高可用　\n![interview_2020080503](/images/interview_2020080503.png)  \n\n### 从消息队列消费到重复数据怎么办　\n消息队列都可能提供重复数据，这个要自己保证　\n![interview_2020080504](/images/interview_2020080504.png)  \n\n如何保证数据幂等性　  \n![interview_2020080505](/images/interview_2020080505.png)     \n幂等性: 重复多次请求保证数据状态不出错(例如数据重复,数据改变) \n方案\n1. 根据主键查，如果数存在则不插入 \n2. 写redis,　天然幂等　\n3. 生产者发送每条数据时，加一个全局唯一的id，类似订单id，消费者拿到id后先根据id查询(比如查redis)\n   ,如果没有数据，则将id写入redis,　否则不处理　\n\n\n### 发送消息队列的数据丢了怎么办　\n#### rabbitmq \n* 生产者弄丢数据　\n生产者发送数据时可能由于网络问题,　在消息队列收到之前弄丢了，有两种方法解决\n1. rabbitmq事务功能　\n开启事务(channel.txSelect), 发送消息如果没有被rabbitmq收到，生产者会收到异常,　此时回滚事务(channel.txRollback), 重发, 如果接收到提交事务(channel.txCommit)\n缺点: 降低吞吐量, 耗性能　\n\n2. confirm 模式　\n生产者设置confirm后, 每次发消息会分配一个唯一id, 如果写入rabbitmq会传回一个ack消息，如果rabbitmq没有处理，会回调生产者注册的nack接口，然后重试.　生产者可以在内存里维护每个消息id状态, 超过时间没收到消息回调，可以重发 \n\n事务同步，阻塞\nconfirm 异步，非阻塞　\n\n* rabbitmq弄丢数据　\n开启持久化, 极小概率下rabbitmq没持久化完自己挂了导致少量数据丢失　\n\n设置持久化方法\n1. 创建queue时持久化，这样能保证持久化元数据，但是不能持久化数据本身\n2. 发送消息时设置deliveryMode=2,此时会将消息持久化到磁盘.\n必须同时设置这两个持久化,　rabbitmq挂了重启后会从磁盘上恢复queue里面的数据　\n\n持久化配合confirm\n只有消息被持久化到磁盘后才ack\n\n缺点:\n开启持久化也可能有数据丢失现象, 当消息写到rabbitmq后没来得及持久化, 此时rabbitmq挂了导致数据丢失　\n\n* 消费者丢失数据　　\n  收到数据还没消费进程挂了, 数据丢失, 此时使用rabbitmq的ack机制\n  首先关闭rabbitmq自动ack, 自己处理完消息再主动ack\n  \n  \n\nrabbitmq 丢数据情况　\n    <img src=\"https://i.loli.net/2020/08/11/3kZ2WGNTSzxuy7v.png\"/>\n\n\n#### kafka \n\nkafka 某个broker宕机, 然后重新选举partiton的leader时, 刚好数据没有同步，此时leader挂了,然后选举某了follorer成leader, 造成一部分数据丢失　\n为保证数据不丢要设置４个参数:\n1. 给topic设置replication.factor>1, 每个partition至少２个副本\n2. min.insync.replicas>1, 一个leader至少感知一个follower还和自己保持联系\n3. producer端acks=all, 每条数据必须写入所有replica后才能认为写成功　\n4. producer端设置retries=Max, 一旦写入失败，无限重试　　\n\n生产者不会丢数据\n如果按照上述的思路设置了ack=all，一定不会丢，要求是，leader接收到消息，所有的follower都同步到了消息之后，才认为本次写成功了。如果条件不满足，生产者会不断的重试无限次\n\nkfka 丢数据情况\n<img src=\"https://i.loli.net/2020/08/11/BnyzJCSPtmVbTFM.png\"/>\n\n### 如何保证消息的顺序　\n#### 顺序错乱的场景　\n1. rabbitmq\n多个消费者从一个queue里面读数据\n<img src=\"https://i.loli.net/2020/08/11/nUSD8KyliE7IZMN.png\"/>\n\n2. kafka\n－个topic,　一个partition, －个consumer,内存多线程数据乱掉\n<img src=\"https://i.loli.net/2020/08/11/lU9fbJqWs2YcCLo.png\"/>\n\n\n#### 解决　\n1. rabbitmq\n拆分多个queue，每个queue一个consumer，或者一个队列对应一个consumer, 内部用内存队列做排队, 分发给底层不同的worker来处理\n<img src=\"https://i.loli.net/2020/08/11/ZvkeipAzFfbnj8R.png\"/>\n\n2. kafka\n一个topic，一个partition，一个consumer，内部单线程消费，写N个内存queue，N个线程分别消费一个内存queue即可\n<img src=\"https://i.loli.net/2020/08/11/rRAukDibUgj5tqc.png\"/>\n\n### 消息积压怎么办\n* 问题的实质是消费端出了问题，解决思路如下:\n1. 先修复consumer的问题，确保其恢复消费速度，然后将现有cnosumer都停掉\n2. 新建一个topic，partition是原来的10倍，临时建立好原先10倍或者20倍的queue数量\n3. 然后写一个临时的分发数据的consumer程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的10倍数量的queue\n4. 临时征用10倍的机器来部署consumer，每一批consumer消费一个临时queue的数据\n5. 这种做法相当于是临时将queue资源和consumer资源扩大10倍，以正常的10倍速度来消费数据\n6. 等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息\n\n* 如果使用的是rabbitmq,而且设置了过期时间(TTL)，消息在queue中积压超过一定时间被清理掉了\n批量重导, 将积压的数据丢掉, 等高峰期过后, 将丢掉的数据找回重新导入mq里\n\n* 如果使用方法１后积压消息很长时间还是没处理, 导致mq快写满　\n　只能接消费一个丢弃一个, 快速消费数据, 再执行方案2  \n　<img src=\"https://i.loli.net/2020/08/12/ubWdyjXxhLA4i2P.png\"/>\n　\n### 如何设计消息队列　\n　1. mq支持伸缩性, 能快速扩容, 就可以增加吞吐量和容量, 可以参考kafka设计理念做成分布式系统, broker->topic->partition, 每个partition放一个机器, 存一部分数据, 如果现在资源不够, 给topic增加partition, 然后后做数据迁移, 增加机器　\n　2. 要考虑持久化, 顺序写磁盘,　这样没有磁盘随机读写的寻址开销, 性能就提高了(kafka思路)\n　3. 可用性, 要保证高可用, 参考kafka怎样保证高可用\n　4. 数据0丢失\n\n\n## 分布式缓存　\n### 项目中如何使用缓存　\n\n\n\n\n\n\n","source":"_posts/interview.md","raw":"---\ntitle: interview\ndate: 2020-08-03 20:16:31\ntags: 面试\n---\n\n## 消息队列　\n### 为什么使用消息队列　\n1. 解耦\n解耦前:  \n![interview_2020080401](/images/interview_2020080401.png)  \n解耦后:  \n![interview_2020080402](/images/interview_2020080402.png)  \n\n2. 异步  \n同步:  \n![interview_2020080403](/images/interview_2020080403.png)  \n\n异步:  \n![interview_2020080404](/images/interview_2020080404.png)  \n  \n\n3. 削峰    \n削峰前:   \n![interview_2020080405](/images/interview_2020080405.png)  \n  \n削峰后:  \n![interview_2020080406](/images/interview_2020080406.png)  \n\n### 消息队列优缺点　　\n![interview_2020080407](/images/interview_2020080407.png)  \n\n\n\n### kafka, activemq, rabbitmq, rocketmq都有哪些优缺点　　\n| 特性                    | ActiveMQ                                                     | RabbitMQ                                                     | RocketMQ                                                     | Kafka                                                        |\n| :---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 单机吞吐量              | 万级，吞吐量比RocketMQ和Kafka要低了一个数量级                | 万级，吞吐量比RocketMQ和Kafka要低了一个数量级                | 10万级，RocketMQ也是可以支撑高吞吐的一种MQ                   | 10万级别，这是kafka最大的优点，就是吞吐量高。 一般配合大数据类的系统来进行实时数据计算、日志采集等场景 |\n| topic数量对吞吐量的影响 |                                                              |                                                              | topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降 这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic | topic从几十个到几百个的时候，吞吐量会大幅度下降 所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源 |\n| 时效性                  | ms级                                                         | 微秒级，这是rabbitmq的一大特点，延迟是最低的                 | ms级                                                         | 延迟在ms级以内                                               |\n| 可用性                  | 高，基于主从架构实现高可用性                                 | 高，基于主从架构实现高可用性                                 | 非常高，分布式架构                                           | 非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 |\n| 消息可靠性              | 有较低的概率丢失数据                                         |                                                              | 经过参数优化配置，可以做到0丢失                              | 经过参数优化配置，消息可以做到0丢失                          |\n| 功能支持                | MQ领域的功能极其完备                                         | 基于erlang开发，所以并发能力很强，性能极其好，延时很低       | MQ功能较为完善，还是分布式的，扩展性好                       | 功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准 |\n| 优劣势总结              | 非常成熟，功能强大，在业内大量的公司以及项目中都有应用 偶尔会有较低概率丢失消息 而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本 而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用 | erlang语言开发，性能极其好，延时很低； 吞吐量到万级，MQ功能比较完备 而且开源提供的管理界面非常棒，用起来很好用 社区相对比较活跃，几乎每个月都发布几个版本分 在国内一些互联网公司近几年用rabbitmq也比较多一些 但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。 而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。 而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。 | 接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障 日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景 而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码 还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的 | kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展 同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量 而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略 这个特性天然适合大数据实时计算以及日志收集 |\n\n消息队列技术选型　  \n中小型公司　RabbitMQ  \n大型公司，基础架构研发实力较强　RocketMQ  \n大数据领域的实时计算、日志采集等场景　Kafka  \n\n\n### 消息队列如何保证高可用　\n* RabbitMQ的高可用性　　\n　rabbitmq有三种模式：单机模式，普通集群模式，镜像集群模式　\n1. 单机模式　\n生产没人用单机模式　\n\n\n2. 普通集群模式　\n![interview_2020080501](/images/interview_2020080501.png)  \n\n3. 镜像集群模式\n![interview_2020080502](/images/interview_2020080502.png)  \n如何开启:在管理控制界面新增策略，要求数据同步到所有节点的，也可以要求就同步到指定数量的节点　　\n\n* Kafka的高可用　\n![interview_2020080503](/images/interview_2020080503.png)  \n\n### 从消息队列消费到重复数据怎么办　\n消息队列都可能提供重复数据，这个要自己保证　\n![interview_2020080504](/images/interview_2020080504.png)  \n\n如何保证数据幂等性　  \n![interview_2020080505](/images/interview_2020080505.png)     \n幂等性: 重复多次请求保证数据状态不出错(例如数据重复,数据改变) \n方案\n1. 根据主键查，如果数存在则不插入 \n2. 写redis,　天然幂等　\n3. 生产者发送每条数据时，加一个全局唯一的id，类似订单id，消费者拿到id后先根据id查询(比如查redis)\n   ,如果没有数据，则将id写入redis,　否则不处理　\n\n\n### 发送消息队列的数据丢了怎么办　\n#### rabbitmq \n* 生产者弄丢数据　\n生产者发送数据时可能由于网络问题,　在消息队列收到之前弄丢了，有两种方法解决\n1. rabbitmq事务功能　\n开启事务(channel.txSelect), 发送消息如果没有被rabbitmq收到，生产者会收到异常,　此时回滚事务(channel.txRollback), 重发, 如果接收到提交事务(channel.txCommit)\n缺点: 降低吞吐量, 耗性能　\n\n2. confirm 模式　\n生产者设置confirm后, 每次发消息会分配一个唯一id, 如果写入rabbitmq会传回一个ack消息，如果rabbitmq没有处理，会回调生产者注册的nack接口，然后重试.　生产者可以在内存里维护每个消息id状态, 超过时间没收到消息回调，可以重发 \n\n事务同步，阻塞\nconfirm 异步，非阻塞　\n\n* rabbitmq弄丢数据　\n开启持久化, 极小概率下rabbitmq没持久化完自己挂了导致少量数据丢失　\n\n设置持久化方法\n1. 创建queue时持久化，这样能保证持久化元数据，但是不能持久化数据本身\n2. 发送消息时设置deliveryMode=2,此时会将消息持久化到磁盘.\n必须同时设置这两个持久化,　rabbitmq挂了重启后会从磁盘上恢复queue里面的数据　\n\n持久化配合confirm\n只有消息被持久化到磁盘后才ack\n\n缺点:\n开启持久化也可能有数据丢失现象, 当消息写到rabbitmq后没来得及持久化, 此时rabbitmq挂了导致数据丢失　\n\n* 消费者丢失数据　　\n  收到数据还没消费进程挂了, 数据丢失, 此时使用rabbitmq的ack机制\n  首先关闭rabbitmq自动ack, 自己处理完消息再主动ack\n  \n  \n\nrabbitmq 丢数据情况　\n    <img src=\"https://i.loli.net/2020/08/11/3kZ2WGNTSzxuy7v.png\"/>\n\n\n#### kafka \n\nkafka 某个broker宕机, 然后重新选举partiton的leader时, 刚好数据没有同步，此时leader挂了,然后选举某了follorer成leader, 造成一部分数据丢失　\n为保证数据不丢要设置４个参数:\n1. 给topic设置replication.factor>1, 每个partition至少２个副本\n2. min.insync.replicas>1, 一个leader至少感知一个follower还和自己保持联系\n3. producer端acks=all, 每条数据必须写入所有replica后才能认为写成功　\n4. producer端设置retries=Max, 一旦写入失败，无限重试　　\n\n生产者不会丢数据\n如果按照上述的思路设置了ack=all，一定不会丢，要求是，leader接收到消息，所有的follower都同步到了消息之后，才认为本次写成功了。如果条件不满足，生产者会不断的重试无限次\n\nkfka 丢数据情况\n<img src=\"https://i.loli.net/2020/08/11/BnyzJCSPtmVbTFM.png\"/>\n\n### 如何保证消息的顺序　\n#### 顺序错乱的场景　\n1. rabbitmq\n多个消费者从一个queue里面读数据\n<img src=\"https://i.loli.net/2020/08/11/nUSD8KyliE7IZMN.png\"/>\n\n2. kafka\n－个topic,　一个partition, －个consumer,内存多线程数据乱掉\n<img src=\"https://i.loli.net/2020/08/11/lU9fbJqWs2YcCLo.png\"/>\n\n\n#### 解决　\n1. rabbitmq\n拆分多个queue，每个queue一个consumer，或者一个队列对应一个consumer, 内部用内存队列做排队, 分发给底层不同的worker来处理\n<img src=\"https://i.loli.net/2020/08/11/ZvkeipAzFfbnj8R.png\"/>\n\n2. kafka\n一个topic，一个partition，一个consumer，内部单线程消费，写N个内存queue，N个线程分别消费一个内存queue即可\n<img src=\"https://i.loli.net/2020/08/11/rRAukDibUgj5tqc.png\"/>\n\n### 消息积压怎么办\n* 问题的实质是消费端出了问题，解决思路如下:\n1. 先修复consumer的问题，确保其恢复消费速度，然后将现有cnosumer都停掉\n2. 新建一个topic，partition是原来的10倍，临时建立好原先10倍或者20倍的queue数量\n3. 然后写一个临时的分发数据的consumer程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的10倍数量的queue\n4. 临时征用10倍的机器来部署consumer，每一批consumer消费一个临时queue的数据\n5. 这种做法相当于是临时将queue资源和consumer资源扩大10倍，以正常的10倍速度来消费数据\n6. 等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息\n\n* 如果使用的是rabbitmq,而且设置了过期时间(TTL)，消息在queue中积压超过一定时间被清理掉了\n批量重导, 将积压的数据丢掉, 等高峰期过后, 将丢掉的数据找回重新导入mq里\n\n* 如果使用方法１后积压消息很长时间还是没处理, 导致mq快写满　\n　只能接消费一个丢弃一个, 快速消费数据, 再执行方案2  \n　<img src=\"https://i.loli.net/2020/08/12/ubWdyjXxhLA4i2P.png\"/>\n　\n### 如何设计消息队列　\n　1. mq支持伸缩性, 能快速扩容, 就可以增加吞吐量和容量, 可以参考kafka设计理念做成分布式系统, broker->topic->partition, 每个partition放一个机器, 存一部分数据, 如果现在资源不够, 给topic增加partition, 然后后做数据迁移, 增加机器　\n　2. 要考虑持久化, 顺序写磁盘,　这样没有磁盘随机读写的寻址开销, 性能就提高了(kafka思路)\n　3. 可用性, 要保证高可用, 参考kafka怎样保证高可用\n　4. 数据0丢失\n\n\n## 分布式缓存　\n### 项目中如何使用缓存　\n\n\n\n\n\n\n","slug":"interview","published":1,"updated":"2020-09-02T14:34:10.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vj000754yn22xvcj2g","content":"<h2 id=\"消息队列\">消息队列　</h2>\n<h3 id=\"为什么使用消息队列\">为什么使用消息队列　</h3>\n<ol type=\"1\">\n<li><p>解耦 解耦前:<br />\n<img src=\"/images/interview_2020080401.png\" alt=\"interview_2020080401\" /><br />\n解耦后:<br />\n<img src=\"/images/interview_2020080402.png\" alt=\"interview_2020080402\" /></p></li>\n<li><p>异步<br />\n同步:<br />\n<img src=\"/images/interview_2020080403.png\" alt=\"interview_2020080403\" /></p></li>\n</ol>\n<p>异步:<br />\n<img src=\"/images/interview_2020080404.png\" alt=\"interview_2020080404\" /></p>\n<ol start=\"3\" type=\"1\">\n<li>削峰<br />\n削峰前:<br />\n<img src=\"/images/interview_2020080405.png\" alt=\"interview_2020080405\" /></li>\n</ol>\n<p>削峰后:<br />\n<img src=\"/images/interview_2020080406.png\" alt=\"interview_2020080406\" /></p>\n<h3 id=\"消息队列优缺点\">消息队列优缺点　　</h3>\n<figure>\n<img src=\"/images/interview_2020080407.png\" alt=\"interview_2020080407\" /><figcaption aria-hidden=\"true\">interview_2020080407</figcaption>\n</figure>\n<h3 id=\"kafka-activemq-rabbitmq-rocketmq都有哪些优缺点\">kafka, activemq, rabbitmq, rocketmq都有哪些优缺点　　</h3>\n<table>\n<colgroup>\n<col style=\"width: 8%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 22%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">特性</th>\n<th>ActiveMQ</th>\n<th>RabbitMQ</th>\n<th>RocketMQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">单机吞吐量</td>\n<td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td>\n<td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td>\n<td>10万级，RocketMQ也是可以支撑高吞吐的一种MQ</td>\n<td>10万级别，这是kafka最大的优点，就是吞吐量高。 一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">topic数量对吞吐量的影响</td>\n<td></td>\n<td></td>\n<td>topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降 这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic</td>\n<td>topic从几十个到几百个的时候，吞吐量会大幅度下降 所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">时效性</td>\n<td>ms级</td>\n<td>微秒级，这是rabbitmq的一大特点，延迟是最低的</td>\n<td>ms级</td>\n<td>延迟在ms级以内</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">可用性</td>\n<td>高，基于主从架构实现高可用性</td>\n<td>高，基于主从架构实现高可用性</td>\n<td>非常高，分布式架构</td>\n<td>非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">消息可靠性</td>\n<td>有较低的概率丢失数据</td>\n<td></td>\n<td>经过参数优化配置，可以做到0丢失</td>\n<td>经过参数优化配置，消息可以做到0丢失</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">功能支持</td>\n<td>MQ领域的功能极其完备</td>\n<td>基于erlang开发，所以并发能力很强，性能极其好，延时很低</td>\n<td>MQ功能较为完善，还是分布式的，扩展性好</td>\n<td>功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">优劣势总结</td>\n<td>非常成熟，功能强大，在业内大量的公司以及项目中都有应用 偶尔会有较低概率丢失消息 而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本 而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用</td>\n<td>erlang语言开发，性能极其好，延时很低； 吞吐量到万级，MQ功能比较完备 而且开源提供的管理界面非常棒，用起来很好用 社区相对比较活跃，几乎每个月都发布几个版本分 在国内一些互联网公司近几年用rabbitmq也比较多一些 但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。 而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。 而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。</td>\n<td>接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障 日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景 而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码 还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的</td>\n<td>kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展 同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量 而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略 这个特性天然适合大数据实时计算以及日志收集</td>\n</tr>\n</tbody>\n</table>\n<p>消息队列技术选型　<br />\n中小型公司　RabbitMQ<br />\n大型公司，基础架构研发实力较强　RocketMQ<br />\n大数据领域的实时计算、日志采集等场景　Kafka</p>\n<h3 id=\"消息队列如何保证高可用\">消息队列如何保证高可用　</h3>\n<ul>\n<li>RabbitMQ的高可用性　　 　rabbitmq有三种模式：单机模式，普通集群模式，镜像集群模式　</li>\n</ul>\n<ol type=\"1\">\n<li><p>单机模式　 生产没人用单机模式　</p></li>\n<li><p>普通集群模式　 <img src=\"/images/interview_2020080501.png\" alt=\"interview_2020080501\" /></p></li>\n<li><p>镜像集群模式 <img src=\"/images/interview_2020080502.png\" alt=\"interview_2020080502\" /><br />\n如何开启:在管理控制界面新增策略，要求数据同步到所有节点的，也可以要求就同步到指定数量的节点　　</p></li>\n</ol>\n<ul>\n<li>Kafka的高可用　 <img src=\"/images/interview_2020080503.png\" alt=\"interview_2020080503\" /></li>\n</ul>\n<h3 id=\"从消息队列消费到重复数据怎么办\">从消息队列消费到重复数据怎么办　</h3>\n<p>消息队列都可能提供重复数据，这个要自己保证　 <img src=\"/images/interview_2020080504.png\" alt=\"interview_2020080504\" /></p>\n<p>如何保证数据幂等性　<br />\n<img src=\"/images/interview_2020080505.png\" alt=\"interview_2020080505\" /><br />\n幂等性: 重复多次请求保证数据状态不出错(例如数据重复,数据改变) 方案 1. 根据主键查，如果数存在则不插入 2. 写redis,　天然幂等　 3. 生产者发送每条数据时，加一个全局唯一的id，类似订单id，消费者拿到id后先根据id查询(比如查redis) ,如果没有数据，则将id写入redis,　否则不处理　</p>\n<h3 id=\"发送消息队列的数据丢了怎么办\">发送消息队列的数据丢了怎么办　</h3>\n<h4 id=\"rabbitmq\">rabbitmq</h4>\n<ul>\n<li>生产者弄丢数据　 生产者发送数据时可能由于网络问题,　在消息队列收到之前弄丢了，有两种方法解决</li>\n</ul>\n<ol type=\"1\">\n<li><p>rabbitmq事务功能　 开启事务(channel.txSelect), 发送消息如果没有被rabbitmq收到，生产者会收到异常,　此时回滚事务(channel.txRollback), 重发, 如果接收到提交事务(channel.txCommit) 缺点: 降低吞吐量, 耗性能　</p></li>\n<li><p>confirm 模式　 生产者设置confirm后, 每次发消息会分配一个唯一id, 如果写入rabbitmq会传回一个ack消息，如果rabbitmq没有处理，会回调生产者注册的nack接口，然后重试.　生产者可以在内存里维护每个消息id状态, 超过时间没收到消息回调，可以重发</p></li>\n</ol>\n<p>事务同步，阻塞 confirm 异步，非阻塞　</p>\n<ul>\n<li>rabbitmq弄丢数据　 开启持久化, 极小概率下rabbitmq没持久化完自己挂了导致少量数据丢失　</li>\n</ul>\n<p>设置持久化方法 1. 创建queue时持久化，这样能保证持久化元数据，但是不能持久化数据本身 2. 发送消息时设置deliveryMode=2,此时会将消息持久化到磁盘. 必须同时设置这两个持久化,　rabbitmq挂了重启后会从磁盘上恢复queue里面的数据　</p>\n<p>持久化配合confirm 只有消息被持久化到磁盘后才ack</p>\n<p>缺点: 开启持久化也可能有数据丢失现象, 当消息写到rabbitmq后没来得及持久化, 此时rabbitmq挂了导致数据丢失　</p>\n<ul>\n<li>消费者丢失数据　　 收到数据还没消费进程挂了, 数据丢失, 此时使用rabbitmq的ack机制 首先关闭rabbitmq自动ack, 自己处理完消息再主动ack</li>\n</ul>\n<p>rabbitmq 丢数据情况　 <img src=\"https://i.loli.net/2020/08/11/3kZ2WGNTSzxuy7v.png\"/></p>\n<h4 id=\"kafka\">kafka</h4>\n<p>kafka 某个broker宕机, 然后重新选举partiton的leader时, 刚好数据没有同步，此时leader挂了,然后选举某了follorer成leader, 造成一部分数据丢失　 为保证数据不丢要设置４个参数: 1. 给topic设置replication.factor&gt;1, 每个partition至少２个副本 2. min.insync.replicas&gt;1, 一个leader至少感知一个follower还和自己保持联系 3. producer端acks=all, 每条数据必须写入所有replica后才能认为写成功　 4. producer端设置retries=Max, 一旦写入失败，无限重试　　</p>\n<p>生产者不会丢数据 如果按照上述的思路设置了ack=all，一定不会丢，要求是，leader接收到消息，所有的follower都同步到了消息之后，才认为本次写成功了。如果条件不满足，生产者会不断的重试无限次</p>\n<p>kfka 丢数据情况 <img src=\"https://i.loli.net/2020/08/11/BnyzJCSPtmVbTFM.png\"/></p>\n<h3 id=\"如何保证消息的顺序\">如何保证消息的顺序　</h3>\n<h4 id=\"顺序错乱的场景\">顺序错乱的场景　</h4>\n<ol type=\"1\">\n<li><p>rabbitmq 多个消费者从一个queue里面读数据 <img src=\"https://i.loli.net/2020/08/11/nUSD8KyliE7IZMN.png\"/></p></li>\n<li><p>kafka －个topic,　一个partition, －个consumer,内存多线程数据乱掉 <img src=\"https://i.loli.net/2020/08/11/lU9fbJqWs2YcCLo.png\"/></p></li>\n</ol>\n<h4 id=\"解决\">解决　</h4>\n<ol type=\"1\">\n<li><p>rabbitmq 拆分多个queue，每个queue一个consumer，或者一个队列对应一个consumer, 内部用内存队列做排队, 分发给底层不同的worker来处理 <img src=\"https://i.loli.net/2020/08/11/ZvkeipAzFfbnj8R.png\"/></p></li>\n<li><p>kafka 一个topic，一个partition，一个consumer，内部单线程消费，写N个内存queue，N个线程分别消费一个内存queue即可 <img src=\"https://i.loli.net/2020/08/11/rRAukDibUgj5tqc.png\"/></p></li>\n</ol>\n<h3 id=\"消息积压怎么办\">消息积压怎么办</h3>\n<ul>\n<li>问题的实质是消费端出了问题，解决思路如下:</li>\n</ul>\n<ol type=\"1\">\n<li>先修复consumer的问题，确保其恢复消费速度，然后将现有cnosumer都停掉</li>\n<li>新建一个topic，partition是原来的10倍，临时建立好原先10倍或者20倍的queue数量</li>\n<li>然后写一个临时的分发数据的consumer程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的10倍数量的queue</li>\n<li>临时征用10倍的机器来部署consumer，每一批consumer消费一个临时queue的数据</li>\n<li>这种做法相当于是临时将queue资源和consumer资源扩大10倍，以正常的10倍速度来消费数据</li>\n<li>等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息</li>\n</ol>\n<ul>\n<li><p>如果使用的是rabbitmq,而且设置了过期时间(TTL)，消息在queue中积压超过一定时间被清理掉了 批量重导, 将积压的数据丢掉, 等高峰期过后, 将丢掉的数据找回重新导入mq里</p></li>\n<li><p>如果使用方法１后积压消息很长时间还是没处理, 导致mq快写满　 　只能接消费一个丢弃一个, 快速消费数据, 再执行方案2<br />\n　<img src=\"https://i.loli.net/2020/08/12/ubWdyjXxhLA4i2P.png\"/> 　 ### 如何设计消息队列　 　1. mq支持伸缩性, 能快速扩容, 就可以增加吞吐量和容量, 可以参考kafka设计理念做成分布式系统, broker-&gt;topic-&gt;partition, 每个partition放一个机器, 存一部分数据, 如果现在资源不够, 给topic增加partition, 然后后做数据迁移, 增加机器　 　2. 要考虑持久化, 顺序写磁盘,　这样没有磁盘随机读写的寻址开销, 性能就提高了(kafka思路) 　3. 可用性, 要保证高可用, 参考kafka怎样保证高可用 　4. 数据0丢失</p></li>\n</ul>\n<h2 id=\"分布式缓存\">分布式缓存　</h2>\n<h3 id=\"项目中如何使用缓存\">项目中如何使用缓存　</h3>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"消息队列\">消息队列　</h2>\n<h3 id=\"为什么使用消息队列\">为什么使用消息队列　</h3>\n<ol type=\"1\">\n<li><p>解耦 解耦前:<br />\n<img src=\"/images/interview_2020080401.png\" alt=\"interview_2020080401\" /><br />\n解耦后:<br />\n<img src=\"/images/interview_2020080402.png\" alt=\"interview_2020080402\" /></p></li>\n<li><p>异步<br />\n同步:<br />\n<img src=\"/images/interview_2020080403.png\" alt=\"interview_2020080403\" /></p></li>\n</ol>\n<p>异步:<br />\n<img src=\"/images/interview_2020080404.png\" alt=\"interview_2020080404\" /></p>\n<ol start=\"3\" type=\"1\">\n<li>削峰<br />\n削峰前:<br />\n<img src=\"/images/interview_2020080405.png\" alt=\"interview_2020080405\" /></li>\n</ol>\n<p>削峰后:<br />\n<img src=\"/images/interview_2020080406.png\" alt=\"interview_2020080406\" /></p>\n<h3 id=\"消息队列优缺点\">消息队列优缺点　　</h3>\n<figure>\n<img src=\"/images/interview_2020080407.png\" alt=\"interview_2020080407\" /><figcaption aria-hidden=\"true\">interview_2020080407</figcaption>\n</figure>\n<h3 id=\"kafka-activemq-rabbitmq-rocketmq都有哪些优缺点\">kafka, activemq, rabbitmq, rocketmq都有哪些优缺点　　</h3>\n<table>\n<colgroup>\n<col style=\"width: 8%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 22%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">特性</th>\n<th>ActiveMQ</th>\n<th>RabbitMQ</th>\n<th>RocketMQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">单机吞吐量</td>\n<td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td>\n<td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td>\n<td>10万级，RocketMQ也是可以支撑高吞吐的一种MQ</td>\n<td>10万级别，这是kafka最大的优点，就是吞吐量高。 一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">topic数量对吞吐量的影响</td>\n<td></td>\n<td></td>\n<td>topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降 这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic</td>\n<td>topic从几十个到几百个的时候，吞吐量会大幅度下降 所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">时效性</td>\n<td>ms级</td>\n<td>微秒级，这是rabbitmq的一大特点，延迟是最低的</td>\n<td>ms级</td>\n<td>延迟在ms级以内</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">可用性</td>\n<td>高，基于主从架构实现高可用性</td>\n<td>高，基于主从架构实现高可用性</td>\n<td>非常高，分布式架构</td>\n<td>非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">消息可靠性</td>\n<td>有较低的概率丢失数据</td>\n<td></td>\n<td>经过参数优化配置，可以做到0丢失</td>\n<td>经过参数优化配置，消息可以做到0丢失</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">功能支持</td>\n<td>MQ领域的功能极其完备</td>\n<td>基于erlang开发，所以并发能力很强，性能极其好，延时很低</td>\n<td>MQ功能较为完善，还是分布式的，扩展性好</td>\n<td>功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">优劣势总结</td>\n<td>非常成熟，功能强大，在业内大量的公司以及项目中都有应用 偶尔会有较低概率丢失消息 而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本 而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用</td>\n<td>erlang语言开发，性能极其好，延时很低； 吞吐量到万级，MQ功能比较完备 而且开源提供的管理界面非常棒，用起来很好用 社区相对比较活跃，几乎每个月都发布几个版本分 在国内一些互联网公司近几年用rabbitmq也比较多一些 但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。 而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。 而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。</td>\n<td>接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障 日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景 而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码 还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的</td>\n<td>kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展 同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量 而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略 这个特性天然适合大数据实时计算以及日志收集</td>\n</tr>\n</tbody>\n</table>\n<p>消息队列技术选型　<br />\n中小型公司　RabbitMQ<br />\n大型公司，基础架构研发实力较强　RocketMQ<br />\n大数据领域的实时计算、日志采集等场景　Kafka</p>\n<h3 id=\"消息队列如何保证高可用\">消息队列如何保证高可用　</h3>\n<ul>\n<li>RabbitMQ的高可用性　　 　rabbitmq有三种模式：单机模式，普通集群模式，镜像集群模式　</li>\n</ul>\n<ol type=\"1\">\n<li><p>单机模式　 生产没人用单机模式　</p></li>\n<li><p>普通集群模式　 <img src=\"/images/interview_2020080501.png\" alt=\"interview_2020080501\" /></p></li>\n<li><p>镜像集群模式 <img src=\"/images/interview_2020080502.png\" alt=\"interview_2020080502\" /><br />\n如何开启:在管理控制界面新增策略，要求数据同步到所有节点的，也可以要求就同步到指定数量的节点　　</p></li>\n</ol>\n<ul>\n<li>Kafka的高可用　 <img src=\"/images/interview_2020080503.png\" alt=\"interview_2020080503\" /></li>\n</ul>\n<h3 id=\"从消息队列消费到重复数据怎么办\">从消息队列消费到重复数据怎么办　</h3>\n<p>消息队列都可能提供重复数据，这个要自己保证　 <img src=\"/images/interview_2020080504.png\" alt=\"interview_2020080504\" /></p>\n<p>如何保证数据幂等性　<br />\n<img src=\"/images/interview_2020080505.png\" alt=\"interview_2020080505\" /><br />\n幂等性: 重复多次请求保证数据状态不出错(例如数据重复,数据改变) 方案 1. 根据主键查，如果数存在则不插入 2. 写redis,　天然幂等　 3. 生产者发送每条数据时，加一个全局唯一的id，类似订单id，消费者拿到id后先根据id查询(比如查redis) ,如果没有数据，则将id写入redis,　否则不处理　</p>\n<h3 id=\"发送消息队列的数据丢了怎么办\">发送消息队列的数据丢了怎么办　</h3>\n<h4 id=\"rabbitmq\">rabbitmq</h4>\n<ul>\n<li>生产者弄丢数据　 生产者发送数据时可能由于网络问题,　在消息队列收到之前弄丢了，有两种方法解决</li>\n</ul>\n<ol type=\"1\">\n<li><p>rabbitmq事务功能　 开启事务(channel.txSelect), 发送消息如果没有被rabbitmq收到，生产者会收到异常,　此时回滚事务(channel.txRollback), 重发, 如果接收到提交事务(channel.txCommit) 缺点: 降低吞吐量, 耗性能　</p></li>\n<li><p>confirm 模式　 生产者设置confirm后, 每次发消息会分配一个唯一id, 如果写入rabbitmq会传回一个ack消息，如果rabbitmq没有处理，会回调生产者注册的nack接口，然后重试.　生产者可以在内存里维护每个消息id状态, 超过时间没收到消息回调，可以重发</p></li>\n</ol>\n<p>事务同步，阻塞 confirm 异步，非阻塞　</p>\n<ul>\n<li>rabbitmq弄丢数据　 开启持久化, 极小概率下rabbitmq没持久化完自己挂了导致少量数据丢失　</li>\n</ul>\n<p>设置持久化方法 1. 创建queue时持久化，这样能保证持久化元数据，但是不能持久化数据本身 2. 发送消息时设置deliveryMode=2,此时会将消息持久化到磁盘. 必须同时设置这两个持久化,　rabbitmq挂了重启后会从磁盘上恢复queue里面的数据　</p>\n<p>持久化配合confirm 只有消息被持久化到磁盘后才ack</p>\n<p>缺点: 开启持久化也可能有数据丢失现象, 当消息写到rabbitmq后没来得及持久化, 此时rabbitmq挂了导致数据丢失　</p>\n<ul>\n<li>消费者丢失数据　　 收到数据还没消费进程挂了, 数据丢失, 此时使用rabbitmq的ack机制 首先关闭rabbitmq自动ack, 自己处理完消息再主动ack</li>\n</ul>\n<p>rabbitmq 丢数据情况　 <img src=\"https://i.loli.net/2020/08/11/3kZ2WGNTSzxuy7v.png\"/></p>\n<h4 id=\"kafka\">kafka</h4>\n<p>kafka 某个broker宕机, 然后重新选举partiton的leader时, 刚好数据没有同步，此时leader挂了,然后选举某了follorer成leader, 造成一部分数据丢失　 为保证数据不丢要设置４个参数: 1. 给topic设置replication.factor&gt;1, 每个partition至少２个副本 2. min.insync.replicas&gt;1, 一个leader至少感知一个follower还和自己保持联系 3. producer端acks=all, 每条数据必须写入所有replica后才能认为写成功　 4. producer端设置retries=Max, 一旦写入失败，无限重试　　</p>\n<p>生产者不会丢数据 如果按照上述的思路设置了ack=all，一定不会丢，要求是，leader接收到消息，所有的follower都同步到了消息之后，才认为本次写成功了。如果条件不满足，生产者会不断的重试无限次</p>\n<p>kfka 丢数据情况 <img src=\"https://i.loli.net/2020/08/11/BnyzJCSPtmVbTFM.png\"/></p>\n<h3 id=\"如何保证消息的顺序\">如何保证消息的顺序　</h3>\n<h4 id=\"顺序错乱的场景\">顺序错乱的场景　</h4>\n<ol type=\"1\">\n<li><p>rabbitmq 多个消费者从一个queue里面读数据 <img src=\"https://i.loli.net/2020/08/11/nUSD8KyliE7IZMN.png\"/></p></li>\n<li><p>kafka －个topic,　一个partition, －个consumer,内存多线程数据乱掉 <img src=\"https://i.loli.net/2020/08/11/lU9fbJqWs2YcCLo.png\"/></p></li>\n</ol>\n<h4 id=\"解决\">解决　</h4>\n<ol type=\"1\">\n<li><p>rabbitmq 拆分多个queue，每个queue一个consumer，或者一个队列对应一个consumer, 内部用内存队列做排队, 分发给底层不同的worker来处理 <img src=\"https://i.loli.net/2020/08/11/ZvkeipAzFfbnj8R.png\"/></p></li>\n<li><p>kafka 一个topic，一个partition，一个consumer，内部单线程消费，写N个内存queue，N个线程分别消费一个内存queue即可 <img src=\"https://i.loli.net/2020/08/11/rRAukDibUgj5tqc.png\"/></p></li>\n</ol>\n<h3 id=\"消息积压怎么办\">消息积压怎么办</h3>\n<ul>\n<li>问题的实质是消费端出了问题，解决思路如下:</li>\n</ul>\n<ol type=\"1\">\n<li>先修复consumer的问题，确保其恢复消费速度，然后将现有cnosumer都停掉</li>\n<li>新建一个topic，partition是原来的10倍，临时建立好原先10倍或者20倍的queue数量</li>\n<li>然后写一个临时的分发数据的consumer程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的10倍数量的queue</li>\n<li>临时征用10倍的机器来部署consumer，每一批consumer消费一个临时queue的数据</li>\n<li>这种做法相当于是临时将queue资源和consumer资源扩大10倍，以正常的10倍速度来消费数据</li>\n<li>等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息</li>\n</ol>\n<ul>\n<li><p>如果使用的是rabbitmq,而且设置了过期时间(TTL)，消息在queue中积压超过一定时间被清理掉了 批量重导, 将积压的数据丢掉, 等高峰期过后, 将丢掉的数据找回重新导入mq里</p></li>\n<li><p>如果使用方法１后积压消息很长时间还是没处理, 导致mq快写满　 　只能接消费一个丢弃一个, 快速消费数据, 再执行方案2<br />\n　<img src=\"https://i.loli.net/2020/08/12/ubWdyjXxhLA4i2P.png\"/> 　 ### 如何设计消息队列　 　1. mq支持伸缩性, 能快速扩容, 就可以增加吞吐量和容量, 可以参考kafka设计理念做成分布式系统, broker-&gt;topic-&gt;partition, 每个partition放一个机器, 存一部分数据, 如果现在资源不够, 给topic增加partition, 然后后做数据迁移, 增加机器　 　2. 要考虑持久化, 顺序写磁盘,　这样没有磁盘随机读写的寻址开销, 性能就提高了(kafka思路) 　3. 可用性, 要保证高可用, 参考kafka怎样保证高可用 　4. 数据0丢失</p></li>\n</ul>\n<h2 id=\"分布式缓存\">分布式缓存　</h2>\n<h3 id=\"项目中如何使用缓存\">项目中如何使用缓存　</h3>\n"},{"title":"leetcode题解","date":"2020-08-26T23:33:46.000Z","mathjax":true,"_content":"\n### 动态规划 \n#### 5.最长回文子串 \n\n状态转移方程:\n子串长度大于２:\n$$\nP(i,j) = P(i+1, j-1) ∧ (Si == Sj) \n$$\n否则:\n$$\n\\begin{cases} P(i,i) = true \\\\ P(i, i+1) = (Si == Si+1) \\end{cases}\n$$\n\n\n遍历方式:\n\n1. 斜着遍历\n2. 从上至下遍历\n\n\n\n#### 91.解码方法\n\n状态转移方程:\n$$\nf(i)=\\begin{cases} 1, \\quad i = 0\\\\ f(i-1)+f(i-2)\\{i-1=1 or i-1=2  and i < 7\\},\\quad i>0 \\end{cases}\n$$\n\n\n","source":"_posts/leetcode题解.md","raw":"---\ntitle: leetcode题解\ndate: 2020-08-27 07:33:46\ntags: 面试\nmathjax: true\n---\n\n### 动态规划 \n#### 5.最长回文子串 \n\n状态转移方程:\n子串长度大于２:\n$$\nP(i,j) = P(i+1, j-1) ∧ (Si == Sj) \n$$\n否则:\n$$\n\\begin{cases} P(i,i) = true \\\\ P(i, i+1) = (Si == Si+1) \\end{cases}\n$$\n\n\n遍历方式:\n\n1. 斜着遍历\n2. 从上至下遍历\n\n\n\n#### 91.解码方法\n\n状态转移方程:\n$$\nf(i)=\\begin{cases} 1, \\quad i = 0\\\\ f(i-1)+f(i-2)\\{i-1=1 or i-1=2  and i < 7\\},\\quad i>0 \\end{cases}\n$$\n\n\n","slug":"leetcode题解","published":1,"updated":"2020-09-02T14:23:09.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vk000854ync4wi0tdf","content":"<h3 id=\"动态规划\">动态规划</h3>\n<h4 id=\"最长回文子串\">5.最长回文子串</h4>\n<p>状态转移方程: 子串长度大于２: <span class=\"math display\">\\[\nP(i,j) = P(i+1, j-1) ∧ (Si == Sj) \n\\]</span> 否则: <span class=\"math display\">\\[\n\\begin{cases} P(i,i) = true \\\\ P(i, i+1) = (Si == Si+1) \\end{cases}\n\\]</span></p>\n<p>遍历方式:</p>\n<ol type=\"1\">\n<li>斜着遍历</li>\n<li>从上至下遍历</li>\n</ol>\n<h4 id=\"解码方法\">91.解码方法</h4>\n<p>状态转移方程: <span class=\"math display\">\\[\nf(i)=\\begin{cases} 1, \\quad i = 0\\\\ f(i-1)+f(i-2)\\{i-1=1 or i-1=2  and i &lt; 7\\},\\quad i&gt;0 \\end{cases}\n\\]</span></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动态规划\">动态规划</h3>\n<h4 id=\"最长回文子串\">5.最长回文子串</h4>\n<p>状态转移方程: 子串长度大于２: <span class=\"math display\">\\[\nP(i,j) = P(i+1, j-1) ∧ (Si == Sj) \n\\]</span> 否则: <span class=\"math display\">\\[\n\\begin{cases} P(i,i) = true \\\\ P(i, i+1) = (Si == Si+1) \\end{cases}\n\\]</span></p>\n<p>遍历方式:</p>\n<ol type=\"1\">\n<li>斜着遍历</li>\n<li>从上至下遍历</li>\n</ol>\n<h4 id=\"解码方法\">91.解码方法</h4>\n<p>状态转移方程: <span class=\"math display\">\\[\nf(i)=\\begin{cases} 1, \\quad i = 0\\\\ f(i-1)+f(i-2)\\{i-1=1 or i-1=2  and i &lt; 7\\},\\quad i&gt;0 \\end{cases}\n\\]</span></p>\n"},{"title":"《Linux内核完全注释》笔记","date":"2020-02-18T11:46:41.000Z","_content":"\n<!-- more -->  \n## 第二章 Linux内核体系结构  \n### Linux内核模式  \n操作系统体系结构模式主要分为：  \n整体式单内核(宏内核)  \n层次式微内核  \n\n单核模式内核层次:  \n调用服务的主程序层  \n执行系统调用的服务层  \n支持系统调用的底层函数  \n![p1](/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png)  \n\n### Linux内核系统体系结构  \nLinux内核主要由5个模块构成：进程调度模块，内存管理模块，文件系统模块，进程间通信模块，网络接口模块  \n模块间的依赖关系:  \n![p2](/images/fc77df7e-b967-4408-934b-ba46535033e2.png)  \n\nLinux 0.11架构图:  \n![p3](/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png)  \n\n\n### Linux进程控制  \n内核态程序是不可抢占的(不会被schedule切换)， 用户态程序可以被抢占  \n一个进程可以在内核态或用户态下执行，内核堆栈和用户堆栈是分开的  \n\n#### 任务数据结构  \n进程上下文：当一个进程在执行时， CPU的所有寄存器中的值、进程的状态以及堆栈中的内容被称为该进程的上下文。  \n睡眠等待状态被分为可中断和不可中断  \n\n#### 进程五种运行状态  \n运行状态：进程正在被CPU执行，或者准备就绪随时可由调度程序执行  \n可中断睡眠状态：当系统产生中断或释放进程正在等待的资源或进程收到一个型号，进程能被唤醒转换到就绪状态  \n不可中断睡眠状态：只有被使用wake_up()明确唤醒时才能转换到可运行的就绪状态  \n暂停状态：当进程收到SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU进入暂停状态，像其发送SIGCONT转换到可运行状态  \n僵死状态：进程已停止运行，但父进程还没有询问其状态  \n进程状态及转换关系：  \n![p4](/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png)  \n进程调度发生的情况:  \n进程时间片用完  \n进程自动放弃CPU使用权    \n\n内核态时进程不能被 抢占，内核执行临界区代码时禁止一切中断  \n\n#### 进程初始化  \nsched_init()：  \n设置任务0运行环境变量  \n预先设置好任务0数据结构个字段  \n在全局描述符表中添加任务0的TTS(任务状态段)描述符和LDT(局部描述符表)的段描述符，并把他们分别加载到tr(任务寄存器)和(ldr)局部描述符表寄存器  \n\nmove_to_user_mod()：                            \n把运行特权级从内核态0级变换到用户态3级, 但是任然继续执行原来的代码.  \n\n#### 创建新进程  \n过程：  \n使用fork创建，所有金产能都是通过复制进程0得到， 都是进程0的子进程  \n申请内存  \n复制当前进程数据结构  \n清除信号位图  \n设置时间片  \n设置tss中各寄存器的值  \n\n#### 进程调度  \n被抢占的进程仍处于TASK_RUNNING, 但是没被cpu执行，抢占发生在用户态，内核态不能被抢占，Linux 0.11 采用优先级排队调度策略  \nschedule 首先在TASK_RUNNING进程中选，谁counter值最大执行谁 如   果这些进程时间片都用完就根据优先权值priority重新分配时间片公式：  \n![p5](/images/a0bcedee-f079-4dd0-9643-99de53b48236.png)  \n 如果此时没有其他进程运行，系统就会选择0号进程  \n\n#### 进程切换  \nswitch_to():  \n如果切换的就是当前进程则什么也不做， 否则ljmp新进程的tss地址处， cpu各寄存器状态会保存到原来进程的tss， 然后将新进程的tss寄存器信息恢复到cpu中  \n\n任务切换操作示意图:  \n![p6](/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png)  \n\n\n#### 进程终止  \n流程:  \n用户程序调用exit, 内核执行do_exit  \n关闭进程会释放内存，关闭进程打开着的所有文件  \n如果有子进程，让init进出给你作为紫金城的父进程  \n如果进程是会话头进程且控制终端，则释放子进程，并向会话所有进程发送SIGHUP  \n将进程状态至为TASK_ZOMBIE, 并向原父进程发送SIGCHLD  \n调用do_exit  \n\n进程终止时，其数据结构还保留，因为父进程要用到  \n父进程使用wait或waitpid等待子进程终止  \n\n### Linux内核对内存的使用方法\nLinux 0.11内核物理内存分布：\n![p6](/images/p1_20200224112830.png)  \n\nIntel CPU两种内存管理系统：内存分段，分页\n三种地址\n进程的逻辑地址: 程序产生与段相关的偏移地址\nCPU的线性地址: 逻辑地址 + 基地址\n实际物理内存地址: CPU外部地址总线上的寻址物理内存的地址信号\n如果启用了分页机制，线性地址会使用页目录和页表中的项变换成物理地址，如果没有启用线性地址直接成为物理地址\n\n分页机制应用：建立一个大而连续的内存空间映像\n\n虚拟内存，是一种利用二级或外部存储空间，使程序不受物理内存限制的方法，通常要大于物理内存\n\n虚拟内存实现：\n程序申请一段内存，如果内存页表中相应页面不存在内存中，CPU产生一个缺页中断，并把引起中断的线性地址放到CR2控制寄存器中， 中断处理程序通过地址把页面从二级存储空间（如硬盘）加载到物理内存， 如果内存已占满，则借助二级存储空间一部分作为交换缓冲区（Swapper）把内存中暂时不用的页面交换到二级缓冲区中，然后吧要求的页面调入内存。\n\n内存映射\n虚拟内存通过局部段描述符表(LDT)变换为CPU整个线性地址空间中的地址，再使用也目录表PDT(一级页表)和页表PT(二级页表)映射到物理地址页.\n\n### Linux系统中堆栈的使用方法\n\n\n\n\n","source":"_posts/linux内核完全注释.md","raw":"---\ntitle: 《Linux内核完全注释》笔记\ndate: 2020-02-18 19:46:41\ncategories:\n    - Linux\n---\n\n<!-- more -->  \n## 第二章 Linux内核体系结构  \n### Linux内核模式  \n操作系统体系结构模式主要分为：  \n整体式单内核(宏内核)  \n层次式微内核  \n\n单核模式内核层次:  \n调用服务的主程序层  \n执行系统调用的服务层  \n支持系统调用的底层函数  \n![p1](/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png)  \n\n### Linux内核系统体系结构  \nLinux内核主要由5个模块构成：进程调度模块，内存管理模块，文件系统模块，进程间通信模块，网络接口模块  \n模块间的依赖关系:  \n![p2](/images/fc77df7e-b967-4408-934b-ba46535033e2.png)  \n\nLinux 0.11架构图:  \n![p3](/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png)  \n\n\n### Linux进程控制  \n内核态程序是不可抢占的(不会被schedule切换)， 用户态程序可以被抢占  \n一个进程可以在内核态或用户态下执行，内核堆栈和用户堆栈是分开的  \n\n#### 任务数据结构  \n进程上下文：当一个进程在执行时， CPU的所有寄存器中的值、进程的状态以及堆栈中的内容被称为该进程的上下文。  \n睡眠等待状态被分为可中断和不可中断  \n\n#### 进程五种运行状态  \n运行状态：进程正在被CPU执行，或者准备就绪随时可由调度程序执行  \n可中断睡眠状态：当系统产生中断或释放进程正在等待的资源或进程收到一个型号，进程能被唤醒转换到就绪状态  \n不可中断睡眠状态：只有被使用wake_up()明确唤醒时才能转换到可运行的就绪状态  \n暂停状态：当进程收到SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU进入暂停状态，像其发送SIGCONT转换到可运行状态  \n僵死状态：进程已停止运行，但父进程还没有询问其状态  \n进程状态及转换关系：  \n![p4](/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png)  \n进程调度发生的情况:  \n进程时间片用完  \n进程自动放弃CPU使用权    \n\n内核态时进程不能被 抢占，内核执行临界区代码时禁止一切中断  \n\n#### 进程初始化  \nsched_init()：  \n设置任务0运行环境变量  \n预先设置好任务0数据结构个字段  \n在全局描述符表中添加任务0的TTS(任务状态段)描述符和LDT(局部描述符表)的段描述符，并把他们分别加载到tr(任务寄存器)和(ldr)局部描述符表寄存器  \n\nmove_to_user_mod()：                            \n把运行特权级从内核态0级变换到用户态3级, 但是任然继续执行原来的代码.  \n\n#### 创建新进程  \n过程：  \n使用fork创建，所有金产能都是通过复制进程0得到， 都是进程0的子进程  \n申请内存  \n复制当前进程数据结构  \n清除信号位图  \n设置时间片  \n设置tss中各寄存器的值  \n\n#### 进程调度  \n被抢占的进程仍处于TASK_RUNNING, 但是没被cpu执行，抢占发生在用户态，内核态不能被抢占，Linux 0.11 采用优先级排队调度策略  \nschedule 首先在TASK_RUNNING进程中选，谁counter值最大执行谁 如   果这些进程时间片都用完就根据优先权值priority重新分配时间片公式：  \n![p5](/images/a0bcedee-f079-4dd0-9643-99de53b48236.png)  \n 如果此时没有其他进程运行，系统就会选择0号进程  \n\n#### 进程切换  \nswitch_to():  \n如果切换的就是当前进程则什么也不做， 否则ljmp新进程的tss地址处， cpu各寄存器状态会保存到原来进程的tss， 然后将新进程的tss寄存器信息恢复到cpu中  \n\n任务切换操作示意图:  \n![p6](/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png)  \n\n\n#### 进程终止  \n流程:  \n用户程序调用exit, 内核执行do_exit  \n关闭进程会释放内存，关闭进程打开着的所有文件  \n如果有子进程，让init进出给你作为紫金城的父进程  \n如果进程是会话头进程且控制终端，则释放子进程，并向会话所有进程发送SIGHUP  \n将进程状态至为TASK_ZOMBIE, 并向原父进程发送SIGCHLD  \n调用do_exit  \n\n进程终止时，其数据结构还保留，因为父进程要用到  \n父进程使用wait或waitpid等待子进程终止  \n\n### Linux内核对内存的使用方法\nLinux 0.11内核物理内存分布：\n![p6](/images/p1_20200224112830.png)  \n\nIntel CPU两种内存管理系统：内存分段，分页\n三种地址\n进程的逻辑地址: 程序产生与段相关的偏移地址\nCPU的线性地址: 逻辑地址 + 基地址\n实际物理内存地址: CPU外部地址总线上的寻址物理内存的地址信号\n如果启用了分页机制，线性地址会使用页目录和页表中的项变换成物理地址，如果没有启用线性地址直接成为物理地址\n\n分页机制应用：建立一个大而连续的内存空间映像\n\n虚拟内存，是一种利用二级或外部存储空间，使程序不受物理内存限制的方法，通常要大于物理内存\n\n虚拟内存实现：\n程序申请一段内存，如果内存页表中相应页面不存在内存中，CPU产生一个缺页中断，并把引起中断的线性地址放到CR2控制寄存器中， 中断处理程序通过地址把页面从二级存储空间（如硬盘）加载到物理内存， 如果内存已占满，则借助二级存储空间一部分作为交换缓冲区（Swapper）把内存中暂时不用的页面交换到二级缓冲区中，然后吧要求的页面调入内存。\n\n内存映射\n虚拟内存通过局部段描述符表(LDT)变换为CPU整个线性地址空间中的地址，再使用也目录表PDT(一级页表)和页表PT(二级页表)映射到物理地址页.\n\n### Linux系统中堆栈的使用方法\n\n\n\n\n","slug":"linux内核完全注释","published":1,"updated":"2020-03-30T01:04:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vm000a54yn8swx5ouo","content":"<a id=\"more\"></a>\n<h2 id=\"第二章-linux内核体系结构\">第二章 Linux内核体系结构</h2>\n<h3 id=\"linux内核模式\">Linux内核模式</h3>\n<p>操作系统体系结构模式主要分为：<br />\n整体式单内核(宏内核)<br />\n层次式微内核</p>\n<p>单核模式内核层次:<br />\n调用服务的主程序层<br />\n执行系统调用的服务层<br />\n支持系统调用的底层函数<br />\n<img src=\"/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png\" alt=\"p1\" /></p>\n<h3 id=\"linux内核系统体系结构\">Linux内核系统体系结构</h3>\n<p>Linux内核主要由5个模块构成：进程调度模块，内存管理模块，文件系统模块，进程间通信模块，网络接口模块<br />\n模块间的依赖关系:<br />\n<img src=\"/images/fc77df7e-b967-4408-934b-ba46535033e2.png\" alt=\"p2\" /></p>\n<p>Linux 0.11架构图:<br />\n<img src=\"/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png\" alt=\"p3\" /></p>\n<h3 id=\"linux进程控制\">Linux进程控制</h3>\n<p>内核态程序是不可抢占的(不会被schedule切换)， 用户态程序可以被抢占<br />\n一个进程可以在内核态或用户态下执行，内核堆栈和用户堆栈是分开的</p>\n<h4 id=\"任务数据结构\">任务数据结构</h4>\n<p>进程上下文：当一个进程在执行时， CPU的所有寄存器中的值、进程的状态以及堆栈中的内容被称为该进程的上下文。<br />\n睡眠等待状态被分为可中断和不可中断</p>\n<h4 id=\"进程五种运行状态\">进程五种运行状态</h4>\n<p>运行状态：进程正在被CPU执行，或者准备就绪随时可由调度程序执行<br />\n可中断睡眠状态：当系统产生中断或释放进程正在等待的资源或进程收到一个型号，进程能被唤醒转换到就绪状态<br />\n不可中断睡眠状态：只有被使用wake_up()明确唤醒时才能转换到可运行的就绪状态<br />\n暂停状态：当进程收到SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU进入暂停状态，像其发送SIGCONT转换到可运行状态<br />\n僵死状态：进程已停止运行，但父进程还没有询问其状态<br />\n进程状态及转换关系：<br />\n<img src=\"/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png\" alt=\"p4\" /><br />\n进程调度发生的情况:<br />\n进程时间片用完<br />\n进程自动放弃CPU使用权</p>\n<p>内核态时进程不能被 抢占，内核执行临界区代码时禁止一切中断</p>\n<h4 id=\"进程初始化\">进程初始化</h4>\n<p>sched_init()：<br />\n设置任务0运行环境变量<br />\n预先设置好任务0数据结构个字段<br />\n在全局描述符表中添加任务0的TTS(任务状态段)描述符和LDT(局部描述符表)的段描述符，并把他们分别加载到tr(任务寄存器)和(ldr)局部描述符表寄存器</p>\n<p>move_to_user_mod()：<br />\n把运行特权级从内核态0级变换到用户态3级, 但是任然继续执行原来的代码.</p>\n<h4 id=\"创建新进程\">创建新进程</h4>\n<p>过程：<br />\n使用fork创建，所有金产能都是通过复制进程0得到， 都是进程0的子进程<br />\n申请内存<br />\n复制当前进程数据结构<br />\n清除信号位图<br />\n设置时间片<br />\n设置tss中各寄存器的值</p>\n<h4 id=\"进程调度\">进程调度</h4>\n<p>被抢占的进程仍处于TASK_RUNNING, 但是没被cpu执行，抢占发生在用户态，内核态不能被抢占，Linux 0.11 采用优先级排队调度策略<br />\nschedule 首先在TASK_RUNNING进程中选，谁counter值最大执行谁 如 果这些进程时间片都用完就根据优先权值priority重新分配时间片公式：<br />\n<img src=\"/images/a0bcedee-f079-4dd0-9643-99de53b48236.png\" alt=\"p5\" /><br />\n如果此时没有其他进程运行，系统就会选择0号进程</p>\n<h4 id=\"进程切换\">进程切换</h4>\n<p>switch_to():<br />\n如果切换的就是当前进程则什么也不做， 否则ljmp新进程的tss地址处， cpu各寄存器状态会保存到原来进程的tss， 然后将新进程的tss寄存器信息恢复到cpu中</p>\n<p>任务切换操作示意图:<br />\n<img src=\"/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png\" alt=\"p6\" /></p>\n<h4 id=\"进程终止\">进程终止</h4>\n<p>流程:<br />\n用户程序调用exit, 内核执行do_exit<br />\n关闭进程会释放内存，关闭进程打开着的所有文件<br />\n如果有子进程，让init进出给你作为紫金城的父进程<br />\n如果进程是会话头进程且控制终端，则释放子进程，并向会话所有进程发送SIGHUP<br />\n将进程状态至为TASK_ZOMBIE, 并向原父进程发送SIGCHLD<br />\n调用do_exit</p>\n<p>进程终止时，其数据结构还保留，因为父进程要用到<br />\n父进程使用wait或waitpid等待子进程终止</p>\n<h3 id=\"linux内核对内存的使用方法\">Linux内核对内存的使用方法</h3>\n<p>Linux 0.11内核物理内存分布： <img src=\"/images/p1_20200224112830.png\" alt=\"p6\" /></p>\n<p>Intel CPU两种内存管理系统：内存分段，分页 三种地址 进程的逻辑地址: 程序产生与段相关的偏移地址 CPU的线性地址: 逻辑地址 + 基地址 实际物理内存地址: CPU外部地址总线上的寻址物理内存的地址信号 如果启用了分页机制，线性地址会使用页目录和页表中的项变换成物理地址，如果没有启用线性地址直接成为物理地址</p>\n<p>分页机制应用：建立一个大而连续的内存空间映像</p>\n<p>虚拟内存，是一种利用二级或外部存储空间，使程序不受物理内存限制的方法，通常要大于物理内存</p>\n<p>虚拟内存实现： 程序申请一段内存，如果内存页表中相应页面不存在内存中，CPU产生一个缺页中断，并把引起中断的线性地址放到CR2控制寄存器中， 中断处理程序通过地址把页面从二级存储空间（如硬盘）加载到物理内存， 如果内存已占满，则借助二级存储空间一部分作为交换缓冲区（Swapper）把内存中暂时不用的页面交换到二级缓冲区中，然后吧要求的页面调入内存。</p>\n<p>内存映射 虚拟内存通过局部段描述符表(LDT)变换为CPU整个线性地址空间中的地址，再使用也目录表PDT(一级页表)和页表PT(二级页表)映射到物理地址页.</p>\n<h3 id=\"linux系统中堆栈的使用方法\">Linux系统中堆栈的使用方法</h3>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第二章-linux内核体系结构\">第二章 Linux内核体系结构</h2>\n<h3 id=\"linux内核模式\">Linux内核模式</h3>\n<p>操作系统体系结构模式主要分为：<br />\n整体式单内核(宏内核)<br />\n层次式微内核</p>\n<p>单核模式内核层次:<br />\n调用服务的主程序层<br />\n执行系统调用的服务层<br />\n支持系统调用的底层函数<br />\n<img src=\"/images/66dc1980-6148-4883-aa5b-695b3a9e0817.png\" alt=\"p1\" /></p>\n<h3 id=\"linux内核系统体系结构\">Linux内核系统体系结构</h3>\n<p>Linux内核主要由5个模块构成：进程调度模块，内存管理模块，文件系统模块，进程间通信模块，网络接口模块<br />\n模块间的依赖关系:<br />\n<img src=\"/images/fc77df7e-b967-4408-934b-ba46535033e2.png\" alt=\"p2\" /></p>\n<p>Linux 0.11架构图:<br />\n<img src=\"/images/00367ae6-72cc-4b02-9f9e-4ecefac7afce.png\" alt=\"p3\" /></p>\n<h3 id=\"linux进程控制\">Linux进程控制</h3>\n<p>内核态程序是不可抢占的(不会被schedule切换)， 用户态程序可以被抢占<br />\n一个进程可以在内核态或用户态下执行，内核堆栈和用户堆栈是分开的</p>\n<h4 id=\"任务数据结构\">任务数据结构</h4>\n<p>进程上下文：当一个进程在执行时， CPU的所有寄存器中的值、进程的状态以及堆栈中的内容被称为该进程的上下文。<br />\n睡眠等待状态被分为可中断和不可中断</p>\n<h4 id=\"进程五种运行状态\">进程五种运行状态</h4>\n<p>运行状态：进程正在被CPU执行，或者准备就绪随时可由调度程序执行<br />\n可中断睡眠状态：当系统产生中断或释放进程正在等待的资源或进程收到一个型号，进程能被唤醒转换到就绪状态<br />\n不可中断睡眠状态：只有被使用wake_up()明确唤醒时才能转换到可运行的就绪状态<br />\n暂停状态：当进程收到SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU进入暂停状态，像其发送SIGCONT转换到可运行状态<br />\n僵死状态：进程已停止运行，但父进程还没有询问其状态<br />\n进程状态及转换关系：<br />\n<img src=\"/images/70009bcf-eeea-4c5d-a784-fa561271b33e.png\" alt=\"p4\" /><br />\n进程调度发生的情况:<br />\n进程时间片用完<br />\n进程自动放弃CPU使用权</p>\n<p>内核态时进程不能被 抢占，内核执行临界区代码时禁止一切中断</p>\n<h4 id=\"进程初始化\">进程初始化</h4>\n<p>sched_init()：<br />\n设置任务0运行环境变量<br />\n预先设置好任务0数据结构个字段<br />\n在全局描述符表中添加任务0的TTS(任务状态段)描述符和LDT(局部描述符表)的段描述符，并把他们分别加载到tr(任务寄存器)和(ldr)局部描述符表寄存器</p>\n<p>move_to_user_mod()：<br />\n把运行特权级从内核态0级变换到用户态3级, 但是任然继续执行原来的代码.</p>\n<h4 id=\"创建新进程\">创建新进程</h4>\n<p>过程：<br />\n使用fork创建，所有金产能都是通过复制进程0得到， 都是进程0的子进程<br />\n申请内存<br />\n复制当前进程数据结构<br />\n清除信号位图<br />\n设置时间片<br />\n设置tss中各寄存器的值</p>\n<h4 id=\"进程调度\">进程调度</h4>\n<p>被抢占的进程仍处于TASK_RUNNING, 但是没被cpu执行，抢占发生在用户态，内核态不能被抢占，Linux 0.11 采用优先级排队调度策略<br />\nschedule 首先在TASK_RUNNING进程中选，谁counter值最大执行谁 如 果这些进程时间片都用完就根据优先权值priority重新分配时间片公式：<br />\n<img src=\"/images/a0bcedee-f079-4dd0-9643-99de53b48236.png\" alt=\"p5\" /><br />\n如果此时没有其他进程运行，系统就会选择0号进程</p>\n<h4 id=\"进程切换\">进程切换</h4>\n<p>switch_to():<br />\n如果切换的就是当前进程则什么也不做， 否则ljmp新进程的tss地址处， cpu各寄存器状态会保存到原来进程的tss， 然后将新进程的tss寄存器信息恢复到cpu中</p>\n<p>任务切换操作示意图:<br />\n<img src=\"/images/e0273d2a-56b1-4bea-acc9-bacf3d03238a.png\" alt=\"p6\" /></p>\n<h4 id=\"进程终止\">进程终止</h4>\n<p>流程:<br />\n用户程序调用exit, 内核执行do_exit<br />\n关闭进程会释放内存，关闭进程打开着的所有文件<br />\n如果有子进程，让init进出给你作为紫金城的父进程<br />\n如果进程是会话头进程且控制终端，则释放子进程，并向会话所有进程发送SIGHUP<br />\n将进程状态至为TASK_ZOMBIE, 并向原父进程发送SIGCHLD<br />\n调用do_exit</p>\n<p>进程终止时，其数据结构还保留，因为父进程要用到<br />\n父进程使用wait或waitpid等待子进程终止</p>\n<h3 id=\"linux内核对内存的使用方法\">Linux内核对内存的使用方法</h3>\n<p>Linux 0.11内核物理内存分布： <img src=\"/images/p1_20200224112830.png\" alt=\"p6\" /></p>\n<p>Intel CPU两种内存管理系统：内存分段，分页 三种地址 进程的逻辑地址: 程序产生与段相关的偏移地址 CPU的线性地址: 逻辑地址 + 基地址 实际物理内存地址: CPU外部地址总线上的寻址物理内存的地址信号 如果启用了分页机制，线性地址会使用页目录和页表中的项变换成物理地址，如果没有启用线性地址直接成为物理地址</p>\n<p>分页机制应用：建立一个大而连续的内存空间映像</p>\n<p>虚拟内存，是一种利用二级或外部存储空间，使程序不受物理内存限制的方法，通常要大于物理内存</p>\n<p>虚拟内存实现： 程序申请一段内存，如果内存页表中相应页面不存在内存中，CPU产生一个缺页中断，并把引起中断的线性地址放到CR2控制寄存器中， 中断处理程序通过地址把页面从二级存储空间（如硬盘）加载到物理内存， 如果内存已占满，则借助二级存储空间一部分作为交换缓冲区（Swapper）把内存中暂时不用的页面交换到二级缓冲区中，然后吧要求的页面调入内存。</p>\n<p>内存映射 虚拟内存通过局部段描述符表(LDT)变换为CPU整个线性地址空间中的地址，再使用也目录表PDT(一级页表)和页表PT(二级页表)映射到物理地址页.</p>\n<h3 id=\"linux系统中堆栈的使用方法\">Linux系统中堆栈的使用方法</h3>"},{"title":"linux内核","date":"2020-08-09T12:07:41.000Z","_content":"\n## 内存管理　\n#### 物理内存管理　\n\n\n\n### 页\n\n### 区域　\n\n### 内存分配　\n\n### Slab, Slub, Slob\n\n### 高端内存　\n\n### Per-CPU\n\n### 虚拟内存　\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/linux内核.md","raw":"---\ntitle: linux内核\ndate: 2020-08-09 20:07:41\ntags: Linux内核\ncategories:\n    - Linux\n---\n\n## 内存管理　\n#### 物理内存管理　\n\n\n\n### 页\n\n### 区域　\n\n### 内存分配　\n\n### Slab, Slub, Slob\n\n### 高端内存　\n\n### Per-CPU\n\n### 虚拟内存　\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"linux内核","published":1,"updated":"2020-10-21T06:28:01.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vo000d54yn38sr3kpc","content":"<h2 id=\"内存管理\">内存管理　</h2>\n<h4 id=\"物理内存管理\">物理内存管理　</h4>\n<h3 id=\"页\">页</h3>\n<h3 id=\"区域\">区域　</h3>\n<h3 id=\"内存分配\">内存分配　</h3>\n<h3 id=\"slab-slub-slob\">Slab, Slub, Slob</h3>\n<h3 id=\"高端内存\">高端内存　</h3>\n<h3 id=\"per-cpu\">Per-CPU</h3>\n<h3 id=\"虚拟内存\">虚拟内存　</h3>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存管理\">内存管理　</h2>\n<h4 id=\"物理内存管理\">物理内存管理　</h4>\n<h3 id=\"页\">页</h3>\n<h3 id=\"区域\">区域　</h3>\n<h3 id=\"内存分配\">内存分配　</h3>\n<h3 id=\"slab-slub-slob\">Slab, Slub, Slob</h3>\n<h3 id=\"高端内存\">高端内存　</h3>\n<h3 id=\"per-cpu\">Per-CPU</h3>\n<h3 id=\"虚拟内存\">虚拟内存　</h3>\n"},{"title":"linux内核实战","date":"2020-05-07T08:13:54.000Z","_content":"\n<!-- more -->  \n\n### 内核C中结构体初始化  \n\n```c\nstruct A{\n  int a;\n  int b;\n};\n\n# define __percpu       __attribute__((noderef, address_space(3)))\nstruct As{ \n   struct A gdt[2];\n};\n#define PER_CPU_DEF_ATTRIBUTES\n#define DEFINE_AS \\\n        __percpu PER_CPU_DEF_ATTRIBUTES \\\n        struct As \n\nint main(){\n    //struct As ss ={.gdt={[0]={.a= 1, .b = 2}, [1]={.a=3, .b=4}}};\n    DEFINE_AS ss ={.gdt={[0]={.a= 1, .b = 2}, [1]={.a=3, .b=4}}};\n    printf(\"%d\\n\", ss.gdt[0].a);\n    return 0;\n}\n\n```\n","source":"_posts/linux内核实战.md","raw":"---\ntitle: linux内核实战\ndate: 2020-05-07 16:13:54\ncategories:\n    - Linux\ntags:\n    - Linux内核\n---\n\n<!-- more -->  \n\n### 内核C中结构体初始化  \n\n```c\nstruct A{\n  int a;\n  int b;\n};\n\n# define __percpu       __attribute__((noderef, address_space(3)))\nstruct As{ \n   struct A gdt[2];\n};\n#define PER_CPU_DEF_ATTRIBUTES\n#define DEFINE_AS \\\n        __percpu PER_CPU_DEF_ATTRIBUTES \\\n        struct As \n\nint main(){\n    //struct As ss ={.gdt={[0]={.a= 1, .b = 2}, [1]={.a=3, .b=4}}};\n    DEFINE_AS ss ={.gdt={[0]={.a= 1, .b = 2}, [1]={.a=3, .b=4}}};\n    printf(\"%d\\n\", ss.gdt[0].a);\n    return 0;\n}\n\n```\n","slug":"linux内核实战","published":1,"updated":"2020-07-04T11:13:27.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vp000g54ynaxvt6yu3","content":"<a id=\"more\"></a>\n<h3 id=\"内核c中结构体初始化\">内核C中结构体初始化</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> __percpu       __attribute__((noderef, address_space(3)))</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">As</span>&#123;</span> </span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> <span class=\"title\">gdt</span>[2];</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PER_CPU_DEF_ATTRIBUTES</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEFINE_AS \\</span></span><br><span class=\"line\">        __percpu PER_CPU_DEF_ATTRIBUTES \\</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">As</span> </span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">main</span>()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//struct As ss =&#123;.gdt=&#123;[0]=&#123;.a= 1, .b = 2&#125;, [1]=&#123;.a=3, .b=4&#125;&#125;&#125;;</span></span><br><span class=\"line\">    DEFINE_AS ss =&#123;.gdt=&#123;[<span class=\"number\">0</span>]=&#123;.a= <span class=\"number\">1</span>, .b = <span class=\"number\">2</span>&#125;, [<span class=\"number\">1</span>]=&#123;.a=<span class=\"number\">3</span>, .b=<span class=\"number\">4</span>&#125;&#125;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ss.gdt[<span class=\"number\">0</span>].a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"内核c中结构体初始化\">内核C中结构体初始化</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> __percpu       __attribute__((noderef, address_space(3)))</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">As</span>&#123;</span> </span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> <span class=\"title\">gdt</span>[2];</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PER_CPU_DEF_ATTRIBUTES</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEFINE_AS \\</span></span><br><span class=\"line\">        __percpu PER_CPU_DEF_ATTRIBUTES \\</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">As</span> </span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">main</span>()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//struct As ss =&#123;.gdt=&#123;[0]=&#123;.a= 1, .b = 2&#125;, [1]=&#123;.a=3, .b=4&#125;&#125;&#125;;</span></span><br><span class=\"line\">    DEFINE_AS ss =&#123;.gdt=&#123;[<span class=\"number\">0</span>]=&#123;.a= <span class=\"number\">1</span>, .b = <span class=\"number\">2</span>&#125;, [<span class=\"number\">1</span>]=&#123;.a=<span class=\"number\">3</span>, .b=<span class=\"number\">4</span>&#125;&#125;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ss.gdt[<span class=\"number\">0</span>].a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"linux系统编程","date":"2020-03-30T01:02:55.000Z","_content":"\n<!-- more -->  \n### exec函数簇和system区别\nexec是新进程复制原来的进程， pid不变， exec后的代码不会被执行   \n\n### 守护进程  \n守护进程会清理环境变量， 所以守护进程中使用exec执行系统命令时最好加上绝对路径  \n","source":"_posts/linux系统编程.md","raw":"---\ntitle: linux系统编程\ndate: 2020-03-30 09:02:55\ntags: \ncategories:\n    - Linux\n---\n\n<!-- more -->  \n### exec函数簇和system区别\nexec是新进程复制原来的进程， pid不变， exec后的代码不会被执行   \n\n### 守护进程  \n守护进程会清理环境变量， 所以守护进程中使用exec执行系统命令时最好加上绝对路径  \n","slug":"linux系统编程","published":1,"updated":"2020-10-21T06:28:32.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vq000i54yn830ygcmk","content":"<a id=\"more\"></a>\n<h3 id=\"exec函数簇和system区别\">exec函数簇和system区别</h3>\n<p>exec是新进程复制原来的进程， pid不变， exec后的代码不会被执行</p>\n<h3 id=\"守护进程\">守护进程</h3>\n<p>守护进程会清理环境变量， 所以守护进程中使用exec执行系统命令时最好加上绝对路径</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"exec函数簇和system区别\">exec函数簇和system区别</h3>\n<p>exec是新进程复制原来的进程， pid不变， exec后的代码不会被执行</p>\n<h3 id=\"守护进程\">守护进程</h3>\n<p>守护进程会清理环境变量， 所以守护进程中使用exec执行系统命令时最好加上绝对路径</p>"},{"title":"makefile","date":"2020-07-04T13:40:24.000Z","_content":"\n* makefile中赋值号  \n=  直接赋值   \n:= 把之前的值替换掉   \n?= 如果变量中没值则赋值，有值则不赋值   \n+= 在变量未追加   \n\n* makefile中的shell   \n作用域   \n目标项冒号后另起一行才是shell代码    \n$(shell  这里是shell代码)    \n```makefile\ndefine get_trunk_path  \n    trunk_path=`pwd`; \\ \n    for dir in $(dirs); do \\ \n      if [[ $${trunk_path} = *$$dir* ]]; then \\ \n        trunk_path=`echo $${trunk_path} | sed \"s/\\/$$dir.*//\"`; \\\n        break; \\    \n      fi \\    \n    done; \\\n    echo $${trunk_path}\nendef  \n\nPATH_PLATFORM_PRJ := $(shell $(call get_trunk_path))\n```\nmakefile中的shell，每一行是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行，每行后面加;\\ 如上例  \n\nmakefile定义的变量使用${var}, shell定义的变量使用$${var}  \n```makefile\n//运行方式，直接make\nPATH=\"data\"\nall:\n   echo {PATH}\n   PATH=\"555\";\\\n   echo ${PATH};\\ //data\n   echo $${PATH} //555\n```\nmakefile中赋值可以这样写var = 123, shell中不能留空格var=123  \n\n* makefile中的模式规则  \n```makefile\n%:%.cpp  #冒号左边表示所有的target, 右边表示依赖的cpp文件           \n  g++ $< -o $@   #\"$<\"表示了所有依赖目标的挨个值, \"$@\"表示所有的目标的挨个值\n```\n\n","source":"_posts/makefile.md","raw":"---\ntitle: makefile\ndate: 2020-07-04 21:40:24\ncategories:\n    - Linux\ntags:\n---\n\n* makefile中赋值号  \n=  直接赋值   \n:= 把之前的值替换掉   \n?= 如果变量中没值则赋值，有值则不赋值   \n+= 在变量未追加   \n\n* makefile中的shell   \n作用域   \n目标项冒号后另起一行才是shell代码    \n$(shell  这里是shell代码)    \n```makefile\ndefine get_trunk_path  \n    trunk_path=`pwd`; \\ \n    for dir in $(dirs); do \\ \n      if [[ $${trunk_path} = *$$dir* ]]; then \\ \n        trunk_path=`echo $${trunk_path} | sed \"s/\\/$$dir.*//\"`; \\\n        break; \\    \n      fi \\    \n    done; \\\n    echo $${trunk_path}\nendef  \n\nPATH_PLATFORM_PRJ := $(shell $(call get_trunk_path))\n```\nmakefile中的shell，每一行是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行，每行后面加;\\ 如上例  \n\nmakefile定义的变量使用${var}, shell定义的变量使用$${var}  \n```makefile\n//运行方式，直接make\nPATH=\"data\"\nall:\n   echo {PATH}\n   PATH=\"555\";\\\n   echo ${PATH};\\ //data\n   echo $${PATH} //555\n```\nmakefile中赋值可以这样写var = 123, shell中不能留空格var=123  \n\n* makefile中的模式规则  \n```makefile\n%:%.cpp  #冒号左边表示所有的target, 右边表示依赖的cpp文件           \n  g++ $< -o $@   #\"$<\"表示了所有依赖目标的挨个值, \"$@\"表示所有的目标的挨个值\n```\n\n","slug":"makefile","published":1,"updated":"2020-07-04T14:01:00.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vr000m54yn7ovn1wlo","content":"<ul>\n<li><p>makefile中赋值号<br />\n= 直接赋值<br />\n:= 把之前的值替换掉<br />\n?= 如果变量中没值则赋值，有值则不赋值<br />\n+= 在变量未追加</p></li>\n<li><p>makefile中的shell<br />\n作用域<br />\n目标项冒号后另起一行才是shell代码<br />\n$(shell 这里是shell代码)<br />\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">define</span> get_trunk_path  </span><br><span class=\"line\">    trunk_path=`pwd`; \\ </span><br><span class=\"line\">    for dir in <span class=\"variable\">$(dirs)</span>; do \\ </span><br><span class=\"line\">      if [[ $$&#123;trunk_path&#125; = *$$dir* ]]; then \\ </span><br><span class=\"line\">        trunk_path=`echo $$&#123;trunk_path&#125; | sed <span class=\"string\">\"s/\\/$$dir.*//\"</span>`; \\</span><br><span class=\"line\">        break; \\    </span><br><span class=\"line\">      fi \\    </span><br><span class=\"line\">    done; \\</span><br><span class=\"line\">    echo $$&#123;trunk_path&#125;</span><br><span class=\"line\"><span class=\"keyword\">endef</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">PATH_PLATFORM_PRJ := <span class=\"variable\">$(<span class=\"built_in\">shell</span> $(<span class=\"built_in\">call</span> get_trunk_path)</span>)</span><br></pre></td></tr></table></figure> makefile中的shell，每一行是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行，每行后面加; 如上例</p></li>\n</ul>\n<p>makefile定义的变量使用<span class=\"math inline\">\\({var}, shell定义的变量使用\\)</span>${var}<br />\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//运行方式，直接make</span><br><span class=\"line\">PATH=<span class=\"string\">\"data\"</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">   echo &#123;PATH&#125;</span><br><span class=\"line\">   PATH=<span class=\"string\">\"555\"</span>;\\</span><br><span class=\"line\">   echo $&#123;PATH&#125;;\\ //data</span><br><span class=\"line\">   echo $$&#123;PATH&#125; //555</span><br></pre></td></tr></table></figure> makefile中赋值可以这样写var = 123, shell中不能留空格var=123</p>\n<ul>\n<li>makefile中的模式规则<br />\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">%:%.cpp  #冒号左边表示所有的target, 右边表示依赖的cpp文件           </span></span><br><span class=\"line\">  g++ <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span>   <span class=\"comment\">#\"$&lt;\"表示了所有依赖目标的挨个值, \"$@\"表示所有的目标的挨个值</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>makefile中赋值号<br />\n= 直接赋值<br />\n:= 把之前的值替换掉<br />\n?= 如果变量中没值则赋值，有值则不赋值<br />\n+= 在变量未追加</p></li>\n<li><p>makefile中的shell<br />\n作用域<br />\n目标项冒号后另起一行才是shell代码<br />\n$(shell 这里是shell代码)<br />\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">define</span> get_trunk_path  </span><br><span class=\"line\">    trunk_path=`pwd`; \\ </span><br><span class=\"line\">    for dir in <span class=\"variable\">$(dirs)</span>; do \\ </span><br><span class=\"line\">      if [[ $$&#123;trunk_path&#125; = *$$dir* ]]; then \\ </span><br><span class=\"line\">        trunk_path=`echo $$&#123;trunk_path&#125; | sed <span class=\"string\">\"s/\\/$$dir.*//\"</span>`; \\</span><br><span class=\"line\">        break; \\    </span><br><span class=\"line\">      fi \\    </span><br><span class=\"line\">    done; \\</span><br><span class=\"line\">    echo $$&#123;trunk_path&#125;</span><br><span class=\"line\"><span class=\"keyword\">endef</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">PATH_PLATFORM_PRJ := <span class=\"variable\">$(<span class=\"built_in\">shell</span> $(<span class=\"built_in\">call</span> get_trunk_path)</span>)</span><br></pre></td></tr></table></figure> makefile中的shell，每一行是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行，每行后面加; 如上例</p></li>\n</ul>\n<p>makefile定义的变量使用<span class=\"math inline\">\\({var}, shell定义的变量使用\\)</span>${var}<br />\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//运行方式，直接make</span><br><span class=\"line\">PATH=<span class=\"string\">\"data\"</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">   echo &#123;PATH&#125;</span><br><span class=\"line\">   PATH=<span class=\"string\">\"555\"</span>;\\</span><br><span class=\"line\">   echo $&#123;PATH&#125;;\\ //data</span><br><span class=\"line\">   echo $$&#123;PATH&#125; //555</span><br></pre></td></tr></table></figure> makefile中赋值可以这样写var = 123, shell中不能留空格var=123</p>\n<ul>\n<li>makefile中的模式规则<br />\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">%:%.cpp  #冒号左边表示所有的target, 右边表示依赖的cpp文件           </span></span><br><span class=\"line\">  g++ <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span>   <span class=\"comment\">#\"$&lt;\"表示了所有依赖目标的挨个值, \"$@\"表示所有的目标的挨个值</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"muduo笔记","date":"2020-04-04T01:10:21.000Z","_content":"\n<!-- more --> \n* non-blocking 和 IO multiplexing 一起使用\n\n\n","source":"_posts/muduo笔记.md","raw":"---\ntitle: muduo笔记\ndate: 2020-04-04 09:10:21\ntags: 网络编程\ncategories:\n    - Linux\n---\n\n<!-- more --> \n* non-blocking 和 IO multiplexing 一起使用\n\n\n","slug":"muduo笔记","published":1,"updated":"2020-07-04T06:53:07.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vt000o54ynclr8aw9a","content":"<a id=\"more\"></a>\n<ul>\n<li>non-blocking 和 IO multiplexing 一起使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>non-blocking 和 IO multiplexing 一起使用</li>\n</ul>"},{"title":"mysql","date":"2020-07-04T14:10:21.000Z","_content":"\n### 基本操作  \n```\n    #新建数据库\n    CREATE DATABASE 名\n    #显示当前使用的数据库\n    select database();\n    # 查询数据库支持的存储引擎  \n    show engines;\n    #删除表  \n    DROP TABLES 名\n```\n\n#### 创建表\n```\n    #语法  \n    CREATE [TEMPORARY] TABLE [IF NOT EXISTS] table_name [(create_definition,…)] [table_options]\n    [select_statement] \n    #TEMPORARY：表示创建临时表，在当前会话结束后将自动消失\n    #IF NOT EXISTS：在建表前，先判断表是否存在，只有该表不存在时才创建\n    #create_definition：建表语句的关键部分，用于定义表中各列的属性\n    #table_options：表的配置选项，例如：表的默认存储引擎、字符集\n    #select_statement：通过select语句建表\n\n    eg:\n    create table contacts(\n        id int not null auto_increment primay key,\n        name varchar(30),\n        phone varchar(20)\n    ) engine=innodb default charset=utf8;\n```\n\n#### 字段操作  \n```\n    #添加\n    alter table stat_online_players add time char(12);\n    #删除, 如果是主键, 必须先删掉主键约束\n    alter table stat_online_players drop column hour, drop column minute;\n    #修改字段  \n    alter table base modify recover_time int(10) NOT NULL DEFAULT '0';\n\n    #修改字段名 \n    alter table base change barrier archive_chip binary(24) ;\n```\n\n* 删除带主键约束的行  \n![p1](/images/mysql_20200705_1.png)\n\n\n* 删除主键约束\n```\n    alter table stat_online_players drop primary key; #增加主键约束（要先删掉数据吗?)\n    alter table stat_online_players add primary key(zone_id, date);#主键要先删再加才行\n```\n\n\n\n#### 数据操作 \n##### 插入数据  \n```sql\n    #INSERT 插入单条数据：\n    INSERT INTO table_name (field1, field2, ..., fieldN) VALUES (value1, value2, ..., valueN)\n    eg:\n    insert into contacts(name, sex, phone) values('张三', 1, '11111111111');\n\n    #INSERT 插入多条数据：\n    INSERT INTO table_name (field1, field2, ..., fieldN) VALUES (valueA1, valueA2, ..., valueAN), (valueB1,\n    valueB2, ..., valueBN), …, (valueN1, valueN2, ..., valueNN);\n\n    eg:\n    insert into contacts(name, sex, phone) values('李四', 1, '22222222222'), ('lily\\'s cat', 2, '33333333333'), (\"jane's\", 2, '44444444444');\n```\n* 注意事项:  \n如果字段是字符型，值必须使用单引号或者双引号，如”value”;如果值本身带单引号或双引号，需要转义   \n如果所有列都要添加数据，insert into语句可以不指定列,即   \n```sql\n    INSERT INTO table_name VALUES (value1, value2, ..., valueN);\n```\n* insert into 和 replace into 比较  \n数据存在时,  replace 为替换\n数据不存在时，replace 为插入且效率比insert高\n\n\n\n##### 修改数据  \n```sql\n    --语法:\n    UPDATE table_name SET field1=newValue1, field2=newValue2 [WHERE Clause]\n    --eg:\n    update contacts set sex=2;\n    update contacts set sex=2, phone='55555555555' where id=3;\n```  \n注意事项：\n可以同时更新一个或多个字段  \n可以通过where子句来指定更新的范围，如果不带where，则更新数据表中的所有记录  \n\n\n##### 删除数据  \n```sql\n    --语法:\n    DELETE FROM table_name [WHERE Clause]\n\n    --eg:\n    delete from contacts where id = 4;\n```\n注意事项：\n可以通过where子句来指定删除的范围，如果不带where，则删除数据表中的所有记录\n\n\n##### 查询语句   \n```sql\n    -- 语法 \n    SELECT column_name1, column_name2\n    FROM table_name\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [ORDER BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n```\n###### where语句  \n在SQL中，insert、update、delete和select后面都能带where子句，用于插入、修改、删除或查询指定条件的记录  \n单条件查询  \n```sql\n    -- 语法  \n    SELECT column_name FROM table_name WHERE column_name 运算符 value\n    运算符            描述\n    =                 等于\n    <>                或 != 不等于\n    >                 大于\n    <                 小于\n    >=                大于等于\n    <=                小于等于\n    between and       选取介于两个值之间的数据范围；在MySQL中，相当于>=并且<=\n\n    -- eg\n    select * from employee where salary between 10000 and 12000;\n```\n多条件查询  \n在where子句中，使用and、or可以把两个或多个过滤条件结合起来  \n```sql \n    -- 语法  \n    SELECT column_name FROM table_name WHERE condition1 AND condition2 OR condition3\n    运算符              描述\n    and                表示左右两边的条件同时成立\n    or                 表示左右两边只要有一个条件成立\n\n    -- eg \n    select * from employee where sex='男' and (salary <=4000 or salary >= 10000);\n```\n\n###### in运算符  \n运算符 IN 允许我们在 WHERE 子句中过滤某个字段的多个值  \n```sql\n    -- 语法 \n    SELECT column_name FROM table_name WHERE column_name IN(value1, value2, …)\n\n    -- eg\n    select * from employee where id in(1, 2, 3);  \n```\n\n###### like运算符   \n在where子句中，有时候我们需要查询包含xxx 字符串的所有记录，这时就需要用到运算符like  \n```sql\n    -- 语法  \n    SELECT column_name FROM table_name WHERE column_name LIKE ‘%value%’ \n    -- eg \n    select * from employee where name like '%小%';\n```\n说明\nLIKE子句中的%类似于正则表达式中的*，匹配任意0个或多个字符\nLIKE子句中的_匹配任意单个字符\nLIKE子句中如果没有%和_，就相当于运算符=的效果\n\n##### 查询结果排序和分页　\n* order by\n```sql\n    --语法　\n    SELECT column_name1, column_name2\n    FROM table_name1, table_name2\n    ORDER BY column_name, column_name [ASC|DESC]\n\n    --eg \n    select * from empolyee order by sex, salary desc;\n```\n说明：\nASC表示按升序排列，DESC表示按降序排列。\n默认情况下，对列按升序排\n\n* limit \n```sql\n    -- 语法　\n    SELECT column_name1, column_name2\n    FROM table_name1, table_name2\n    LIMIT [offset,] row_count\n\n    --eg  \n    select * from employee limit 0, 5;\n    select * from employee limit 5, 5;\n    select * from employee limit 10, 5;\n```\n说明：\noffset指定要返回的第一行的偏移量。第一行的偏移量是0，而不是1。\nrow_count指定要返回的最大行数。\nlimit的分页公式:\nlimit (page-1)*row_count, row_count\n\n##### 分组　\n* group by \n示根据某种规则对数据进行分组，它必须配合聚合函数进行使用，对数\n据进行分组后可以进行count、sum、avg、max和min等运算。\n```sql\n    -- 语法 \n    SELECT column_name, aggregate_function(column_name)\n    FROM table_name\n    GROUP BY column_name\n\n    --eg\n    select sex, count(*) from employee group by sex;\n```\n说明: \n    aggregate_function表示聚合函数\n    group by可以对一列或多列进行分组\n\n* having \nWHERE 关键字无法与聚合函数一起使用。HAVING 子句可\n以对分组后的各组数据进行筛选\n```sql\n   -- 语法　\n   SELECT column_name, aggregate_function(column_name)\n   FROM table_name\n   WHERE column_name operator value\n   GROUP BY column_name\n   HAVING aggregate_function(column_name) operator value\n\n   --eg\n   select dept, count(*) from employee group by dept having count(*) < 5;\n```\n* group_concat  \ngroup_concat配合group by一起使用，用于将某一列的值按指定的分隔符进行拼接\nMySQL默认的分隔符为逗号\n```sql\n    -- 语法　\n    group_concat([distinct] column_name [order by column_name asc/desc ] [separator '分隔符'])   \n\n    --eg \n    select dept, count(*), group_concat(name order by name desc separator ';') from employee group by dept;\n```\n##### 去重  \n* distinct \n支持单列和多列　\n```sql\n    -- 语法\n    SELECT DISTINCT column_name, column_name\n    FROM table_name;\n\n    -- eg\n    select distinct username, city from footprint;\n```\n\n\n#### 多表操作　　\n##### 表连接　　\n在多个表之间通过一定的连接条件，使表之间发生关联，进而能从多个表之间获取数据　　　\n```sql\n    \n    -- 语法  \n    SELECT table1.column, table2.column\n    FROM table1, table2\n    WHERE table1.column1 = table2.column2;\n```\n* 表连接几种方式　　\n内连接　join或inner join   \n自连接　同一张表内的连接　\n外连接　左外连接　left join, 右外连接 right join, 全外连接 full join\n\n* 各种表连接的区别　\n![p20200714_1](/images/mysql_20200714_p1.png)\n交叉连接（cross join）：没有用where子句的交叉连接将产生笛卡尔积，第一个表的行数乘以第二个表的行数等于笛卡尔积\n和结果集的大小\n\n###### 内连接　\n<img src=\"https://i.loli.net/2020/08/18/xW1zZPBD2gAykva.png\"/>\n```sql\nselect A.stu_no, A.name, B.course, B.score from student A join score B on(A.stu_no = B.stu_no);\n\nselect A.stu_no, A.name, B.course, B.score from student A inner join score B on(A.stu_no = B.stu_no);\n\nselect A.stu_no, A.name, B.course, B.score from student A score B while A.stu_no = B.stu_no;\n\n```\n\n###### 左连接　\n<img src=\"https://i.loli.net/2020/08/18/BtTodxEVWwKn4Gi.png\"/>\n```sql\nselect A.stu_no, A.name, B.course, B.score from student A left join score B on(A.stu_no = B.stu_no);\n```\n\n###### 笛卡尔积\n```sql\nselect A.stu_no, A.name, B.course, B.score from student A score B\n```\n\n##### 自连接　\n一种特殊的表连接，它是指相互连接的表在物理上同为一张表，但是逻辑上是多张表。自\n连接通常用于表中的数据有层次结构，如区域表、菜单表、商品分类表等　\n```sql\n#自连接语法\nSELECT A.column, B.column\nFROM table A, table B\nWHERE A.column = B.column;\n```\n<img src=\"https://i.loli.net/2020/08/19/NHFdTWZBmAqSYU2.png\"/>  \n\n\n##### 子查询　\n又成为内部查询和嵌套查询　\n<img src=\"https://i.loli.net/2020/08/19/zJZjmYDhnICQ5fq.png\"/>　\nselect 学号 姓名 地址 from 学生表 where 学号 in (select 学号 from 成绩表 where 科目=计算机)\n* 子查询in\n```sql\nSELECT column_name FROM table_name\nWHERE column_name IN(\n SELECT column_name FROM table_name [WHERE]\n);\n```\n<img src=\"https://i.loli.net/2020/08/19/VITdOj3hgZGqNpX.png\"/>   \n\n* 子查询exists\n```sql\nSELECT column_name1\nFROM table_name1\nWHERE EXISTS (SELECT * FROM table_name2 WHERE condition);\n```\n<img src=\"https://i.loli.net/2020/08/19/gLpx9WRwhtc5Hay.png\"/>   \n\n\n#### 用户管理　　\n\n#####  mysql权限体系　\n\n| 层级       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| 全局层级   | 适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。 GRANT ALL ON *.*和REVOKE ALL ON *.*只授予和撤销全局权限 |\n| 数据库层级 | 适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。 GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限 |\n| 表层级     | 适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。 GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限 |\n| 列层级     | 适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指 定与被授权列相同的列 |\n| 子程序层级 | CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被 授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级， 并存储在mysql.procs_priv表中 |\n\nMySQL的权限信息主要存储在以下几张表中，当用户连接数据库时，MySQL会根据这些表对用户\n进行权限验证\n\n| 表名        | 描述                                       |\n| ----------- | ------------------------------------------ |\n| user        | 用户权限表，记录账号、密码及全局性权限信息 |\n| db          | 记录数据库相关权限                         |\n| table_priv  | 用户对某个表拥有的权限                     |\n| column_priv | 用户对某表的某个列所拥有的权限             |\n| procs_priv  | 用户对存储过程及存储函数的操作权限         |\n\n在MySQL中，使用CREATE USER来创建用户，用户创建后没有任何权限\n**MySQL的用户账号由两部分组成：用户名和主机名，即用户名@主机名，主机名可以是IP或机器名称, 主机名为%表示允许任何地址的主机远程登录MySQL数据库**\n\n```\n#创建用户\nCREATE USER '用户名' [@'主机名'] [IDENTIFIED BY '密码'];\n#删除用户\nDROP USER '用户名' [@'主机名'];\n#修改密码\nALTER USER '用户名'@'主机名' IDENTIFIED BY '新密码';\n```\n\n##### 权限管理　\n\n在MySQL数据库中，使用grant命令授权、revoke命令撤销授权\n\n```\n#授权\ngrant all privileges on databaseName.tableName to '用户名' [@'主机名'] ;\n#撤销授权\nrevoke all privileges on databaseName.tableName from '用户名' [@'主机名'] ;\n#刷新权限\nFLUSH PRIVILEGES;\n#查看权限\nshow grants for '用户名' [@'主机名'] ;\n```\n\n###### 权限列表　\n\n使用grant和revoke进行授权、撤销授权时，需要指定具体是哪些权限，这些权限大体可以分为3类，数据类、结构类和管理类\n\n| 数据                             | 结构                                                         | 管理                                                         |\n| -------------------------------- | ------------------------------------------------------------ | :----------------------------------------------------------- |\n| SELECT INSERT UPDATE DELETE FILE | CREATE ALTER INDEX DROP CREATE TEMPORARY TABLES SHOW VIEW CREATE ROUTINE ALTER ROUTINE EXECUTE CREATE VIEW EVENT TRIGGER | USAGE GRANT SUPER PROCESS RELOAD SHUTDOWN SHOW DATABASES LOCK TABLES REFERENCES REPUCATION CUENT REPUCATION SLAVE CREATE USER |\n\n###### 禁止root远程登录\n1. root是MySQL数据库的超级管理员，几乎拥有所有权限，一旦泄露后果非常严重；\n2. root是MySQL数据库的默认用户，所有人都知道，如果不禁止远程登录，可以针对root用户暴\t力破解密码\n<img src=\"https://i.loli.net/2020/08/19/7C6q2On1VrbZwaM.png\"/>  \n\n\n###### 忘记root密码解决 \n<img src=\"https://i.loli.net/2020/08/19/oaiRTSve8bZQpF2.png\"/>  \n```\n#关闭权限验证\nmysqld --defaults-file=\"./my.cnf\" --console --skip-granttables --shared-memory\n#参数--defaults-file的值为配置文件my.cnf的完整路径\n```\nMySQL关闭权限验证后，直接通过 mysql 命令即可连接到数据库，并可正常执行各类操作 \n```\n#刷新权限\nFLUSH PRIVILEGES;\n#修改root用户的密码\nALTER USER 'root'@'localhost' IDENTIFIED BY '123456';\n```\n\n\n\n\n* sql导出数据库  \n```\n＃只导整个库结构:\n    mysqldump -uroot -p1234 -d sg17_s0 > sg17_s0.sql\n＃导出整个库结构和数据:\n    mysqldump -uroot -p1234 sg17_s0 > sg17_s0.sql\n＃只导出表结构:\n    mysqldump -uroot -p1234 -d sg17_s0 concern > concern.sql\n```\n* sql导入数据库　　\n```\n    source [所在的路径//*.sql]\n    mysql -uabc_f -p abc < abc.sql\n```\n\n* 查看端口 \n```\n    show global variables like 'port'\n```\n\n\n* 显示建表语句  \n```\n    show create table mainline_task_stat_zkw\n```\n\n\n\n\n\n\n\n* 调换行的位置\n```\n   alter table stat_online_players modify player int(10) unsigned after time;\n```\n\n\n* 求和\n```\n   select sum(peoples) as total from tutorial_stage_stat where day_id=19;\n```\n\n* 修改表结构\n```\n   alter table stat_key_data_online modify `date` char(12) NOT NULL\n```\n* 按列显示  \n```\n   select * from T_Account limit 1\\G\n```\n* pymysql \n```\n   安装(centos 6)：\n   安装pip: sudo yum -y install epel-release, sudo yum -y install python-pip\n   安装mypython: yum install -y mysql-devel, python-devel python-setuptools\n                pip install MySQL-python\n   安装mysql.connector包 pip install mysql-connector\n```\n\n* 查看mysql 配置文件的方法  \n```\n   which mysqld\n   /usr/local/mysql/bin/mysql --verbose --help | grep -A 1 'Default options'\n```\n\n* MySQL中文乱码\n[彻底解决MySQL中文乱码](https://mp.weixin.qq.com/s?__biz=MzIzNjg4MTE2Ng==&idx=4&mid=100000774&sn=c4ed7a8c2fee681523c3e30600be4bf8)\n\n* mysql修改数据库表和表中的字段的编码格式的修改\n[mysql修改数据库表和表中的字段的编码格式的修改](https://blog.csdn.net/luo4105/article/details/50804148)\n\n* mysql的latin1支持中文\n[mysql的latin1支持中文](https://blog.csdn.net/congcongsuiyue/article/details/41979643)\n\n* mysql 两表联合查询\n[mysql两表联合查询的四种情况](https://blog.csdn.net/wj123446/article/details/52870114/)\n\n* mysql 设置最大连接数\n```\n1.第一种：命令行查看和修改最大连接数(max_connections)。\n  >mysql -uuser -ppassword(命令行登录MySQL)\n  mysql>show variables like 'max_connections';(查可以看当前的最大连接数)\n  msyql>set global max_connections=1000;(设置最大连接数为1000，可以再次查看是否设置成功)\n  mysql>exit  \n2.设置/etc/my.cnf\n  注:似乎两者都要设置才会成功\n```\n* 查看错误日志路径  \n```\n   在配置中查看\n   /data/mysql/var\n   数据库存放路径\n   /var/log/message\n   系统日志    \n```\n\n* 数据库遭到攻击\n[数据库遭到攻击](https://jason5.cn/blog/ji-%5B%3F%5D-ci-shu-ju-ku-bei-gong-ji-de-jing-li.html)\n\n","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ndate: 2020-07-04 22:10:21\ncategories:\n    - 中间件\ntags: mysql\n---\n\n### 基本操作  \n```\n    #新建数据库\n    CREATE DATABASE 名\n    #显示当前使用的数据库\n    select database();\n    # 查询数据库支持的存储引擎  \n    show engines;\n    #删除表  \n    DROP TABLES 名\n```\n\n#### 创建表\n```\n    #语法  \n    CREATE [TEMPORARY] TABLE [IF NOT EXISTS] table_name [(create_definition,…)] [table_options]\n    [select_statement] \n    #TEMPORARY：表示创建临时表，在当前会话结束后将自动消失\n    #IF NOT EXISTS：在建表前，先判断表是否存在，只有该表不存在时才创建\n    #create_definition：建表语句的关键部分，用于定义表中各列的属性\n    #table_options：表的配置选项，例如：表的默认存储引擎、字符集\n    #select_statement：通过select语句建表\n\n    eg:\n    create table contacts(\n        id int not null auto_increment primay key,\n        name varchar(30),\n        phone varchar(20)\n    ) engine=innodb default charset=utf8;\n```\n\n#### 字段操作  \n```\n    #添加\n    alter table stat_online_players add time char(12);\n    #删除, 如果是主键, 必须先删掉主键约束\n    alter table stat_online_players drop column hour, drop column minute;\n    #修改字段  \n    alter table base modify recover_time int(10) NOT NULL DEFAULT '0';\n\n    #修改字段名 \n    alter table base change barrier archive_chip binary(24) ;\n```\n\n* 删除带主键约束的行  \n![p1](/images/mysql_20200705_1.png)\n\n\n* 删除主键约束\n```\n    alter table stat_online_players drop primary key; #增加主键约束（要先删掉数据吗?)\n    alter table stat_online_players add primary key(zone_id, date);#主键要先删再加才行\n```\n\n\n\n#### 数据操作 \n##### 插入数据  \n```sql\n    #INSERT 插入单条数据：\n    INSERT INTO table_name (field1, field2, ..., fieldN) VALUES (value1, value2, ..., valueN)\n    eg:\n    insert into contacts(name, sex, phone) values('张三', 1, '11111111111');\n\n    #INSERT 插入多条数据：\n    INSERT INTO table_name (field1, field2, ..., fieldN) VALUES (valueA1, valueA2, ..., valueAN), (valueB1,\n    valueB2, ..., valueBN), …, (valueN1, valueN2, ..., valueNN);\n\n    eg:\n    insert into contacts(name, sex, phone) values('李四', 1, '22222222222'), ('lily\\'s cat', 2, '33333333333'), (\"jane's\", 2, '44444444444');\n```\n* 注意事项:  \n如果字段是字符型，值必须使用单引号或者双引号，如”value”;如果值本身带单引号或双引号，需要转义   \n如果所有列都要添加数据，insert into语句可以不指定列,即   \n```sql\n    INSERT INTO table_name VALUES (value1, value2, ..., valueN);\n```\n* insert into 和 replace into 比较  \n数据存在时,  replace 为替换\n数据不存在时，replace 为插入且效率比insert高\n\n\n\n##### 修改数据  \n```sql\n    --语法:\n    UPDATE table_name SET field1=newValue1, field2=newValue2 [WHERE Clause]\n    --eg:\n    update contacts set sex=2;\n    update contacts set sex=2, phone='55555555555' where id=3;\n```  \n注意事项：\n可以同时更新一个或多个字段  \n可以通过where子句来指定更新的范围，如果不带where，则更新数据表中的所有记录  \n\n\n##### 删除数据  \n```sql\n    --语法:\n    DELETE FROM table_name [WHERE Clause]\n\n    --eg:\n    delete from contacts where id = 4;\n```\n注意事项：\n可以通过where子句来指定删除的范围，如果不带where，则删除数据表中的所有记录\n\n\n##### 查询语句   \n```sql\n    -- 语法 \n    SELECT column_name1, column_name2\n    FROM table_name\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [ORDER BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n```\n###### where语句  \n在SQL中，insert、update、delete和select后面都能带where子句，用于插入、修改、删除或查询指定条件的记录  \n单条件查询  \n```sql\n    -- 语法  \n    SELECT column_name FROM table_name WHERE column_name 运算符 value\n    运算符            描述\n    =                 等于\n    <>                或 != 不等于\n    >                 大于\n    <                 小于\n    >=                大于等于\n    <=                小于等于\n    between and       选取介于两个值之间的数据范围；在MySQL中，相当于>=并且<=\n\n    -- eg\n    select * from employee where salary between 10000 and 12000;\n```\n多条件查询  \n在where子句中，使用and、or可以把两个或多个过滤条件结合起来  \n```sql \n    -- 语法  \n    SELECT column_name FROM table_name WHERE condition1 AND condition2 OR condition3\n    运算符              描述\n    and                表示左右两边的条件同时成立\n    or                 表示左右两边只要有一个条件成立\n\n    -- eg \n    select * from employee where sex='男' and (salary <=4000 or salary >= 10000);\n```\n\n###### in运算符  \n运算符 IN 允许我们在 WHERE 子句中过滤某个字段的多个值  \n```sql\n    -- 语法 \n    SELECT column_name FROM table_name WHERE column_name IN(value1, value2, …)\n\n    -- eg\n    select * from employee where id in(1, 2, 3);  \n```\n\n###### like运算符   \n在where子句中，有时候我们需要查询包含xxx 字符串的所有记录，这时就需要用到运算符like  \n```sql\n    -- 语法  \n    SELECT column_name FROM table_name WHERE column_name LIKE ‘%value%’ \n    -- eg \n    select * from employee where name like '%小%';\n```\n说明\nLIKE子句中的%类似于正则表达式中的*，匹配任意0个或多个字符\nLIKE子句中的_匹配任意单个字符\nLIKE子句中如果没有%和_，就相当于运算符=的效果\n\n##### 查询结果排序和分页　\n* order by\n```sql\n    --语法　\n    SELECT column_name1, column_name2\n    FROM table_name1, table_name2\n    ORDER BY column_name, column_name [ASC|DESC]\n\n    --eg \n    select * from empolyee order by sex, salary desc;\n```\n说明：\nASC表示按升序排列，DESC表示按降序排列。\n默认情况下，对列按升序排\n\n* limit \n```sql\n    -- 语法　\n    SELECT column_name1, column_name2\n    FROM table_name1, table_name2\n    LIMIT [offset,] row_count\n\n    --eg  \n    select * from employee limit 0, 5;\n    select * from employee limit 5, 5;\n    select * from employee limit 10, 5;\n```\n说明：\noffset指定要返回的第一行的偏移量。第一行的偏移量是0，而不是1。\nrow_count指定要返回的最大行数。\nlimit的分页公式:\nlimit (page-1)*row_count, row_count\n\n##### 分组　\n* group by \n示根据某种规则对数据进行分组，它必须配合聚合函数进行使用，对数\n据进行分组后可以进行count、sum、avg、max和min等运算。\n```sql\n    -- 语法 \n    SELECT column_name, aggregate_function(column_name)\n    FROM table_name\n    GROUP BY column_name\n\n    --eg\n    select sex, count(*) from employee group by sex;\n```\n说明: \n    aggregate_function表示聚合函数\n    group by可以对一列或多列进行分组\n\n* having \nWHERE 关键字无法与聚合函数一起使用。HAVING 子句可\n以对分组后的各组数据进行筛选\n```sql\n   -- 语法　\n   SELECT column_name, aggregate_function(column_name)\n   FROM table_name\n   WHERE column_name operator value\n   GROUP BY column_name\n   HAVING aggregate_function(column_name) operator value\n\n   --eg\n   select dept, count(*) from employee group by dept having count(*) < 5;\n```\n* group_concat  \ngroup_concat配合group by一起使用，用于将某一列的值按指定的分隔符进行拼接\nMySQL默认的分隔符为逗号\n```sql\n    -- 语法　\n    group_concat([distinct] column_name [order by column_name asc/desc ] [separator '分隔符'])   \n\n    --eg \n    select dept, count(*), group_concat(name order by name desc separator ';') from employee group by dept;\n```\n##### 去重  \n* distinct \n支持单列和多列　\n```sql\n    -- 语法\n    SELECT DISTINCT column_name, column_name\n    FROM table_name;\n\n    -- eg\n    select distinct username, city from footprint;\n```\n\n\n#### 多表操作　　\n##### 表连接　　\n在多个表之间通过一定的连接条件，使表之间发生关联，进而能从多个表之间获取数据　　　\n```sql\n    \n    -- 语法  \n    SELECT table1.column, table2.column\n    FROM table1, table2\n    WHERE table1.column1 = table2.column2;\n```\n* 表连接几种方式　　\n内连接　join或inner join   \n自连接　同一张表内的连接　\n外连接　左外连接　left join, 右外连接 right join, 全外连接 full join\n\n* 各种表连接的区别　\n![p20200714_1](/images/mysql_20200714_p1.png)\n交叉连接（cross join）：没有用where子句的交叉连接将产生笛卡尔积，第一个表的行数乘以第二个表的行数等于笛卡尔积\n和结果集的大小\n\n###### 内连接　\n<img src=\"https://i.loli.net/2020/08/18/xW1zZPBD2gAykva.png\"/>\n```sql\nselect A.stu_no, A.name, B.course, B.score from student A join score B on(A.stu_no = B.stu_no);\n\nselect A.stu_no, A.name, B.course, B.score from student A inner join score B on(A.stu_no = B.stu_no);\n\nselect A.stu_no, A.name, B.course, B.score from student A score B while A.stu_no = B.stu_no;\n\n```\n\n###### 左连接　\n<img src=\"https://i.loli.net/2020/08/18/BtTodxEVWwKn4Gi.png\"/>\n```sql\nselect A.stu_no, A.name, B.course, B.score from student A left join score B on(A.stu_no = B.stu_no);\n```\n\n###### 笛卡尔积\n```sql\nselect A.stu_no, A.name, B.course, B.score from student A score B\n```\n\n##### 自连接　\n一种特殊的表连接，它是指相互连接的表在物理上同为一张表，但是逻辑上是多张表。自\n连接通常用于表中的数据有层次结构，如区域表、菜单表、商品分类表等　\n```sql\n#自连接语法\nSELECT A.column, B.column\nFROM table A, table B\nWHERE A.column = B.column;\n```\n<img src=\"https://i.loli.net/2020/08/19/NHFdTWZBmAqSYU2.png\"/>  \n\n\n##### 子查询　\n又成为内部查询和嵌套查询　\n<img src=\"https://i.loli.net/2020/08/19/zJZjmYDhnICQ5fq.png\"/>　\nselect 学号 姓名 地址 from 学生表 where 学号 in (select 学号 from 成绩表 where 科目=计算机)\n* 子查询in\n```sql\nSELECT column_name FROM table_name\nWHERE column_name IN(\n SELECT column_name FROM table_name [WHERE]\n);\n```\n<img src=\"https://i.loli.net/2020/08/19/VITdOj3hgZGqNpX.png\"/>   \n\n* 子查询exists\n```sql\nSELECT column_name1\nFROM table_name1\nWHERE EXISTS (SELECT * FROM table_name2 WHERE condition);\n```\n<img src=\"https://i.loli.net/2020/08/19/gLpx9WRwhtc5Hay.png\"/>   \n\n\n#### 用户管理　　\n\n#####  mysql权限体系　\n\n| 层级       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| 全局层级   | 适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。 GRANT ALL ON *.*和REVOKE ALL ON *.*只授予和撤销全局权限 |\n| 数据库层级 | 适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。 GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限 |\n| 表层级     | 适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。 GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限 |\n| 列层级     | 适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指 定与被授权列相同的列 |\n| 子程序层级 | CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被 授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级， 并存储在mysql.procs_priv表中 |\n\nMySQL的权限信息主要存储在以下几张表中，当用户连接数据库时，MySQL会根据这些表对用户\n进行权限验证\n\n| 表名        | 描述                                       |\n| ----------- | ------------------------------------------ |\n| user        | 用户权限表，记录账号、密码及全局性权限信息 |\n| db          | 记录数据库相关权限                         |\n| table_priv  | 用户对某个表拥有的权限                     |\n| column_priv | 用户对某表的某个列所拥有的权限             |\n| procs_priv  | 用户对存储过程及存储函数的操作权限         |\n\n在MySQL中，使用CREATE USER来创建用户，用户创建后没有任何权限\n**MySQL的用户账号由两部分组成：用户名和主机名，即用户名@主机名，主机名可以是IP或机器名称, 主机名为%表示允许任何地址的主机远程登录MySQL数据库**\n\n```\n#创建用户\nCREATE USER '用户名' [@'主机名'] [IDENTIFIED BY '密码'];\n#删除用户\nDROP USER '用户名' [@'主机名'];\n#修改密码\nALTER USER '用户名'@'主机名' IDENTIFIED BY '新密码';\n```\n\n##### 权限管理　\n\n在MySQL数据库中，使用grant命令授权、revoke命令撤销授权\n\n```\n#授权\ngrant all privileges on databaseName.tableName to '用户名' [@'主机名'] ;\n#撤销授权\nrevoke all privileges on databaseName.tableName from '用户名' [@'主机名'] ;\n#刷新权限\nFLUSH PRIVILEGES;\n#查看权限\nshow grants for '用户名' [@'主机名'] ;\n```\n\n###### 权限列表　\n\n使用grant和revoke进行授权、撤销授权时，需要指定具体是哪些权限，这些权限大体可以分为3类，数据类、结构类和管理类\n\n| 数据                             | 结构                                                         | 管理                                                         |\n| -------------------------------- | ------------------------------------------------------------ | :----------------------------------------------------------- |\n| SELECT INSERT UPDATE DELETE FILE | CREATE ALTER INDEX DROP CREATE TEMPORARY TABLES SHOW VIEW CREATE ROUTINE ALTER ROUTINE EXECUTE CREATE VIEW EVENT TRIGGER | USAGE GRANT SUPER PROCESS RELOAD SHUTDOWN SHOW DATABASES LOCK TABLES REFERENCES REPUCATION CUENT REPUCATION SLAVE CREATE USER |\n\n###### 禁止root远程登录\n1. root是MySQL数据库的超级管理员，几乎拥有所有权限，一旦泄露后果非常严重；\n2. root是MySQL数据库的默认用户，所有人都知道，如果不禁止远程登录，可以针对root用户暴\t力破解密码\n<img src=\"https://i.loli.net/2020/08/19/7C6q2On1VrbZwaM.png\"/>  \n\n\n###### 忘记root密码解决 \n<img src=\"https://i.loli.net/2020/08/19/oaiRTSve8bZQpF2.png\"/>  \n```\n#关闭权限验证\nmysqld --defaults-file=\"./my.cnf\" --console --skip-granttables --shared-memory\n#参数--defaults-file的值为配置文件my.cnf的完整路径\n```\nMySQL关闭权限验证后，直接通过 mysql 命令即可连接到数据库，并可正常执行各类操作 \n```\n#刷新权限\nFLUSH PRIVILEGES;\n#修改root用户的密码\nALTER USER 'root'@'localhost' IDENTIFIED BY '123456';\n```\n\n\n\n\n* sql导出数据库  \n```\n＃只导整个库结构:\n    mysqldump -uroot -p1234 -d sg17_s0 > sg17_s0.sql\n＃导出整个库结构和数据:\n    mysqldump -uroot -p1234 sg17_s0 > sg17_s0.sql\n＃只导出表结构:\n    mysqldump -uroot -p1234 -d sg17_s0 concern > concern.sql\n```\n* sql导入数据库　　\n```\n    source [所在的路径//*.sql]\n    mysql -uabc_f -p abc < abc.sql\n```\n\n* 查看端口 \n```\n    show global variables like 'port'\n```\n\n\n* 显示建表语句  \n```\n    show create table mainline_task_stat_zkw\n```\n\n\n\n\n\n\n\n* 调换行的位置\n```\n   alter table stat_online_players modify player int(10) unsigned after time;\n```\n\n\n* 求和\n```\n   select sum(peoples) as total from tutorial_stage_stat where day_id=19;\n```\n\n* 修改表结构\n```\n   alter table stat_key_data_online modify `date` char(12) NOT NULL\n```\n* 按列显示  \n```\n   select * from T_Account limit 1\\G\n```\n* pymysql \n```\n   安装(centos 6)：\n   安装pip: sudo yum -y install epel-release, sudo yum -y install python-pip\n   安装mypython: yum install -y mysql-devel, python-devel python-setuptools\n                pip install MySQL-python\n   安装mysql.connector包 pip install mysql-connector\n```\n\n* 查看mysql 配置文件的方法  \n```\n   which mysqld\n   /usr/local/mysql/bin/mysql --verbose --help | grep -A 1 'Default options'\n```\n\n* MySQL中文乱码\n[彻底解决MySQL中文乱码](https://mp.weixin.qq.com/s?__biz=MzIzNjg4MTE2Ng==&idx=4&mid=100000774&sn=c4ed7a8c2fee681523c3e30600be4bf8)\n\n* mysql修改数据库表和表中的字段的编码格式的修改\n[mysql修改数据库表和表中的字段的编码格式的修改](https://blog.csdn.net/luo4105/article/details/50804148)\n\n* mysql的latin1支持中文\n[mysql的latin1支持中文](https://blog.csdn.net/congcongsuiyue/article/details/41979643)\n\n* mysql 两表联合查询\n[mysql两表联合查询的四种情况](https://blog.csdn.net/wj123446/article/details/52870114/)\n\n* mysql 设置最大连接数\n```\n1.第一种：命令行查看和修改最大连接数(max_connections)。\n  >mysql -uuser -ppassword(命令行登录MySQL)\n  mysql>show variables like 'max_connections';(查可以看当前的最大连接数)\n  msyql>set global max_connections=1000;(设置最大连接数为1000，可以再次查看是否设置成功)\n  mysql>exit  \n2.设置/etc/my.cnf\n  注:似乎两者都要设置才会成功\n```\n* 查看错误日志路径  \n```\n   在配置中查看\n   /data/mysql/var\n   数据库存放路径\n   /var/log/message\n   系统日志    \n```\n\n* 数据库遭到攻击\n[数据库遭到攻击](https://jason5.cn/blog/ji-%5B%3F%5D-ci-shu-ju-ku-bei-gong-ji-de-jing-li.html)\n\n","slug":"mysql","published":1,"updated":"2020-08-19T14:17:09.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vu000s54yn9u2t7mi5","content":"<h3 id=\"基本操作\">基本操作</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#新建数据库</span><br><span class=\"line\">CREATE DATABASE 名</span><br><span class=\"line\">#显示当前使用的数据库</span><br><span class=\"line\">select database();</span><br><span class=\"line\"># 查询数据库支持的存储引擎  </span><br><span class=\"line\">show engines;</span><br><span class=\"line\">#删除表  </span><br><span class=\"line\">DROP TABLES 名</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建表\">创建表</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#语法  </span><br><span class=\"line\">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] table_name [(create_definition,…)] [table_options]</span><br><span class=\"line\">[select_statement] </span><br><span class=\"line\">#TEMPORARY：表示创建临时表，在当前会话结束后将自动消失</span><br><span class=\"line\">#IF NOT EXISTS：在建表前，先判断表是否存在，只有该表不存在时才创建</span><br><span class=\"line\">#create_definition：建表语句的关键部分，用于定义表中各列的属性</span><br><span class=\"line\">#table_options：表的配置选项，例如：表的默认存储引擎、字符集</span><br><span class=\"line\">#select_statement：通过select语句建表</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">create table contacts(</span><br><span class=\"line\">    id int not null auto_increment primay key,</span><br><span class=\"line\">    name varchar(30),</span><br><span class=\"line\">    phone varchar(20)</span><br><span class=\"line\">) engine&#x3D;innodb default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字段操作\">字段操作</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加</span><br><span class=\"line\">alter table stat_online_players add time char(12);</span><br><span class=\"line\">#删除, 如果是主键, 必须先删掉主键约束</span><br><span class=\"line\">alter table stat_online_players drop column hour, drop column minute;</span><br><span class=\"line\">#修改字段  </span><br><span class=\"line\">alter table base modify recover_time int(10) NOT NULL DEFAULT &#39;0&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">#修改字段名 </span><br><span class=\"line\">alter table base change barrier archive_chip binary(24) ;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>删除带主键约束的行<br />\n<img src=\"/images/mysql_20200705_1.png\" alt=\"p1\" /></p></li>\n<li><p>删除主键约束 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table stat_online_players drop primary key; #增加主键约束（要先删掉数据吗?)</span><br><span class=\"line\">alter table stat_online_players add primary key(zone_id, date);#主键要先删再加才行</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h4 id=\"数据操作\">数据操作</h4>\n<h5 id=\"插入数据\">插入数据</h5>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#INSERT 插入单条数据：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name (field1, field2, ..., fieldN) <span class=\"keyword\">VALUES</span> (value1, value2, ..., valueN)</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> contacts(<span class=\"keyword\">name</span>, sex, phone) <span class=\"keyword\">values</span>(<span class=\"string\">'张三'</span>, <span class=\"number\">1</span>, <span class=\"string\">'11111111111'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#INSERT 插入多条数据：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name (field1, field2, ..., fieldN) <span class=\"keyword\">VALUES</span> (valueA1, valueA2, ..., valueAN), (valueB1,</span><br><span class=\"line\">valueB2, ..., valueBN), …, (valueN1, valueN2, ..., valueNN);</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> contacts(<span class=\"keyword\">name</span>, sex, phone) <span class=\"keyword\">values</span>(<span class=\"string\">'李四'</span>, <span class=\"number\">1</span>, <span class=\"string\">'22222222222'</span>), (<span class=\"string\">'lily\\'</span>s cat<span class=\"string\">', 2, '</span><span class=\"number\">33333333333</span><span class=\"string\">'), (\"jane'</span>s<span class=\"string\">\", 2, '44444444444');</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意事项:<br />\n如果字段是字符型，值必须使用单引号或者双引号，如”value”;如果值本身带单引号或双引号，需要转义<br />\n如果所有列都要添加数据，insert into语句可以不指定列,即<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name <span class=\"keyword\">VALUES</span> (value1, value2, ..., valueN);</span><br></pre></td></tr></table></figure></li>\n<li>insert into 和 replace into 比较<br />\n数据存在时, replace 为替换 数据不存在时，replace 为插入且效率比insert高</li>\n</ul>\n<h5 id=\"修改数据\">修改数据</h5>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">--语法:</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> table_name <span class=\"keyword\">SET</span> field1=newValue1, field2=newValue2 [<span class=\"keyword\">WHERE</span> Clause]</span><br><span class=\"line\">    <span class=\"comment\">--eg:</span></span><br><span class=\"line\">    <span class=\"keyword\">update</span> contacts <span class=\"keyword\">set</span> sex=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">update</span> contacts <span class=\"keyword\">set</span> sex=<span class=\"number\">2</span>, phone=<span class=\"string\">'55555555555'</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">3</span>;</span><br><span class=\"line\">```  </span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">可以同时更新一个或多个字段  </span><br><span class=\"line\">可以通过where子句来指定更新的范围，如果不带where，则更新数据表中的所有记录  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##### 删除数据  </span></span><br><span class=\"line\">```sql</span><br><span class=\"line\">    <span class=\"comment\">--语法:</span></span><br><span class=\"line\">    <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name [<span class=\"keyword\">WHERE</span> Clause]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--eg:</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> contacts <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<p>注意事项： 可以通过where子句来指定删除的范围，如果不带where，则删除数据表中的所有记录</p>\n<h5 id=\"查询语句\">查询语句</h5>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1, column_name2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> where_condition]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &#123;col_name | expr | <span class=\"keyword\">position</span>&#125;, ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">HAVING</span> where_condition]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &#123;col_name | expr | <span class=\"keyword\">position</span>&#125; [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>], ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">LIMIT</span> &#123;[<span class=\"keyword\">offset</span>,] <span class=\"keyword\">row_count</span> | <span class=\"keyword\">row_count</span> <span class=\"keyword\">OFFSET</span> <span class=\"keyword\">offset</span>&#125;]</span><br></pre></td></tr></table></figure>\n<h6 id=\"where语句\">where语句</h6>\n<p>在SQL中，insert、update、delete和select后面都能带where子句，用于插入、修改、删除或查询指定条件的记录<br />\n单条件查询<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name 运算符 <span class=\"keyword\">value</span></span><br><span class=\"line\">运算符            描述</span><br><span class=\"line\">=                 等于</span><br><span class=\"line\">&lt;&gt;                或 != 不等于</span><br><span class=\"line\">&gt;                 大于</span><br><span class=\"line\">&lt;                 小于</span><br><span class=\"line\">&gt;=                大于等于</span><br><span class=\"line\">&lt;=                小于等于</span><br><span class=\"line\"><span class=\"keyword\">between</span> <span class=\"keyword\">and</span>       选取介于两个值之间的数据范围；在MySQL中，相当于&gt;=并且&lt;=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> salary <span class=\"keyword\">between</span> <span class=\"number\">10000</span> <span class=\"keyword\">and</span> <span class=\"number\">12000</span>;</span><br></pre></td></tr></table></figure> 多条件查询<br />\n在where子句中，使用and、or可以把两个或多个过滤条件结合起来<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> condition1 <span class=\"keyword\">AND</span> condition2 <span class=\"keyword\">OR</span> condition3</span><br><span class=\"line\">运算符              描述</span><br><span class=\"line\"><span class=\"keyword\">and</span>                表示左右两边的条件同时成立</span><br><span class=\"line\"><span class=\"keyword\">or</span>                 表示左右两边只要有一个条件成立</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> sex=<span class=\"string\">'男'</span> <span class=\"keyword\">and</span> (salary &lt;=<span class=\"number\">4000</span> <span class=\"keyword\">or</span> salary &gt;= <span class=\"number\">10000</span>);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"in运算符\">in运算符</h6>\n<p>运算符 IN 允许我们在 WHERE 子句中过滤某个字段的多个值<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">IN</span>(value1, value2, …)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"like运算符\">like运算符</h6>\n<p>在where子句中，有时候我们需要查询包含xxx 字符串的所有记录，这时就需要用到运算符like<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">LIKE</span> ‘%<span class=\"keyword\">value</span>%’ </span><br><span class=\"line\"><span class=\"comment\">-- eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> <span class=\"keyword\">like</span> <span class=\"string\">'%小%'</span>;</span><br></pre></td></tr></table></figure> 说明 LIKE子句中的%类似于正则表达式中的*，匹配任意0个或多个字符 LIKE子句中的_匹配任意单个字符 LIKE子句中如果没有%和_，就相当于运算符=的效果</p>\n<h5 id=\"查询结果排序和分页\">查询结果排序和分页　</h5>\n<ul>\n<li><p>order by <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--语法　</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1, column_name2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name1, table_name2</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column_name, column_name [<span class=\"keyword\">ASC</span>|<span class=\"keyword\">DESC</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> empolyee <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sex, salary <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure> 说明： ASC表示按升序排列，DESC表示按降序排列。 默认情况下，对列按升序排</p></li>\n<li><p>limit <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法　</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1, column_name2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name1, table_name2</span><br><span class=\"line\"><span class=\"keyword\">LIMIT</span> [<span class=\"keyword\">offset</span>,] <span class=\"keyword\">row_count</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg  </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">limit</span> <span class=\"number\">0</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">limit</span> <span class=\"number\">5</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">limit</span> <span class=\"number\">10</span>, <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure> 说明： offset指定要返回的第一行的偏移量。第一行的偏移量是0，而不是1。 row_count指定要返回的最大行数。 limit的分页公式: limit (page-1)*row_count, row_count</p></li>\n</ul>\n<h5 id=\"分组\">分组　</h5>\n<ul>\n<li><p>group by 示根据某种规则对数据进行分组，它必须配合聚合函数进行使用，对数 据进行分组后可以进行count、sum、avg、max和min等运算。 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> employee <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br></pre></td></tr></table></figure> 说明: aggregate_function表示聚合函数 group by可以对一列或多列进行分组</p></li>\n<li><p>having WHERE 关键字无法与聚合函数一起使用。HAVING 子句可 以对分组后的各组数据进行筛选 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法　</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> aggregate_function(column_name) <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> dept, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> employee <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dept <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &lt; <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>group_concat<br />\ngroup_concat配合group by一起使用，用于将某一列的值按指定的分隔符进行拼接 MySQL默认的分隔符为逗号 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法　</span></span><br><span class=\"line\">group_concat([distinct] column_name [order by column_name asc/desc ] [separator '分隔符'])   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> dept, <span class=\"keyword\">count</span>(*), <span class=\"keyword\">group_concat</span>(<span class=\"keyword\">name</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">name</span> <span class=\"keyword\">desc</span> separator <span class=\"string\">';'</span>) <span class=\"keyword\">from</span> employee <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dept;</span><br></pre></td></tr></table></figure> ##### 去重<br />\n</p></li>\n<li><p>distinct 支持单列和多列　 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column_name, column_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> username, city <span class=\"keyword\">from</span> footprint;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h4 id=\"多表操作\">多表操作　　</h4>\n<h5 id=\"表连接\">表连接　　</h5>\n<p>在多个表之间通过一定的连接条件，使表之间发生关联，进而能从多个表之间获取数据　　　 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> table1.column, table2.column</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1, table2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> table1.column1 = table2.column2;</span><br></pre></td></tr></table></figure> * 表连接几种方式　　 内连接　join或inner join<br />\n自连接　同一张表内的连接　 外连接　左外连接　left join, 右外连接 right join, 全外连接 full join</p>\n<ul>\n<li>各种表连接的区别　 <img src=\"/images/mysql_20200714_p1.png\" alt=\"p20200714_1\" /> 交叉连接（cross join）：没有用where子句的交叉连接将产生笛卡尔积，第一个表的行数乘以第二个表的行数等于笛卡尔积 和结果集的大小</li>\n</ul>\n<h6 id=\"内连接\">内连接　</h6>\n<p><img src=\"https://i.loli.net/2020/08/18/xW1zZPBD2gAykva.png\"/> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A <span class=\"keyword\">join</span> score B <span class=\"keyword\">on</span>(A.stu_no = B.stu_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> score B <span class=\"keyword\">on</span>(A.stu_no = B.stu_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A score B <span class=\"keyword\">while</span> A.stu_no = B.stu_no;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"左连接\">左连接　</h6>\n<p><img src=\"https://i.loli.net/2020/08/18/BtTodxEVWwKn4Gi.png\"/> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> score B <span class=\"keyword\">on</span>(A.stu_no = B.stu_no);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"笛卡尔积\">笛卡尔积</h6>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A score B</span><br></pre></td></tr></table></figure>\n<h5 id=\"自连接\">自连接　</h5>\n<p>一种特殊的表连接，它是指相互连接的表在物理上同为一张表，但是逻辑上是多张表。自 连接通常用于表中的数据有层次结构，如区域表、菜单表、商品分类表等　 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#自连接语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> A.column, B.column</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> A, <span class=\"keyword\">table</span> B</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> A.column = B.column;</span><br></pre></td></tr></table></figure> <img src=\"https://i.loli.net/2020/08/19/NHFdTWZBmAqSYU2.png\"/></p>\n<h5 id=\"子查询\">子查询　</h5>\n<p>又成为内部查询和嵌套查询　 <img src=\"https://i.loli.net/2020/08/19/zJZjmYDhnICQ5fq.png\"/>　 select 学号 姓名 地址 from 学生表 where 学号 in (select 学号 from 成绩表 where 科目=计算机) * 子查询in <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">IN</span>(</span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name [<span class=\"keyword\">WHERE</span>]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure> <img src=\"https://i.loli.net/2020/08/19/VITdOj3hgZGqNpX.png\"/></p>\n<ul>\n<li>子查询exists <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> table_name2 <span class=\"keyword\">WHERE</span> condition);</span><br></pre></td></tr></table></figure> <img src=\"https://i.loli.net/2020/08/19/gLpx9WRwhtc5Hay.png\"/></li>\n</ul>\n<h4 id=\"用户管理\">用户管理　　</h4>\n<h5 id=\"mysql权限体系\">mysql权限体系　</h5>\n<table>\n<colgroup>\n<col style=\"width: 14%\" />\n<col style=\"width: 85%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>层级</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>全局层级</td>\n<td>适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。 GRANT ALL ON <em>.</em>和REVOKE ALL ON <em>.</em>只授予和撤销全局权限</td>\n</tr>\n<tr class=\"even\">\n<td>数据库层级</td>\n<td>适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。 GRANT ALL ON db_name.<em>和REVOKE ALL ON db_name.</em>只授予和撤销数据库权限</td>\n</tr>\n<tr class=\"odd\">\n<td>表层级</td>\n<td>适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。 GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限</td>\n</tr>\n<tr class=\"even\">\n<td>列层级</td>\n<td>适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指 定与被授权列相同的列</td>\n</tr>\n<tr class=\"odd\">\n<td>子程序层级</td>\n<td>CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被 授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级， 并存储在mysql.procs_priv表中</td>\n</tr>\n</tbody>\n</table>\n<p>MySQL的权限信息主要存储在以下几张表中，当用户连接数据库时，MySQL会根据这些表对用户 进行权限验证</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>表名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>user</td>\n<td>用户权限表，记录账号、密码及全局性权限信息</td>\n</tr>\n<tr class=\"even\">\n<td>db</td>\n<td>记录数据库相关权限</td>\n</tr>\n<tr class=\"odd\">\n<td>table_priv</td>\n<td>用户对某个表拥有的权限</td>\n</tr>\n<tr class=\"even\">\n<td>column_priv</td>\n<td>用户对某表的某个列所拥有的权限</td>\n</tr>\n<tr class=\"odd\">\n<td>procs_priv</td>\n<td>用户对存储过程及存储函数的操作权限</td>\n</tr>\n</tbody>\n</table>\n<p>在MySQL中，使用CREATE USER来创建用户，用户创建后没有任何权限 <strong>MySQL的用户账号由两部分组成：用户名和主机名，即用户名@主机名，主机名可以是IP或机器名称, 主机名为%表示允许任何地址的主机远程登录MySQL数据库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建用户</span><br><span class=\"line\">CREATE USER &#39;用户名&#39; [@&#39;主机名&#39;] [IDENTIFIED BY &#39;密码&#39;];</span><br><span class=\"line\">#删除用户</span><br><span class=\"line\">DROP USER &#39;用户名&#39; [@&#39;主机名&#39;];</span><br><span class=\"line\">#修改密码</span><br><span class=\"line\">ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"权限管理\">权限管理　</h5>\n<p>在MySQL数据库中，使用grant命令授权、revoke命令撤销授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#授权</span><br><span class=\"line\">grant all privileges on databaseName.tableName to &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br><span class=\"line\">#撤销授权</span><br><span class=\"line\">revoke all privileges on databaseName.tableName from &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br><span class=\"line\">#刷新权限</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">#查看权限</span><br><span class=\"line\">show grants for &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br></pre></td></tr></table></figure>\n<h6 id=\"权限列表\">权限列表　</h6>\n<p>使用grant和revoke进行授权、撤销授权时，需要指定具体是哪些权限，这些权限大体可以分为3类，数据类、结构类和管理类</p>\n<table>\n<colgroup>\n<col style=\"width: 21%\" />\n<col style=\"width: 39%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>数据</th>\n<th>结构</th>\n<th style=\"text-align: left;\">管理</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>SELECT INSERT UPDATE DELETE FILE</td>\n<td>CREATE ALTER INDEX DROP CREATE TEMPORARY TABLES SHOW VIEW CREATE ROUTINE ALTER ROUTINE EXECUTE CREATE VIEW EVENT TRIGGER</td>\n<td style=\"text-align: left;\">USAGE GRANT SUPER PROCESS RELOAD SHUTDOWN SHOW DATABASES LOCK TABLES REFERENCES REPUCATION CUENT REPUCATION SLAVE CREATE USER</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"禁止root远程登录\">禁止root远程登录</h6>\n<ol type=\"1\">\n<li>root是MySQL数据库的超级管理员，几乎拥有所有权限，一旦泄露后果非常严重；</li>\n<li>root是MySQL数据库的默认用户，所有人都知道，如果不禁止远程登录，可以针对root用户暴 力破解密码 <img src=\"https://i.loli.net/2020/08/19/7C6q2On1VrbZwaM.png\"/></li>\n</ol>\n<h6 id=\"忘记root密码解决\">忘记root密码解决</h6>\n<p><img src=\"https://i.loli.net/2020/08/19/oaiRTSve8bZQpF2.png\"/><br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#关闭权限验证</span><br><span class=\"line\">mysqld --defaults-file&#x3D;&quot;.&#x2F;my.cnf&quot; --console --skip-granttables --shared-memory</span><br><span class=\"line\">#参数--defaults-file的值为配置文件my.cnf的完整路径</span><br></pre></td></tr></table></figure> MySQL关闭权限验证后，直接通过 mysql 命令即可连接到数据库，并可正常执行各类操作 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#刷新权限</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">#修改root用户的密码</span><br><span class=\"line\">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>sql导出数据库<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃只导整个库结构:</span><br><span class=\"line\">    mysqldump -uroot -p1234 -d sg17_s0 &gt; sg17_s0.sql</span><br><span class=\"line\">＃导出整个库结构和数据:</span><br><span class=\"line\">    mysqldump -uroot -p1234 sg17_s0 &gt; sg17_s0.sql</span><br><span class=\"line\">＃只导出表结构:</span><br><span class=\"line\">    mysqldump -uroot -p1234 -d sg17_s0 concern &gt; concern.sql</span><br></pre></td></tr></table></figure></p></li>\n<li><p>sql导入数据库　　 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source [所在的路径&#x2F;&#x2F;*.sql]</span><br><span class=\"line\">mysql -uabc_f -p abc &lt; abc.sql</span><br></pre></td></tr></table></figure></p></li>\n<li><p>查看端口 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like &#39;port&#39;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>显示建表语句<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show create table mainline_task_stat_zkw</span><br></pre></td></tr></table></figure></p></li>\n<li><p>调换行的位置 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table stat_online_players modify player int(10) unsigned after time;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>求和 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select sum(peoples) as total from tutorial_stage_stat where day_id&#x3D;19;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>修改表结构 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table stat_key_data_online modify &#96;date&#96; char(12) NOT NULL</span><br></pre></td></tr></table></figure></p></li>\n<li><p>按列显示<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from T_Account limit 1\\G</span><br></pre></td></tr></table></figure></p></li>\n<li><p>pymysql <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装(centos 6)：</span><br><span class=\"line\">安装pip: sudo yum -y install epel-release, sudo yum -y install python-pip</span><br><span class=\"line\">安装mypython: yum install -y mysql-devel, python-devel python-setuptools</span><br><span class=\"line\">             pip install MySQL-python</span><br><span class=\"line\">安装mysql.connector包 pip install mysql-connector</span><br></pre></td></tr></table></figure></p></li>\n<li><p>查看mysql 配置文件的方法<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which mysqld</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql --verbose --help | grep -A 1 &#39;Default options&#39;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>MySQL中文乱码 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIzNjg4MTE2Ng==&amp;idx=4&amp;mid=100000774&amp;sn=c4ed7a8c2fee681523c3e30600be4bf8\" target=\"_blank\" rel=\"noopener\">彻底解决MySQL中文乱码</a></p></li>\n<li><p>mysql修改数据库表和表中的字段的编码格式的修改 <a href=\"https://blog.csdn.net/luo4105/article/details/50804148\" target=\"_blank\" rel=\"noopener\">mysql修改数据库表和表中的字段的编码格式的修改</a></p></li>\n<li><p>mysql的latin1支持中文 <a href=\"https://blog.csdn.net/congcongsuiyue/article/details/41979643\" target=\"_blank\" rel=\"noopener\">mysql的latin1支持中文</a></p></li>\n<li><p>mysql 两表联合查询 <a href=\"https://blog.csdn.net/wj123446/article/details/52870114/\" target=\"_blank\" rel=\"noopener\">mysql两表联合查询的四种情况</a></p></li>\n<li><p>mysql 设置最大连接数 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.第一种：命令行查看和修改最大连接数(max_connections)。</span><br><span class=\"line\">  &gt;mysql -uuser -ppassword(命令行登录MySQL)</span><br><span class=\"line\">  mysql&gt;show variables like &#39;max_connections&#39;;(查可以看当前的最大连接数)</span><br><span class=\"line\">  msyql&gt;set global max_connections&#x3D;1000;(设置最大连接数为1000，可以再次查看是否设置成功)</span><br><span class=\"line\">  mysql&gt;exit  </span><br><span class=\"line\">2.设置&#x2F;etc&#x2F;my.cnf</span><br><span class=\"line\">  注:似乎两者都要设置才会成功</span><br></pre></td></tr></table></figure></p></li>\n<li><p>查看错误日志路径<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在配置中查看</span><br><span class=\"line\">&#x2F;data&#x2F;mysql&#x2F;var</span><br><span class=\"line\">数据库存放路径</span><br><span class=\"line\">&#x2F;var&#x2F;log&#x2F;message</span><br><span class=\"line\">系统日志</span><br></pre></td></tr></table></figure></p></li>\n<li><p>数据库遭到攻击 <a href=\"https://jason5.cn/blog/ji-%5B%3F%5D-ci-shu-ju-ku-bei-gong-ji-de-jing-li.html\" target=\"_blank\" rel=\"noopener\">数据库遭到攻击</a></p></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本操作\">基本操作</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#新建数据库</span><br><span class=\"line\">CREATE DATABASE 名</span><br><span class=\"line\">#显示当前使用的数据库</span><br><span class=\"line\">select database();</span><br><span class=\"line\"># 查询数据库支持的存储引擎  </span><br><span class=\"line\">show engines;</span><br><span class=\"line\">#删除表  </span><br><span class=\"line\">DROP TABLES 名</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建表\">创建表</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#语法  </span><br><span class=\"line\">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] table_name [(create_definition,…)] [table_options]</span><br><span class=\"line\">[select_statement] </span><br><span class=\"line\">#TEMPORARY：表示创建临时表，在当前会话结束后将自动消失</span><br><span class=\"line\">#IF NOT EXISTS：在建表前，先判断表是否存在，只有该表不存在时才创建</span><br><span class=\"line\">#create_definition：建表语句的关键部分，用于定义表中各列的属性</span><br><span class=\"line\">#table_options：表的配置选项，例如：表的默认存储引擎、字符集</span><br><span class=\"line\">#select_statement：通过select语句建表</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">create table contacts(</span><br><span class=\"line\">    id int not null auto_increment primay key,</span><br><span class=\"line\">    name varchar(30),</span><br><span class=\"line\">    phone varchar(20)</span><br><span class=\"line\">) engine&#x3D;innodb default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字段操作\">字段操作</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加</span><br><span class=\"line\">alter table stat_online_players add time char(12);</span><br><span class=\"line\">#删除, 如果是主键, 必须先删掉主键约束</span><br><span class=\"line\">alter table stat_online_players drop column hour, drop column minute;</span><br><span class=\"line\">#修改字段  </span><br><span class=\"line\">alter table base modify recover_time int(10) NOT NULL DEFAULT &#39;0&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">#修改字段名 </span><br><span class=\"line\">alter table base change barrier archive_chip binary(24) ;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>删除带主键约束的行<br />\n<img src=\"/images/mysql_20200705_1.png\" alt=\"p1\" /></p></li>\n<li><p>删除主键约束 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table stat_online_players drop primary key; #增加主键约束（要先删掉数据吗?)</span><br><span class=\"line\">alter table stat_online_players add primary key(zone_id, date);#主键要先删再加才行</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h4 id=\"数据操作\">数据操作</h4>\n<h5 id=\"插入数据\">插入数据</h5>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#INSERT 插入单条数据：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name (field1, field2, ..., fieldN) <span class=\"keyword\">VALUES</span> (value1, value2, ..., valueN)</span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> contacts(<span class=\"keyword\">name</span>, sex, phone) <span class=\"keyword\">values</span>(<span class=\"string\">'张三'</span>, <span class=\"number\">1</span>, <span class=\"string\">'11111111111'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#INSERT 插入多条数据：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name (field1, field2, ..., fieldN) <span class=\"keyword\">VALUES</span> (valueA1, valueA2, ..., valueAN), (valueB1,</span><br><span class=\"line\">valueB2, ..., valueBN), …, (valueN1, valueN2, ..., valueNN);</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> contacts(<span class=\"keyword\">name</span>, sex, phone) <span class=\"keyword\">values</span>(<span class=\"string\">'李四'</span>, <span class=\"number\">1</span>, <span class=\"string\">'22222222222'</span>), (<span class=\"string\">'lily\\'</span>s cat<span class=\"string\">', 2, '</span><span class=\"number\">33333333333</span><span class=\"string\">'), (\"jane'</span>s<span class=\"string\">\", 2, '44444444444');</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意事项:<br />\n如果字段是字符型，值必须使用单引号或者双引号，如”value”;如果值本身带单引号或双引号，需要转义<br />\n如果所有列都要添加数据，insert into语句可以不指定列,即<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name <span class=\"keyword\">VALUES</span> (value1, value2, ..., valueN);</span><br></pre></td></tr></table></figure></li>\n<li>insert into 和 replace into 比较<br />\n数据存在时, replace 为替换 数据不存在时，replace 为插入且效率比insert高</li>\n</ul>\n<h5 id=\"修改数据\">修改数据</h5>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">--语法:</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> table_name <span class=\"keyword\">SET</span> field1=newValue1, field2=newValue2 [<span class=\"keyword\">WHERE</span> Clause]</span><br><span class=\"line\">    <span class=\"comment\">--eg:</span></span><br><span class=\"line\">    <span class=\"keyword\">update</span> contacts <span class=\"keyword\">set</span> sex=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">update</span> contacts <span class=\"keyword\">set</span> sex=<span class=\"number\">2</span>, phone=<span class=\"string\">'55555555555'</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">3</span>;</span><br><span class=\"line\">```  </span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">可以同时更新一个或多个字段  </span><br><span class=\"line\">可以通过where子句来指定更新的范围，如果不带where，则更新数据表中的所有记录  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##### 删除数据  </span></span><br><span class=\"line\">```sql</span><br><span class=\"line\">    <span class=\"comment\">--语法:</span></span><br><span class=\"line\">    <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name [<span class=\"keyword\">WHERE</span> Clause]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--eg:</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> contacts <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<p>注意事项： 可以通过where子句来指定删除的范围，如果不带where，则删除数据表中的所有记录</p>\n<h5 id=\"查询语句\">查询语句</h5>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1, column_name2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> where_condition]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &#123;col_name | expr | <span class=\"keyword\">position</span>&#125;, ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">HAVING</span> where_condition]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &#123;col_name | expr | <span class=\"keyword\">position</span>&#125; [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>], ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">LIMIT</span> &#123;[<span class=\"keyword\">offset</span>,] <span class=\"keyword\">row_count</span> | <span class=\"keyword\">row_count</span> <span class=\"keyword\">OFFSET</span> <span class=\"keyword\">offset</span>&#125;]</span><br></pre></td></tr></table></figure>\n<h6 id=\"where语句\">where语句</h6>\n<p>在SQL中，insert、update、delete和select后面都能带where子句，用于插入、修改、删除或查询指定条件的记录<br />\n单条件查询<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name 运算符 <span class=\"keyword\">value</span></span><br><span class=\"line\">运算符            描述</span><br><span class=\"line\">=                 等于</span><br><span class=\"line\">&lt;&gt;                或 != 不等于</span><br><span class=\"line\">&gt;                 大于</span><br><span class=\"line\">&lt;                 小于</span><br><span class=\"line\">&gt;=                大于等于</span><br><span class=\"line\">&lt;=                小于等于</span><br><span class=\"line\"><span class=\"keyword\">between</span> <span class=\"keyword\">and</span>       选取介于两个值之间的数据范围；在MySQL中，相当于&gt;=并且&lt;=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> salary <span class=\"keyword\">between</span> <span class=\"number\">10000</span> <span class=\"keyword\">and</span> <span class=\"number\">12000</span>;</span><br></pre></td></tr></table></figure> 多条件查询<br />\n在where子句中，使用and、or可以把两个或多个过滤条件结合起来<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> condition1 <span class=\"keyword\">AND</span> condition2 <span class=\"keyword\">OR</span> condition3</span><br><span class=\"line\">运算符              描述</span><br><span class=\"line\"><span class=\"keyword\">and</span>                表示左右两边的条件同时成立</span><br><span class=\"line\"><span class=\"keyword\">or</span>                 表示左右两边只要有一个条件成立</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> sex=<span class=\"string\">'男'</span> <span class=\"keyword\">and</span> (salary &lt;=<span class=\"number\">4000</span> <span class=\"keyword\">or</span> salary &gt;= <span class=\"number\">10000</span>);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"in运算符\">in运算符</h6>\n<p>运算符 IN 允许我们在 WHERE 子句中过滤某个字段的多个值<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">IN</span>(value1, value2, …)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"like运算符\">like运算符</h6>\n<p>在where子句中，有时候我们需要查询包含xxx 字符串的所有记录，这时就需要用到运算符like<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">LIKE</span> ‘%<span class=\"keyword\">value</span>%’ </span><br><span class=\"line\"><span class=\"comment\">-- eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> <span class=\"keyword\">like</span> <span class=\"string\">'%小%'</span>;</span><br></pre></td></tr></table></figure> 说明 LIKE子句中的%类似于正则表达式中的*，匹配任意0个或多个字符 LIKE子句中的_匹配任意单个字符 LIKE子句中如果没有%和_，就相当于运算符=的效果</p>\n<h5 id=\"查询结果排序和分页\">查询结果排序和分页　</h5>\n<ul>\n<li><p>order by <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--语法　</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1, column_name2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name1, table_name2</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column_name, column_name [<span class=\"keyword\">ASC</span>|<span class=\"keyword\">DESC</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> empolyee <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sex, salary <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure> 说明： ASC表示按升序排列，DESC表示按降序排列。 默认情况下，对列按升序排</p></li>\n<li><p>limit <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法　</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1, column_name2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name1, table_name2</span><br><span class=\"line\"><span class=\"keyword\">LIMIT</span> [<span class=\"keyword\">offset</span>,] <span class=\"keyword\">row_count</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg  </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">limit</span> <span class=\"number\">0</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">limit</span> <span class=\"number\">5</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">limit</span> <span class=\"number\">10</span>, <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure> 说明： offset指定要返回的第一行的偏移量。第一行的偏移量是0，而不是1。 row_count指定要返回的最大行数。 limit的分页公式: limit (page-1)*row_count, row_count</p></li>\n</ul>\n<h5 id=\"分组\">分组　</h5>\n<ul>\n<li><p>group by 示根据某种规则对数据进行分组，它必须配合聚合函数进行使用，对数 据进行分组后可以进行count、sum、avg、max和min等运算。 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> employee <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br></pre></td></tr></table></figure> 说明: aggregate_function表示聚合函数 group by可以对一列或多列进行分组</p></li>\n<li><p>having WHERE 关键字无法与聚合函数一起使用。HAVING 子句可 以对分组后的各组数据进行筛选 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法　</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> aggregate_function(column_name) <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> dept, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> employee <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dept <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &lt; <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>group_concat<br />\ngroup_concat配合group by一起使用，用于将某一列的值按指定的分隔符进行拼接 MySQL默认的分隔符为逗号 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法　</span></span><br><span class=\"line\">group_concat([distinct] column_name [order by column_name asc/desc ] [separator '分隔符'])   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--eg </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> dept, <span class=\"keyword\">count</span>(*), <span class=\"keyword\">group_concat</span>(<span class=\"keyword\">name</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">name</span> <span class=\"keyword\">desc</span> separator <span class=\"string\">';'</span>) <span class=\"keyword\">from</span> employee <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dept;</span><br></pre></td></tr></table></figure> ##### 去重<br />\n</p></li>\n<li><p>distinct 支持单列和多列　 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column_name, column_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- eg</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> username, city <span class=\"keyword\">from</span> footprint;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h4 id=\"多表操作\">多表操作　　</h4>\n<h5 id=\"表连接\">表连接　　</h5>\n<p>在多个表之间通过一定的连接条件，使表之间发生关联，进而能从多个表之间获取数据　　　 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 语法  </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> table1.column, table2.column</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1, table2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> table1.column1 = table2.column2;</span><br></pre></td></tr></table></figure> * 表连接几种方式　　 内连接　join或inner join<br />\n自连接　同一张表内的连接　 外连接　左外连接　left join, 右外连接 right join, 全外连接 full join</p>\n<ul>\n<li>各种表连接的区别　 <img src=\"/images/mysql_20200714_p1.png\" alt=\"p20200714_1\" /> 交叉连接（cross join）：没有用where子句的交叉连接将产生笛卡尔积，第一个表的行数乘以第二个表的行数等于笛卡尔积 和结果集的大小</li>\n</ul>\n<h6 id=\"内连接\">内连接　</h6>\n<p><img src=\"https://i.loli.net/2020/08/18/xW1zZPBD2gAykva.png\"/> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A <span class=\"keyword\">join</span> score B <span class=\"keyword\">on</span>(A.stu_no = B.stu_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> score B <span class=\"keyword\">on</span>(A.stu_no = B.stu_no);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A score B <span class=\"keyword\">while</span> A.stu_no = B.stu_no;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"左连接\">左连接　</h6>\n<p><img src=\"https://i.loli.net/2020/08/18/BtTodxEVWwKn4Gi.png\"/> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> score B <span class=\"keyword\">on</span>(A.stu_no = B.stu_no);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"笛卡尔积\">笛卡尔积</h6>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> A.stu_no, A.name, B.course, B.score <span class=\"keyword\">from</span> student A score B</span><br></pre></td></tr></table></figure>\n<h5 id=\"自连接\">自连接　</h5>\n<p>一种特殊的表连接，它是指相互连接的表在物理上同为一张表，但是逻辑上是多张表。自 连接通常用于表中的数据有层次结构，如区域表、菜单表、商品分类表等　 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#自连接语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> A.column, B.column</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> A, <span class=\"keyword\">table</span> B</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> A.column = B.column;</span><br></pre></td></tr></table></figure> <img src=\"https://i.loli.net/2020/08/19/NHFdTWZBmAqSYU2.png\"/></p>\n<h5 id=\"子查询\">子查询　</h5>\n<p>又成为内部查询和嵌套查询　 <img src=\"https://i.loli.net/2020/08/19/zJZjmYDhnICQ5fq.png\"/>　 select 学号 姓名 地址 from 学生表 where 学号 in (select 学号 from 成绩表 where 科目=计算机) * 子查询in <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">IN</span>(</span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">FROM</span> table_name [<span class=\"keyword\">WHERE</span>]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure> <img src=\"https://i.loli.net/2020/08/19/VITdOj3hgZGqNpX.png\"/></p>\n<ul>\n<li>子查询exists <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name1</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> table_name2 <span class=\"keyword\">WHERE</span> condition);</span><br></pre></td></tr></table></figure> <img src=\"https://i.loli.net/2020/08/19/gLpx9WRwhtc5Hay.png\"/></li>\n</ul>\n<h4 id=\"用户管理\">用户管理　　</h4>\n<h5 id=\"mysql权限体系\">mysql权限体系　</h5>\n<table>\n<colgroup>\n<col style=\"width: 14%\" />\n<col style=\"width: 85%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>层级</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>全局层级</td>\n<td>适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。 GRANT ALL ON <em>.</em>和REVOKE ALL ON <em>.</em>只授予和撤销全局权限</td>\n</tr>\n<tr class=\"even\">\n<td>数据库层级</td>\n<td>适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。 GRANT ALL ON db_name.<em>和REVOKE ALL ON db_name.</em>只授予和撤销数据库权限</td>\n</tr>\n<tr class=\"odd\">\n<td>表层级</td>\n<td>适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。 GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限</td>\n</tr>\n<tr class=\"even\">\n<td>列层级</td>\n<td>适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指 定与被授权列相同的列</td>\n</tr>\n<tr class=\"odd\">\n<td>子程序层级</td>\n<td>CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被 授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级， 并存储在mysql.procs_priv表中</td>\n</tr>\n</tbody>\n</table>\n<p>MySQL的权限信息主要存储在以下几张表中，当用户连接数据库时，MySQL会根据这些表对用户 进行权限验证</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>表名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>user</td>\n<td>用户权限表，记录账号、密码及全局性权限信息</td>\n</tr>\n<tr class=\"even\">\n<td>db</td>\n<td>记录数据库相关权限</td>\n</tr>\n<tr class=\"odd\">\n<td>table_priv</td>\n<td>用户对某个表拥有的权限</td>\n</tr>\n<tr class=\"even\">\n<td>column_priv</td>\n<td>用户对某表的某个列所拥有的权限</td>\n</tr>\n<tr class=\"odd\">\n<td>procs_priv</td>\n<td>用户对存储过程及存储函数的操作权限</td>\n</tr>\n</tbody>\n</table>\n<p>在MySQL中，使用CREATE USER来创建用户，用户创建后没有任何权限 <strong>MySQL的用户账号由两部分组成：用户名和主机名，即用户名@主机名，主机名可以是IP或机器名称, 主机名为%表示允许任何地址的主机远程登录MySQL数据库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建用户</span><br><span class=\"line\">CREATE USER &#39;用户名&#39; [@&#39;主机名&#39;] [IDENTIFIED BY &#39;密码&#39;];</span><br><span class=\"line\">#删除用户</span><br><span class=\"line\">DROP USER &#39;用户名&#39; [@&#39;主机名&#39;];</span><br><span class=\"line\">#修改密码</span><br><span class=\"line\">ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"权限管理\">权限管理　</h5>\n<p>在MySQL数据库中，使用grant命令授权、revoke命令撤销授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#授权</span><br><span class=\"line\">grant all privileges on databaseName.tableName to &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br><span class=\"line\">#撤销授权</span><br><span class=\"line\">revoke all privileges on databaseName.tableName from &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br><span class=\"line\">#刷新权限</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">#查看权限</span><br><span class=\"line\">show grants for &#39;用户名&#39; [@&#39;主机名&#39;] ;</span><br></pre></td></tr></table></figure>\n<h6 id=\"权限列表\">权限列表　</h6>\n<p>使用grant和revoke进行授权、撤销授权时，需要指定具体是哪些权限，这些权限大体可以分为3类，数据类、结构类和管理类</p>\n<table>\n<colgroup>\n<col style=\"width: 21%\" />\n<col style=\"width: 39%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>数据</th>\n<th>结构</th>\n<th style=\"text-align: left;\">管理</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>SELECT INSERT UPDATE DELETE FILE</td>\n<td>CREATE ALTER INDEX DROP CREATE TEMPORARY TABLES SHOW VIEW CREATE ROUTINE ALTER ROUTINE EXECUTE CREATE VIEW EVENT TRIGGER</td>\n<td style=\"text-align: left;\">USAGE GRANT SUPER PROCESS RELOAD SHUTDOWN SHOW DATABASES LOCK TABLES REFERENCES REPUCATION CUENT REPUCATION SLAVE CREATE USER</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"禁止root远程登录\">禁止root远程登录</h6>\n<ol type=\"1\">\n<li>root是MySQL数据库的超级管理员，几乎拥有所有权限，一旦泄露后果非常严重；</li>\n<li>root是MySQL数据库的默认用户，所有人都知道，如果不禁止远程登录，可以针对root用户暴 力破解密码 <img src=\"https://i.loli.net/2020/08/19/7C6q2On1VrbZwaM.png\"/></li>\n</ol>\n<h6 id=\"忘记root密码解决\">忘记root密码解决</h6>\n<p><img src=\"https://i.loli.net/2020/08/19/oaiRTSve8bZQpF2.png\"/><br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#关闭权限验证</span><br><span class=\"line\">mysqld --defaults-file&#x3D;&quot;.&#x2F;my.cnf&quot; --console --skip-granttables --shared-memory</span><br><span class=\"line\">#参数--defaults-file的值为配置文件my.cnf的完整路径</span><br></pre></td></tr></table></figure> MySQL关闭权限验证后，直接通过 mysql 命令即可连接到数据库，并可正常执行各类操作 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#刷新权限</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">#修改root用户的密码</span><br><span class=\"line\">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>sql导出数据库<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃只导整个库结构:</span><br><span class=\"line\">    mysqldump -uroot -p1234 -d sg17_s0 &gt; sg17_s0.sql</span><br><span class=\"line\">＃导出整个库结构和数据:</span><br><span class=\"line\">    mysqldump -uroot -p1234 sg17_s0 &gt; sg17_s0.sql</span><br><span class=\"line\">＃只导出表结构:</span><br><span class=\"line\">    mysqldump -uroot -p1234 -d sg17_s0 concern &gt; concern.sql</span><br></pre></td></tr></table></figure></p></li>\n<li><p>sql导入数据库　　 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source [所在的路径&#x2F;&#x2F;*.sql]</span><br><span class=\"line\">mysql -uabc_f -p abc &lt; abc.sql</span><br></pre></td></tr></table></figure></p></li>\n<li><p>查看端口 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like &#39;port&#39;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>显示建表语句<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show create table mainline_task_stat_zkw</span><br></pre></td></tr></table></figure></p></li>\n<li><p>调换行的位置 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table stat_online_players modify player int(10) unsigned after time;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>求和 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select sum(peoples) as total from tutorial_stage_stat where day_id&#x3D;19;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>修改表结构 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table stat_key_data_online modify &#96;date&#96; char(12) NOT NULL</span><br></pre></td></tr></table></figure></p></li>\n<li><p>按列显示<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from T_Account limit 1\\G</span><br></pre></td></tr></table></figure></p></li>\n<li><p>pymysql <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装(centos 6)：</span><br><span class=\"line\">安装pip: sudo yum -y install epel-release, sudo yum -y install python-pip</span><br><span class=\"line\">安装mypython: yum install -y mysql-devel, python-devel python-setuptools</span><br><span class=\"line\">             pip install MySQL-python</span><br><span class=\"line\">安装mysql.connector包 pip install mysql-connector</span><br></pre></td></tr></table></figure></p></li>\n<li><p>查看mysql 配置文件的方法<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which mysqld</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql --verbose --help | grep -A 1 &#39;Default options&#39;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>MySQL中文乱码 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIzNjg4MTE2Ng==&amp;idx=4&amp;mid=100000774&amp;sn=c4ed7a8c2fee681523c3e30600be4bf8\" target=\"_blank\" rel=\"noopener\">彻底解决MySQL中文乱码</a></p></li>\n<li><p>mysql修改数据库表和表中的字段的编码格式的修改 <a href=\"https://blog.csdn.net/luo4105/article/details/50804148\" target=\"_blank\" rel=\"noopener\">mysql修改数据库表和表中的字段的编码格式的修改</a></p></li>\n<li><p>mysql的latin1支持中文 <a href=\"https://blog.csdn.net/congcongsuiyue/article/details/41979643\" target=\"_blank\" rel=\"noopener\">mysql的latin1支持中文</a></p></li>\n<li><p>mysql 两表联合查询 <a href=\"https://blog.csdn.net/wj123446/article/details/52870114/\" target=\"_blank\" rel=\"noopener\">mysql两表联合查询的四种情况</a></p></li>\n<li><p>mysql 设置最大连接数 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.第一种：命令行查看和修改最大连接数(max_connections)。</span><br><span class=\"line\">  &gt;mysql -uuser -ppassword(命令行登录MySQL)</span><br><span class=\"line\">  mysql&gt;show variables like &#39;max_connections&#39;;(查可以看当前的最大连接数)</span><br><span class=\"line\">  msyql&gt;set global max_connections&#x3D;1000;(设置最大连接数为1000，可以再次查看是否设置成功)</span><br><span class=\"line\">  mysql&gt;exit  </span><br><span class=\"line\">2.设置&#x2F;etc&#x2F;my.cnf</span><br><span class=\"line\">  注:似乎两者都要设置才会成功</span><br></pre></td></tr></table></figure></p></li>\n<li><p>查看错误日志路径<br />\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在配置中查看</span><br><span class=\"line\">&#x2F;data&#x2F;mysql&#x2F;var</span><br><span class=\"line\">数据库存放路径</span><br><span class=\"line\">&#x2F;var&#x2F;log&#x2F;message</span><br><span class=\"line\">系统日志</span><br></pre></td></tr></table></figure></p></li>\n<li><p>数据库遭到攻击 <a href=\"https://jason5.cn/blog/ji-%5B%3F%5D-ci-shu-ju-ku-bei-gong-ji-de-jing-li.html\" target=\"_blank\" rel=\"noopener\">数据库遭到攻击</a></p></li>\n</ul>\n"},{"title":"mysql基础","date":"2020-02-25T23:27:19.000Z","_content":"\n## 数据类型  \n* 数值   \n```sql\n    类型      所占字节       说明\n    tinyint    1            小整数值，如状态\n    smallint   2            大整数值\n    mediumint  3            大整数值\n    int        4            大整数值\n    bigint     8            极大整数值\n    float      4            单精度浮点数值\n    double     8            双精度浮点数值\n    decimal    Max(D+, M+)  含小数值，例如金额\n```\n \n* 日期    \n```sql\n    类型        所占字节数          说明\n    date        3                  YYYY-MM-DD\n    time        3                  HH:MM:SS\n    year        1                  YYYY\n    datetime    8                  YYYY-MM-DD HH:MM:SS\n    timestamp   8                  YYYYMMDDHHMMSS\n```\n\n* 字符串  \n```sql\n    类型       所占字节数     说明\n    char       0~255         定长字段串\n    varchar    0~65535       变长字符串\n    text       0~65535       长文本数据\n    blob                     二进制形式的文本数据\n```\n\n## 数据完整性  \n* 实体完整性  \n求每张表都有唯一标识符，每张表中的主键字段不能为空且不能重复  \n约束方法：唯一性约束、主键约束、标识列  \n\n* 域完整性  \n表中某些列不能输入无效的值, 如数据类型、格式、值域范围、是否允许空值等  \n约束方法：限制数据类型、检查约束、默认值、非空约束  \n\n* 参照完整性  \n求关系中不允许引用不存在的实体   \n约束方法：外键约束  \n\n*  用户自定义完整性  \n针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求    \n约束方法：规则、存储过程、触发器   \n\n唯一性约束  \n```sql\n    #可以使用关键字 UNIQUE 实现字段的唯一性约束，从而保证实体的完整性  \n    #UNIQUE 意味着任何两条数据的同一个字段不能有相同值。\n    #一个表中可以有多个 UNIQUE 约束。\n\n    #在创建表时添加唯一性约束\n    create table person(\n    id int not null auto_increment primary key comment '主键id',\n    name varchar(30) comment '姓名',\n    id_number varchar(18) unique comment '身份证号'\n    );\n```\n\n外键约束 \n```sql\n    -- 外键（FOREIGN KEY）约束定义了表之间的一致性关系，用于强制参照完整性\n    -- 外键约束定义了对同一个表或其他表的列的引用，这些列具有PRIMARY KEY或UNIQUE约束\n\n    -- 学生表(主表)\n    create table stu(\n    stu_no int not null primary key comment '学号',\n    stu_name varchar(30) comment '姓名'\n    );\n\n\n    --成绩表\n    --在插入数据时，必须先向主表插入，再向从表插入, 删除数据时正好相反\n    create table sc(\n    id int not null auto_increment primary key comment '主键id',\n    stu_no int not null comment '学号',\n    course varchar(30) comment '课程',\n    grade int comment '成绩',\n    foreign key(stu_no) references stu(stu_no)\n    );\n\n```\n\n## 函数　\n```sql\n--数学函数    \nABS SQRT MOD SIN COS TAN COT\n--字符串函数 \nLENGTH LOWER UPPER TRIM SUBSTRING\n-- 日期和时间函数 \nNOW CURDATE CURTIME SYSDATE DATE_FORMAT YEAR MONTH WEEK\n--聚合函数 \nCOUNT SUM AVG MIN MAX\n--条件判断函数 \nIF IFNULL CASE WHEN\n--系统信息函数 \nVERSION DATABASE USER\n-- 加密函数 \nMD5 SHA1 SHA2\n```\n\n* now\n```sql\n-- 返回当期时间\nselect now()\n\n--在实际应用中，大多数业务表都会带一个创建时间create_time字段，用于记录每一条数据的产生时间。在向表\n--中插入数据时，就可以在insert语句中使用now()函数\ninsert into user(id, name, create_time) values(1, 'zhangsan', now());\n```\n* date_format\n```sql\n--在实际应用中，一般会按照标准格式存储日期/时间，如 2019-12-13 14:15:16 。在查询使用数据时，往往又\n--会有不同的格式要求，这时就需要使用date_format()函数进行格式 转换\nselect name, date_format(birthday, '%Y/%m/%d') from user;\n```\n* 聚合函数　\n聚合函数是对一组值进行计算，并返回单个值\n```sql\n    count 返回符合条件的记录总数\n    sum 返回指定列的总和，忽略空值\n    avg 返回指定列的平均值，忽略空值\n    min 返回指定列的最小值，忽略空值\n    max 返回指定列的最大值，忽略空值\n```\n\n* ifnull\n函数ifnull()用于处理NULL值。\nifnull(v1,v2)，如果 v1 的值不为 NULL，则返回 v1，否则返回 v2\n```sql\n    select ifnull(1/0, 0); --0\n    select ifnull(1, 0); --1\n```\n* case when \n流程控制语句，可以在SQL语句中使用case when来获取更加准确和直接的结果\nSQL中的case when类似于编程语言中的if else或者switch\n```sql\n    -- 语法\n    CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] END\n    CASE WHEN [expr] THEN [result1]…ELSE [default] END\n\n    -- as 取别名　\n    select id, name case sex when '男'　then 'F' when '女' then 'M' else '' end as sex\n```\n\n\n## 索引\n### 慢查询日志　　\n#### mysql的日志类型　\n\n| 日志                         | 描述                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| 重做日志（redo log）         | 重做日志是一种物理格式的日志，记录的是物理数据页面的修改的信息，其redo log是顺序 写入redo log file的物理文件中去的。 |\n| 回滚日志（undo log）         | 回滚日志是一种逻辑格式的日志，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务 之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。 |\n| 二进制日志（binlog）         | 二进制日志是一种逻辑格式的日志，以二进制文件的形式记录了数据库中的操作，但不记录 查询语句。 |\n| 错误日志（errorlog）         | 错误日志记录着mysqld启动和停止，以及服务器在运行过程中发生的错误的相关信息。 |\n| 慢查询日志（slow query log） | 慢查询日志记录执行时间过长和没有使用索引的查询语句           |\n| 一般查询日志（general log）  | 记录了服务器接收到的每一个查询或是命令，无论这些查询或是命令是否正确甚至是否包含 语法错误，general log都会将其记录下来 |\n| 中继日志（relay log）        | 中继日志类似二进制；可用于复制架构中，使从服务器和主服务器的数据保持一致 |\n\n#### 慢查询日志属性　　\n\n| 参数                          | 描述                                                         |\n| ----------------------------- | ------------------------------------------------------------ |\n| slow_query_log                | 是否开启慢查询日志，1表示开启，0表示关闭。                   |\n| slow_query_log_file           | 慢查询日志存储路径，可选。 注意：MySQL 5.6之前的版本，参数名为 log-slow-queries |\n| long_query_time               | 阈值，当SQL语句的响应时间超过该阈值就会被记录到日志中。      |\n| log_queries_not_using_indexes | 未使用索引的查询也被记录到慢查询日志中，可选。               |\n| log_output                    | 日志存储方式，默认为FILE。 log_output=‘FILE’表示将日志存入文件 log_output=‘TABLE’表示将日志存入数据库 log_output=‘FILE,TABLE’表示同时将日志存入文件和数据库 |\n\n#### 开启慢查询日志　\n慢查询日志可以通过命令临时设置，也可以修改配置文件永久设置\n```\n#查看是否开启慢查询日志\nshow variables like 'slow%';\n#临时开启慢查询日志\nset slow_query_log='ON';\nset long_query_time=1;\n#慢查询日志文件所在位置\nshow variables like '%datadir%';\n```\n\n### 查询分析器\nexplain命令可以查看SQL语句的执行计划。当explain与SQL语句一起使用时，MySQL将显示来自\n优化器的有关语句执行计划的信息。也就是说，MySQL解释了它将如何处理语句，包括有关如何联\n接表以及以何种顺序联接表的信息\n\n#### explain功能　\n分析出表的读取顺序\n数据读取操作的操作类型\n哪些索引可以使用\n哪些索引被实际使用\n表之间的引用\n每张表有多少行被优化器查询\n\n#### explain 使用　\n<img src=\"https://i.loli.net/2020/08/20/QBWxtJcN8Lq2iDg.png\"/>   \n\n#### 结果分析　\n\n| 参数          | 描述                                                        |\n| ------------- | ----------------------------------------------------------- |\n| id            | 执行select子句或操作表的顺序                                |\n| select_type   | 查询的类型，如SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION等   |\n| table         | 当前行使用的表名                                            |\n| partitions    | 匹配的分区                                                  |\n| type          | 连接类型，如system、const、eq_ref、ref、range、index、all等 |\n| possible_keys | 可能使用的索引                                              |\n| key           | 实际使用的索引，NULL表示未使用索引                          |\n| key_len       | 查询中使用的索引长度                                        |\n| ref           | 列与索引的比较                                              |\n| rows          | 扫描的行数                                                  |\n| filtered      | 选取的行数占扫描的行数的百分比，理想的结果是100             |\n| extra         | 其他额外信息                                                |\n\n### 索引种类\n\n| 索引种类 | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| 普通索引 | 最基本的索引，没有任何限制，仅加速查询                       |\n| 唯一索引 | 索引列的值必须唯一，但允许有空值                             |\n| 主键索引 | 一种特殊的唯一索引，不允许有空值 一般是在建表的同时自动创建主键索引 |\n| 复合索引 | 两个或多个列上的索引被称作复合索引                           |\n| 全文索引 | 对文本内容进行分词索引       \n\n\n### 创建索引\n* 创建普通索引 \nCREATE INDEX indexName ON tableName(columnName(length))\n```sql\ncreate index name_idx on base(name);\n```\nCREATE UNIQUE INDEX indexName ON tableName(columnName(length))   \n* 创建唯一索引\n```sql\ncreate unique index name_idx on base(name);\n```\n\n* 创建复合索引\nCREATE INDEX indexName ON tableName(columnName1, columnName2, …)\n```sql\ncreate index muti_idx on base(name, sex, age);\n```\n\n### 删除索引\nDROP INDEX [indexName] ON tableName;  \n\n### 查看索引  \nSHOW INDEX FROM tableName;  \n\n* 使用索引分析器 \n```sql\nexplain select * from base where name='cp';\n```\n\n### 复合索引   \n* 前导列特性（最左前缀）  \n在MySQL中，如果创建了复合索引(name, salary, dept)，就相当于创建了(name, salary, dept)、\n(name, salary)和(name)三个索引，这被称为复合索引前导列特性， 因此在创建复合索引时应该将\n最常用作查询条件的列放在最左边，依次递减\n\n```sql\n未使用索引\n    select * from employee where salary=8800;\n    select * from employee where dept='部门A';\n    select * from employee where salary=8800 and dept='部门A';\n\n    使用索引\n    select * from employee where name='liufeng';\n    select * from employee where name='liufeng' and salary=8800;\n    select * from employee where name='liufeng' and salary=8800 and dept='部门A';\n```\n\n### 覆盖索引  \n* 什么是覆盖索引  \n即select的数据列只从索引中就能得到，不必读取数据行，也就是只需扫描索引就可以得到查询结果  \n\n* 几点说明  \n1. 使用覆盖索引，只需要从索引中就能检索到需要的数据，而不要再扫描数据表；  \n2. 索引的体量往往要比数据表小很多，因此只读取索引速度会非常快，也会极大减少数据访问量；  \n3. MySQL的查询优化器会在执行查询前判断，是否有一个索引可以覆盖所有的查询列；  \n4. 并非所有类型的索引都可以作为覆盖索引，覆盖索引必须要存储索引列的值。像哈希索引、空间索引、全  \n   文索引等并不会真正存储索引列的值  \n5. 当一个查询使用了覆盖索引， 在查询分析器EXPLAIN的Extra列可以看到“Using index”       \n\n\n\n### 索引优化  \n* 选择区分度高的列建立索引  \n区分度计算公式：count(distinct col)/count(*)，表示字段不重复的比例   \n* 避免对索引列进行计算  \nfrom_unixtime(create_time)='2014-05-29' 不会用到索引   \n* 每次查询每张表仅能使用一个索引  \n\n\n\n\n## 事务\n* MyISAM 不支持， InnoDB\n* 什么是事务\n用来处理批量的mysql操作， 为了保证数据库的完整性，这些操作要么完全执行，要么完全不执行\n\n* 几个术语    \n回退(rollback) 撤销SQL语句的过程   \n提交(commit) 未存储的SQL语句写入数据库表   \n保留点(savepoint) 事务处理中设置临时占位符(place-holder).可以发布回退 \n\n* 可以执行回退的语句\nINSERT UPDATE和DELETE\n\n* 事务的4个特性(ACID)\n原子性: 批量的sql, 要么都发生， 要么都不发生  \n一致性：事务前后的数据保持业务上的合理一致   \n持久性：事务一旦发生不能取消，只能通过补偿性事务来抵消效果  \n隔离性：在事务进行中，其他操作开不到此事务的任何效果   \n\n* 操作命令  \n开启事务：start transaction  \n执行命令： xxx   \n提交事务/回滚事务 commit/rollback  \n设置隔离级别：set session transaction isolation level [read uncommitted |  read committed | repeatable read |serializable] \n\n* 示例  \n\n\n```sql\n//创建表\nmysql> create table account(\n    -> uname char(10),\n    -> money int)\n    -> engine innodb charset utf8;\n//插入数据\nmysql> insert into account values\n    -> ('zhang', 5000),\n    -> ('lisi', 3000);\n\n//开启事务\nstart transaction\n\n//更新数据\nupdate account set money = money + 100000  where uname='lisi';\n\n//查询\nmysql> select * from account;\n+-------+-------+\n| uname | money |\n+-------+-------+\n| zhang |  5000 |\n| lisi  |  3000 |\n\n//设置隔离级别\nmysql> set session transaction  isolation level read uncommitted\n\n//提交事务\nmysql> commit;\n\n```\n\n* 隔离级别  \nread uncommit : \"脏读\", 读到未提交事务的内容  \nread commited : 一个事务在进行的过程中， 读不到另外一个进行中事务的内容，但是能读到已经完成事务中的内容  \nrepeatable read: 可重复读,即在一个事务过程中,所有信息都来自事务开始那一瞬间的信息,不受其他已提交事务的影响. (大多数的系统,用此隔离级别)  \nserializable: 串行化, 所有的事务,必须编号,按顺序一个一个来执行,也就取消了冲突的可能.这样隔离级别最高,但事务相互等待的等待长. 在实用,也不是很多 \n\n* c++中使用事务\n```cpp\n//参考brks\nbool MysqlConnection::transaction(std::list<std::string> sql){\n\tint ret = 0;\n\t//手动提交\n\tmysql_autocommit(mysql_, 0);\n\n\t//开始事务\n\tmysql_query(mysql_, \"start transaction\");\n\tfor(auto iter = sql.begin(), iter != sql.end(); iter++){\n\t\tret = mysql_qurey(mysql_, (*iter).c_ctr());\n\t\tif(ret != 0){\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif(ret != 0){\n\t\t//回滚\n\t\tmysqL_query(mysql_, \"rollback\");\n\t\tLOG_ERROR(\"excute transaction failed.\");\n\t\treturn false;\n\t}\t\n\n\tif(0 != mysql_query(mysql, \"commit\")){\n\t\tLOG_ERROR(\"commit transaction failed.\");\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n```\n\n\n## 存储过程\n一组为了完成特定功能的SQL语句集， 经编译后存储在数据库中， 用户通过存储过过程名并传参来调用它\n\n* 优点\n增强的sql语音的功能和灵活性   \n存储过程允许标准组件式编程   \n较快的执行速度(存储过程是预编译的)    \n减少网络流量    \n可被作物一种安全机制充分利用   \n\n* 创建步骤   \n选择一个数据库    \n改变分割符：delimiter $$(避免使用;作为结束标记)  \n```sql\nmysql> use test;\nmysql> delimiter $$\n\nmysql> create procedure p_hello()\n    -> begin\n    -> select 'hello';\n    -> select 'world';\n    -> end\n    -> $$;\n\nmysql> delimiter ;\n\nmysql> call p_hello;\n\n```\n\n* 存储过程中的参数  \nin: 输入参数     \n必须在调用存储过程之前指定  \nout: 输出参数  \n可以在存储过程内部改变并返回  \ninout:输入输出参数  \n可以在调用时指定， 并可修改和返回  \nin 在存储过程中修值是传入值得一份拷贝，传入的值不会改变\n```sql\nmysql> create procedure v_test1(in p_int int)\n    -> begin\n    -> select p_int;\n    -> set p_int = p_int +1;\n    -> select p_int;\n    -> end;\n    -> $$;\n\nmysql> delimiter \nmysql> set @p_int =3;\n\n\n//存储过程里的值被修改\nmysql> call v_test1(@p_int);\n+-------+\n| p_int |\n+-------+\n|     3 |\n+-------+\n1 row in set (0.00 sec)\n\n+-------+\n| p_int |\n+-------+\n|     4 |\n+-------+\n\n//外面的值没变\nmysql> select @p_int;\n+--------+\n| @p_int |\n+--------+\n|      3 |\n+--------+\n```\nout 不认可传入的值，修改后值会变\n```sql\nmysql> create procedure p_test_out(out v_out_int int)\n    -> begin\n    -> select v_out_int;\n    -> set v_out_int=15;\n    -> select v_out_int;\n    -> end\n    -> $$;\n\nmysql> set @v_out_int=10;\n    -> $$;\nmysql> call p_test_out(@v_out_int);\n    -> $$;\n+-----------+\n| v_out_int |\n+-----------+\n|      NULL |\n+-----------+\n1 row in set (0.00 sec)\n\n+-----------+\n| v_out_int |\n+-----------+\n|        15 |\n+-----------+\n```\ninout 类似于引用，认可传入的值， 修改后会改变\n\n\n在存储过程里面定义变量\n```sql\nmysql> create procedure p_vartest()\n    -> begin\n    -> declare a varchar(20) default 'abc';\n    -> select a;\n    -> end;\n    -> $$;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call p_vartest;\n    -> $$;\n+------+\n| a    |\n+------+\n| abc  |\n+------+\n1 row in set (0.00 sec)\n\n```\n\n* c++中使用存储过程  \n* 创建存储过程  \n* 初始化mysql: mysql_init   \n* 链接mysql: mysql_real_connect   \n* 调用存储过程: mysql_real_qurey, 第二个参数，\"call xxx(xxx)\"\n* 释放资源与连接：mysql_free_result， mysql_close   \n\n## 视图\n由查询结果形成的一张虚拟表， 如果某个查询结果出现的非常频繁， 要经常拿这个查询结果来做子查询  \n视图本身不包含数据， 它返回的数据是从其他表中检索出来的\n\n* 作用   \n1. 权限控制：如某几个列允许用户查询，其他的列不允许， 可以通过视图开放其中一列或几列           \n2. 简化复杂的查询\n\n* 视图能否更新，删除，添加  \n如果视图的每一行是和物理表一一对应的才可以   \n如果view的行是由物理表多行经过计算的到的结果，view不可以更新  \n\n* 视图放在哪儿（视图算法） \n1. 对于简单的查询形成的view, 再对view查询时，如where, order等， 可以把建视图的语句+查询视图的语句合并成=》查物理的语句，这种视图算法叫merge(合并)   \n2. 视图的语句本身比较复杂，很难再和查询视图的语句合并，mysql先执行视图的创建语句，把结果集形成内存中的临时表，然后再去查临时表(temptable)\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mysql基础.md","raw":"---\ntitle: mysql基础\ndate: 2020-02-26 07:27:19\ncategories:\n    - 中间件  \ntags:\n    - mysql  \n---\n\n## 数据类型  \n* 数值   \n```sql\n    类型      所占字节       说明\n    tinyint    1            小整数值，如状态\n    smallint   2            大整数值\n    mediumint  3            大整数值\n    int        4            大整数值\n    bigint     8            极大整数值\n    float      4            单精度浮点数值\n    double     8            双精度浮点数值\n    decimal    Max(D+, M+)  含小数值，例如金额\n```\n \n* 日期    \n```sql\n    类型        所占字节数          说明\n    date        3                  YYYY-MM-DD\n    time        3                  HH:MM:SS\n    year        1                  YYYY\n    datetime    8                  YYYY-MM-DD HH:MM:SS\n    timestamp   8                  YYYYMMDDHHMMSS\n```\n\n* 字符串  \n```sql\n    类型       所占字节数     说明\n    char       0~255         定长字段串\n    varchar    0~65535       变长字符串\n    text       0~65535       长文本数据\n    blob                     二进制形式的文本数据\n```\n\n## 数据完整性  \n* 实体完整性  \n求每张表都有唯一标识符，每张表中的主键字段不能为空且不能重复  \n约束方法：唯一性约束、主键约束、标识列  \n\n* 域完整性  \n表中某些列不能输入无效的值, 如数据类型、格式、值域范围、是否允许空值等  \n约束方法：限制数据类型、检查约束、默认值、非空约束  \n\n* 参照完整性  \n求关系中不允许引用不存在的实体   \n约束方法：外键约束  \n\n*  用户自定义完整性  \n针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求    \n约束方法：规则、存储过程、触发器   \n\n唯一性约束  \n```sql\n    #可以使用关键字 UNIQUE 实现字段的唯一性约束，从而保证实体的完整性  \n    #UNIQUE 意味着任何两条数据的同一个字段不能有相同值。\n    #一个表中可以有多个 UNIQUE 约束。\n\n    #在创建表时添加唯一性约束\n    create table person(\n    id int not null auto_increment primary key comment '主键id',\n    name varchar(30) comment '姓名',\n    id_number varchar(18) unique comment '身份证号'\n    );\n```\n\n外键约束 \n```sql\n    -- 外键（FOREIGN KEY）约束定义了表之间的一致性关系，用于强制参照完整性\n    -- 外键约束定义了对同一个表或其他表的列的引用，这些列具有PRIMARY KEY或UNIQUE约束\n\n    -- 学生表(主表)\n    create table stu(\n    stu_no int not null primary key comment '学号',\n    stu_name varchar(30) comment '姓名'\n    );\n\n\n    --成绩表\n    --在插入数据时，必须先向主表插入，再向从表插入, 删除数据时正好相反\n    create table sc(\n    id int not null auto_increment primary key comment '主键id',\n    stu_no int not null comment '学号',\n    course varchar(30) comment '课程',\n    grade int comment '成绩',\n    foreign key(stu_no) references stu(stu_no)\n    );\n\n```\n\n## 函数　\n```sql\n--数学函数    \nABS SQRT MOD SIN COS TAN COT\n--字符串函数 \nLENGTH LOWER UPPER TRIM SUBSTRING\n-- 日期和时间函数 \nNOW CURDATE CURTIME SYSDATE DATE_FORMAT YEAR MONTH WEEK\n--聚合函数 \nCOUNT SUM AVG MIN MAX\n--条件判断函数 \nIF IFNULL CASE WHEN\n--系统信息函数 \nVERSION DATABASE USER\n-- 加密函数 \nMD5 SHA1 SHA2\n```\n\n* now\n```sql\n-- 返回当期时间\nselect now()\n\n--在实际应用中，大多数业务表都会带一个创建时间create_time字段，用于记录每一条数据的产生时间。在向表\n--中插入数据时，就可以在insert语句中使用now()函数\ninsert into user(id, name, create_time) values(1, 'zhangsan', now());\n```\n* date_format\n```sql\n--在实际应用中，一般会按照标准格式存储日期/时间，如 2019-12-13 14:15:16 。在查询使用数据时，往往又\n--会有不同的格式要求，这时就需要使用date_format()函数进行格式 转换\nselect name, date_format(birthday, '%Y/%m/%d') from user;\n```\n* 聚合函数　\n聚合函数是对一组值进行计算，并返回单个值\n```sql\n    count 返回符合条件的记录总数\n    sum 返回指定列的总和，忽略空值\n    avg 返回指定列的平均值，忽略空值\n    min 返回指定列的最小值，忽略空值\n    max 返回指定列的最大值，忽略空值\n```\n\n* ifnull\n函数ifnull()用于处理NULL值。\nifnull(v1,v2)，如果 v1 的值不为 NULL，则返回 v1，否则返回 v2\n```sql\n    select ifnull(1/0, 0); --0\n    select ifnull(1, 0); --1\n```\n* case when \n流程控制语句，可以在SQL语句中使用case when来获取更加准确和直接的结果\nSQL中的case when类似于编程语言中的if else或者switch\n```sql\n    -- 语法\n    CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] END\n    CASE WHEN [expr] THEN [result1]…ELSE [default] END\n\n    -- as 取别名　\n    select id, name case sex when '男'　then 'F' when '女' then 'M' else '' end as sex\n```\n\n\n## 索引\n### 慢查询日志　　\n#### mysql的日志类型　\n\n| 日志                         | 描述                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| 重做日志（redo log）         | 重做日志是一种物理格式的日志，记录的是物理数据页面的修改的信息，其redo log是顺序 写入redo log file的物理文件中去的。 |\n| 回滚日志（undo log）         | 回滚日志是一种逻辑格式的日志，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务 之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。 |\n| 二进制日志（binlog）         | 二进制日志是一种逻辑格式的日志，以二进制文件的形式记录了数据库中的操作，但不记录 查询语句。 |\n| 错误日志（errorlog）         | 错误日志记录着mysqld启动和停止，以及服务器在运行过程中发生的错误的相关信息。 |\n| 慢查询日志（slow query log） | 慢查询日志记录执行时间过长和没有使用索引的查询语句           |\n| 一般查询日志（general log）  | 记录了服务器接收到的每一个查询或是命令，无论这些查询或是命令是否正确甚至是否包含 语法错误，general log都会将其记录下来 |\n| 中继日志（relay log）        | 中继日志类似二进制；可用于复制架构中，使从服务器和主服务器的数据保持一致 |\n\n#### 慢查询日志属性　　\n\n| 参数                          | 描述                                                         |\n| ----------------------------- | ------------------------------------------------------------ |\n| slow_query_log                | 是否开启慢查询日志，1表示开启，0表示关闭。                   |\n| slow_query_log_file           | 慢查询日志存储路径，可选。 注意：MySQL 5.6之前的版本，参数名为 log-slow-queries |\n| long_query_time               | 阈值，当SQL语句的响应时间超过该阈值就会被记录到日志中。      |\n| log_queries_not_using_indexes | 未使用索引的查询也被记录到慢查询日志中，可选。               |\n| log_output                    | 日志存储方式，默认为FILE。 log_output=‘FILE’表示将日志存入文件 log_output=‘TABLE’表示将日志存入数据库 log_output=‘FILE,TABLE’表示同时将日志存入文件和数据库 |\n\n#### 开启慢查询日志　\n慢查询日志可以通过命令临时设置，也可以修改配置文件永久设置\n```\n#查看是否开启慢查询日志\nshow variables like 'slow%';\n#临时开启慢查询日志\nset slow_query_log='ON';\nset long_query_time=1;\n#慢查询日志文件所在位置\nshow variables like '%datadir%';\n```\n\n### 查询分析器\nexplain命令可以查看SQL语句的执行计划。当explain与SQL语句一起使用时，MySQL将显示来自\n优化器的有关语句执行计划的信息。也就是说，MySQL解释了它将如何处理语句，包括有关如何联\n接表以及以何种顺序联接表的信息\n\n#### explain功能　\n分析出表的读取顺序\n数据读取操作的操作类型\n哪些索引可以使用\n哪些索引被实际使用\n表之间的引用\n每张表有多少行被优化器查询\n\n#### explain 使用　\n<img src=\"https://i.loli.net/2020/08/20/QBWxtJcN8Lq2iDg.png\"/>   \n\n#### 结果分析　\n\n| 参数          | 描述                                                        |\n| ------------- | ----------------------------------------------------------- |\n| id            | 执行select子句或操作表的顺序                                |\n| select_type   | 查询的类型，如SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION等   |\n| table         | 当前行使用的表名                                            |\n| partitions    | 匹配的分区                                                  |\n| type          | 连接类型，如system、const、eq_ref、ref、range、index、all等 |\n| possible_keys | 可能使用的索引                                              |\n| key           | 实际使用的索引，NULL表示未使用索引                          |\n| key_len       | 查询中使用的索引长度                                        |\n| ref           | 列与索引的比较                                              |\n| rows          | 扫描的行数                                                  |\n| filtered      | 选取的行数占扫描的行数的百分比，理想的结果是100             |\n| extra         | 其他额外信息                                                |\n\n### 索引种类\n\n| 索引种类 | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| 普通索引 | 最基本的索引，没有任何限制，仅加速查询                       |\n| 唯一索引 | 索引列的值必须唯一，但允许有空值                             |\n| 主键索引 | 一种特殊的唯一索引，不允许有空值 一般是在建表的同时自动创建主键索引 |\n| 复合索引 | 两个或多个列上的索引被称作复合索引                           |\n| 全文索引 | 对文本内容进行分词索引       \n\n\n### 创建索引\n* 创建普通索引 \nCREATE INDEX indexName ON tableName(columnName(length))\n```sql\ncreate index name_idx on base(name);\n```\nCREATE UNIQUE INDEX indexName ON tableName(columnName(length))   \n* 创建唯一索引\n```sql\ncreate unique index name_idx on base(name);\n```\n\n* 创建复合索引\nCREATE INDEX indexName ON tableName(columnName1, columnName2, …)\n```sql\ncreate index muti_idx on base(name, sex, age);\n```\n\n### 删除索引\nDROP INDEX [indexName] ON tableName;  \n\n### 查看索引  \nSHOW INDEX FROM tableName;  \n\n* 使用索引分析器 \n```sql\nexplain select * from base where name='cp';\n```\n\n### 复合索引   \n* 前导列特性（最左前缀）  \n在MySQL中，如果创建了复合索引(name, salary, dept)，就相当于创建了(name, salary, dept)、\n(name, salary)和(name)三个索引，这被称为复合索引前导列特性， 因此在创建复合索引时应该将\n最常用作查询条件的列放在最左边，依次递减\n\n```sql\n未使用索引\n    select * from employee where salary=8800;\n    select * from employee where dept='部门A';\n    select * from employee where salary=8800 and dept='部门A';\n\n    使用索引\n    select * from employee where name='liufeng';\n    select * from employee where name='liufeng' and salary=8800;\n    select * from employee where name='liufeng' and salary=8800 and dept='部门A';\n```\n\n### 覆盖索引  \n* 什么是覆盖索引  \n即select的数据列只从索引中就能得到，不必读取数据行，也就是只需扫描索引就可以得到查询结果  \n\n* 几点说明  \n1. 使用覆盖索引，只需要从索引中就能检索到需要的数据，而不要再扫描数据表；  \n2. 索引的体量往往要比数据表小很多，因此只读取索引速度会非常快，也会极大减少数据访问量；  \n3. MySQL的查询优化器会在执行查询前判断，是否有一个索引可以覆盖所有的查询列；  \n4. 并非所有类型的索引都可以作为覆盖索引，覆盖索引必须要存储索引列的值。像哈希索引、空间索引、全  \n   文索引等并不会真正存储索引列的值  \n5. 当一个查询使用了覆盖索引， 在查询分析器EXPLAIN的Extra列可以看到“Using index”       \n\n\n\n### 索引优化  \n* 选择区分度高的列建立索引  \n区分度计算公式：count(distinct col)/count(*)，表示字段不重复的比例   \n* 避免对索引列进行计算  \nfrom_unixtime(create_time)='2014-05-29' 不会用到索引   \n* 每次查询每张表仅能使用一个索引  \n\n\n\n\n## 事务\n* MyISAM 不支持， InnoDB\n* 什么是事务\n用来处理批量的mysql操作， 为了保证数据库的完整性，这些操作要么完全执行，要么完全不执行\n\n* 几个术语    \n回退(rollback) 撤销SQL语句的过程   \n提交(commit) 未存储的SQL语句写入数据库表   \n保留点(savepoint) 事务处理中设置临时占位符(place-holder).可以发布回退 \n\n* 可以执行回退的语句\nINSERT UPDATE和DELETE\n\n* 事务的4个特性(ACID)\n原子性: 批量的sql, 要么都发生， 要么都不发生  \n一致性：事务前后的数据保持业务上的合理一致   \n持久性：事务一旦发生不能取消，只能通过补偿性事务来抵消效果  \n隔离性：在事务进行中，其他操作开不到此事务的任何效果   \n\n* 操作命令  \n开启事务：start transaction  \n执行命令： xxx   \n提交事务/回滚事务 commit/rollback  \n设置隔离级别：set session transaction isolation level [read uncommitted |  read committed | repeatable read |serializable] \n\n* 示例  \n\n\n```sql\n//创建表\nmysql> create table account(\n    -> uname char(10),\n    -> money int)\n    -> engine innodb charset utf8;\n//插入数据\nmysql> insert into account values\n    -> ('zhang', 5000),\n    -> ('lisi', 3000);\n\n//开启事务\nstart transaction\n\n//更新数据\nupdate account set money = money + 100000  where uname='lisi';\n\n//查询\nmysql> select * from account;\n+-------+-------+\n| uname | money |\n+-------+-------+\n| zhang |  5000 |\n| lisi  |  3000 |\n\n//设置隔离级别\nmysql> set session transaction  isolation level read uncommitted\n\n//提交事务\nmysql> commit;\n\n```\n\n* 隔离级别  \nread uncommit : \"脏读\", 读到未提交事务的内容  \nread commited : 一个事务在进行的过程中， 读不到另外一个进行中事务的内容，但是能读到已经完成事务中的内容  \nrepeatable read: 可重复读,即在一个事务过程中,所有信息都来自事务开始那一瞬间的信息,不受其他已提交事务的影响. (大多数的系统,用此隔离级别)  \nserializable: 串行化, 所有的事务,必须编号,按顺序一个一个来执行,也就取消了冲突的可能.这样隔离级别最高,但事务相互等待的等待长. 在实用,也不是很多 \n\n* c++中使用事务\n```cpp\n//参考brks\nbool MysqlConnection::transaction(std::list<std::string> sql){\n\tint ret = 0;\n\t//手动提交\n\tmysql_autocommit(mysql_, 0);\n\n\t//开始事务\n\tmysql_query(mysql_, \"start transaction\");\n\tfor(auto iter = sql.begin(), iter != sql.end(); iter++){\n\t\tret = mysql_qurey(mysql_, (*iter).c_ctr());\n\t\tif(ret != 0){\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif(ret != 0){\n\t\t//回滚\n\t\tmysqL_query(mysql_, \"rollback\");\n\t\tLOG_ERROR(\"excute transaction failed.\");\n\t\treturn false;\n\t}\t\n\n\tif(0 != mysql_query(mysql, \"commit\")){\n\t\tLOG_ERROR(\"commit transaction failed.\");\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n```\n\n\n## 存储过程\n一组为了完成特定功能的SQL语句集， 经编译后存储在数据库中， 用户通过存储过过程名并传参来调用它\n\n* 优点\n增强的sql语音的功能和灵活性   \n存储过程允许标准组件式编程   \n较快的执行速度(存储过程是预编译的)    \n减少网络流量    \n可被作物一种安全机制充分利用   \n\n* 创建步骤   \n选择一个数据库    \n改变分割符：delimiter $$(避免使用;作为结束标记)  \n```sql\nmysql> use test;\nmysql> delimiter $$\n\nmysql> create procedure p_hello()\n    -> begin\n    -> select 'hello';\n    -> select 'world';\n    -> end\n    -> $$;\n\nmysql> delimiter ;\n\nmysql> call p_hello;\n\n```\n\n* 存储过程中的参数  \nin: 输入参数     \n必须在调用存储过程之前指定  \nout: 输出参数  \n可以在存储过程内部改变并返回  \ninout:输入输出参数  \n可以在调用时指定， 并可修改和返回  \nin 在存储过程中修值是传入值得一份拷贝，传入的值不会改变\n```sql\nmysql> create procedure v_test1(in p_int int)\n    -> begin\n    -> select p_int;\n    -> set p_int = p_int +1;\n    -> select p_int;\n    -> end;\n    -> $$;\n\nmysql> delimiter \nmysql> set @p_int =3;\n\n\n//存储过程里的值被修改\nmysql> call v_test1(@p_int);\n+-------+\n| p_int |\n+-------+\n|     3 |\n+-------+\n1 row in set (0.00 sec)\n\n+-------+\n| p_int |\n+-------+\n|     4 |\n+-------+\n\n//外面的值没变\nmysql> select @p_int;\n+--------+\n| @p_int |\n+--------+\n|      3 |\n+--------+\n```\nout 不认可传入的值，修改后值会变\n```sql\nmysql> create procedure p_test_out(out v_out_int int)\n    -> begin\n    -> select v_out_int;\n    -> set v_out_int=15;\n    -> select v_out_int;\n    -> end\n    -> $$;\n\nmysql> set @v_out_int=10;\n    -> $$;\nmysql> call p_test_out(@v_out_int);\n    -> $$;\n+-----------+\n| v_out_int |\n+-----------+\n|      NULL |\n+-----------+\n1 row in set (0.00 sec)\n\n+-----------+\n| v_out_int |\n+-----------+\n|        15 |\n+-----------+\n```\ninout 类似于引用，认可传入的值， 修改后会改变\n\n\n在存储过程里面定义变量\n```sql\nmysql> create procedure p_vartest()\n    -> begin\n    -> declare a varchar(20) default 'abc';\n    -> select a;\n    -> end;\n    -> $$;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call p_vartest;\n    -> $$;\n+------+\n| a    |\n+------+\n| abc  |\n+------+\n1 row in set (0.00 sec)\n\n```\n\n* c++中使用存储过程  \n* 创建存储过程  \n* 初始化mysql: mysql_init   \n* 链接mysql: mysql_real_connect   \n* 调用存储过程: mysql_real_qurey, 第二个参数，\"call xxx(xxx)\"\n* 释放资源与连接：mysql_free_result， mysql_close   \n\n## 视图\n由查询结果形成的一张虚拟表， 如果某个查询结果出现的非常频繁， 要经常拿这个查询结果来做子查询  \n视图本身不包含数据， 它返回的数据是从其他表中检索出来的\n\n* 作用   \n1. 权限控制：如某几个列允许用户查询，其他的列不允许， 可以通过视图开放其中一列或几列           \n2. 简化复杂的查询\n\n* 视图能否更新，删除，添加  \n如果视图的每一行是和物理表一一对应的才可以   \n如果view的行是由物理表多行经过计算的到的结果，view不可以更新  \n\n* 视图放在哪儿（视图算法） \n1. 对于简单的查询形成的view, 再对view查询时，如where, order等， 可以把建视图的语句+查询视图的语句合并成=》查物理的语句，这种视图算法叫merge(合并)   \n2. 视图的语句本身比较复杂，很难再和查询视图的语句合并，mysql先执行视图的创建语句，把结果集形成内存中的临时表，然后再去查临时表(temptable)\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mysql基础","published":1,"updated":"2020-08-26T22:14:33.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vv000u54yneh5vc7ds","content":"<h2 id=\"数据类型\">数据类型</h2>\n<ul>\n<li><p>数值<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型      所占字节       说明</span><br><span class=\"line\">tinyint    1            小整数值，如状态</span><br><span class=\"line\">smallint   2            大整数值</span><br><span class=\"line\">mediumint  3            大整数值</span><br><span class=\"line\">int        4            大整数值</span><br><span class=\"line\">bigint     8            极大整数值</span><br><span class=\"line\">float      4            单精度浮点数值</span><br><span class=\"line\">double     8            双精度浮点数值</span><br><span class=\"line\">decimal    Max(D+, M+)  含小数值，例如金额</span><br></pre></td></tr></table></figure></p></li>\n<li><p>日期<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型        所占字节数          说明</span><br><span class=\"line\">date        3                  YYYY-MM-DD</span><br><span class=\"line\">time        3                  HH:MM:SS</span><br><span class=\"line\">year        1                  YYYY</span><br><span class=\"line\">datetime    8                  YYYY-MM-DD HH:MM:SS</span><br><span class=\"line\">timestamp   8                  YYYYMMDDHHMMSS</span><br></pre></td></tr></table></figure></p></li>\n<li><p>字符串<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型       所占字节数     说明</span><br><span class=\"line\">char       0~255         定长字段串</span><br><span class=\"line\">varchar    0~65535       变长字符串</span><br><span class=\"line\">text       0~65535       长文本数据</span><br><span class=\"line\">blob                     二进制形式的文本数据</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"数据完整性\">数据完整性</h2>\n<ul>\n<li><p>实体完整性<br />\n求每张表都有唯一标识符，每张表中的主键字段不能为空且不能重复<br />\n约束方法：唯一性约束、主键约束、标识列</p></li>\n<li><p>域完整性<br />\n表中某些列不能输入无效的值, 如数据类型、格式、值域范围、是否允许空值等<br />\n约束方法：限制数据类型、检查约束、默认值、非空约束</p></li>\n<li><p>参照完整性<br />\n求关系中不允许引用不存在的实体<br />\n约束方法：外键约束</p></li>\n<li><p>用户自定义完整性<br />\n针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求<br />\n约束方法：规则、存储过程、触发器</p></li>\n</ul>\n<p>唯一性约束<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#可以使用关键字 UNIQUE 实现字段的唯一性约束，从而保证实体的完整性  </span></span><br><span class=\"line\"><span class=\"comment\">#UNIQUE 意味着任何两条数据的同一个字段不能有相同值。</span></span><br><span class=\"line\"><span class=\"comment\">#一个表中可以有多个 UNIQUE 约束。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在创建表时添加唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> person(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment primary <span class=\"keyword\">key</span> <span class=\"keyword\">comment</span> <span class=\"string\">'主键id'</span>,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">id_number <span class=\"built_in\">varchar</span>(<span class=\"number\">18</span>) <span class=\"keyword\">unique</span> <span class=\"keyword\">comment</span> <span class=\"string\">'身份证号'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>外键约束 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 外键（FOREIGN KEY）约束定义了表之间的一致性关系，用于强制参照完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 外键约束定义了对同一个表或其他表的列的引用，这些列具有PRIMARY KEY或UNIQUE约束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 学生表(主表)</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> stu(</span><br><span class=\"line\">stu_no <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> primary <span class=\"keyword\">key</span> <span class=\"keyword\">comment</span> <span class=\"string\">'学号'</span>,</span><br><span class=\"line\">stu_name <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--成绩表</span></span><br><span class=\"line\"><span class=\"comment\">--在插入数据时，必须先向主表插入，再向从表插入, 删除数据时正好相反</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> sc(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment primary <span class=\"keyword\">key</span> <span class=\"keyword\">comment</span> <span class=\"string\">'主键id'</span>,</span><br><span class=\"line\">stu_no <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'学号'</span>,</span><br><span class=\"line\">course <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'课程'</span>,</span><br><span class=\"line\">grade <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'成绩'</span>,</span><br><span class=\"line\"><span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span>(stu_no) <span class=\"keyword\">references</span> stu(stu_no)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"函数\">函数　</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数学函数    </span></span><br><span class=\"line\">ABS SQRT MOD SIN COS TAN COT</span><br><span class=\"line\"><span class=\"comment\">--字符串函数 </span></span><br><span class=\"line\">LENGTH LOWER UPPER TRIM SUBSTRING</span><br><span class=\"line\"><span class=\"comment\">-- 日期和时间函数 </span></span><br><span class=\"line\">NOW CURDATE CURTIME SYSDATE DATE_FORMAT YEAR MONTH WEEK</span><br><span class=\"line\"><span class=\"comment\">--聚合函数 </span></span><br><span class=\"line\">COUNT SUM AVG MIN MAX</span><br><span class=\"line\"><span class=\"comment\">--条件判断函数 </span></span><br><span class=\"line\">IF IFNULL CASE WHEN</span><br><span class=\"line\"><span class=\"comment\">--系统信息函数 </span></span><br><span class=\"line\">VERSION DATABASE USER</span><br><span class=\"line\"><span class=\"comment\">-- 加密函数 </span></span><br><span class=\"line\">MD5 SHA1 SHA2</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>now <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 返回当期时间</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--在实际应用中，大多数业务表都会带一个创建时间create_time字段，用于记录每一条数据的产生时间。在向表</span></span><br><span class=\"line\"><span class=\"comment\">--中插入数据时，就可以在insert语句中使用now()函数</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span>(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, create_time) <span class=\"keyword\">values</span>(<span class=\"number\">1</span>, <span class=\"string\">'zhangsan'</span>, <span class=\"keyword\">now</span>());</span><br></pre></td></tr></table></figure></p></li>\n<li><p>date_format <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--在实际应用中，一般会按照标准格式存储日期/时间，如 2019-12-13 14:15:16 。在查询使用数据时，往往又</span></span><br><span class=\"line\"><span class=\"comment\">--会有不同的格式要求，这时就需要使用date_format()函数进行格式 转换</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span>, <span class=\"keyword\">date_format</span>(birthday, <span class=\"string\">'%Y/%m/%d'</span>) <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>聚合函数　 聚合函数是对一组值进行计算，并返回单个值 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count 返回符合条件的记录总数</span><br><span class=\"line\">sum 返回指定列的总和，忽略空值</span><br><span class=\"line\">avg 返回指定列的平均值，忽略空值</span><br><span class=\"line\">min 返回指定列的最小值，忽略空值</span><br><span class=\"line\">max 返回指定列的最大值，忽略空值</span><br></pre></td></tr></table></figure></p></li>\n<li><p>ifnull 函数ifnull()用于处理NULL值。 ifnull(v1,v2)，如果 v1 的值不为 NULL，则返回 v1，否则返回 v2 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">ifnull</span>(<span class=\"number\">1</span>/<span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">--0</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">ifnull</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">--1</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>case when 流程控制语句，可以在SQL语句中使用case when来获取更加准确和直接的结果 SQL中的case when类似于编程语言中的if else或者switch <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法</span></span><br><span class=\"line\">CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] <span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> [expr] <span class=\"keyword\">THEN</span> [result1]…<span class=\"keyword\">ELSE</span> [<span class=\"keyword\">default</span>] <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- as 取别名　</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">case</span> sex <span class=\"keyword\">when</span> <span class=\"string\">'男'</span>　<span class=\"keyword\">then</span> <span class=\"string\">'F'</span> <span class=\"keyword\">when</span> <span class=\"string\">'女'</span> <span class=\"keyword\">then</span> <span class=\"string\">'M'</span> <span class=\"keyword\">else</span> <span class=\"string\">''</span> <span class=\"keyword\">end</span> <span class=\"keyword\">as</span> sex</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"索引\">索引</h2>\n<h3 id=\"慢查询日志\">慢查询日志　　</h3>\n<h4 id=\"mysql的日志类型\">mysql的日志类型　</h4>\n<table>\n<colgroup>\n<col style=\"width: 31%\" />\n<col style=\"width: 68%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>日志</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>重做日志（redo log）</td>\n<td>重做日志是一种物理格式的日志，记录的是物理数据页面的修改的信息，其redo log是顺序 写入redo log file的物理文件中去的。</td>\n</tr>\n<tr class=\"even\">\n<td>回滚日志（undo log）</td>\n<td>回滚日志是一种逻辑格式的日志，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务 之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。</td>\n</tr>\n<tr class=\"odd\">\n<td>二进制日志（binlog）</td>\n<td>二进制日志是一种逻辑格式的日志，以二进制文件的形式记录了数据库中的操作，但不记录 查询语句。</td>\n</tr>\n<tr class=\"even\">\n<td>错误日志（errorlog）</td>\n<td>错误日志记录着mysqld启动和停止，以及服务器在运行过程中发生的错误的相关信息。</td>\n</tr>\n<tr class=\"odd\">\n<td>慢查询日志（slow query log）</td>\n<td>慢查询日志记录执行时间过长和没有使用索引的查询语句</td>\n</tr>\n<tr class=\"even\">\n<td>一般查询日志（general log）</td>\n<td>记录了服务器接收到的每一个查询或是命令，无论这些查询或是命令是否正确甚至是否包含 语法错误，general log都会将其记录下来</td>\n</tr>\n<tr class=\"odd\">\n<td>中继日志（relay log）</td>\n<td>中继日志类似二进制；可用于复制架构中，使从服务器和主服务器的数据保持一致</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"慢查询日志属性\">慢查询日志属性　　</h4>\n<table>\n<colgroup>\n<col style=\"width: 32%\" />\n<col style=\"width: 67%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>slow_query_log</td>\n<td>是否开启慢查询日志，1表示开启，0表示关闭。</td>\n</tr>\n<tr class=\"even\">\n<td>slow_query_log_file</td>\n<td>慢查询日志存储路径，可选。 注意：MySQL 5.6之前的版本，参数名为 log-slow-queries</td>\n</tr>\n<tr class=\"odd\">\n<td>long_query_time</td>\n<td>阈值，当SQL语句的响应时间超过该阈值就会被记录到日志中。</td>\n</tr>\n<tr class=\"even\">\n<td>log_queries_not_using_indexes</td>\n<td>未使用索引的查询也被记录到慢查询日志中，可选。</td>\n</tr>\n<tr class=\"odd\">\n<td>log_output</td>\n<td>日志存储方式，默认为FILE。 log_output=‘FILE’表示将日志存入文件 log_output=‘TABLE’表示将日志存入数据库 log_output=‘FILE,TABLE’表示同时将日志存入文件和数据库</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"开启慢查询日志\">开启慢查询日志　</h4>\n<p>慢查询日志可以通过命令临时设置，也可以修改配置文件永久设置 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看是否开启慢查询日志</span><br><span class=\"line\">show variables like &#39;slow%&#39;;</span><br><span class=\"line\">#临时开启慢查询日志</span><br><span class=\"line\">set slow_query_log&#x3D;&#39;ON&#39;;</span><br><span class=\"line\">set long_query_time&#x3D;1;</span><br><span class=\"line\">#慢查询日志文件所在位置</span><br><span class=\"line\">show variables like &#39;%datadir%&#39;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询分析器\">查询分析器</h3>\n<p>explain命令可以查看SQL语句的执行计划。当explain与SQL语句一起使用时，MySQL将显示来自 优化器的有关语句执行计划的信息。也就是说，MySQL解释了它将如何处理语句，包括有关如何联 接表以及以何种顺序联接表的信息</p>\n<h4 id=\"explain功能\">explain功能　</h4>\n<p>分析出表的读取顺序 数据读取操作的操作类型 哪些索引可以使用 哪些索引被实际使用 表之间的引用 每张表有多少行被优化器查询</p>\n<h4 id=\"explain-使用\">explain 使用　</h4>\n<p><img src=\"https://i.loli.net/2020/08/20/QBWxtJcN8Lq2iDg.png\"/></p>\n<h4 id=\"结果分析\">结果分析　</h4>\n<table>\n<thead>\n<tr class=\"header\">\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>id</td>\n<td>执行select子句或操作表的顺序</td>\n</tr>\n<tr class=\"even\">\n<td>select_type</td>\n<td>查询的类型，如SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION等</td>\n</tr>\n<tr class=\"odd\">\n<td>table</td>\n<td>当前行使用的表名</td>\n</tr>\n<tr class=\"even\">\n<td>partitions</td>\n<td>匹配的分区</td>\n</tr>\n<tr class=\"odd\">\n<td>type</td>\n<td>连接类型，如system、const、eq_ref、ref、range、index、all等</td>\n</tr>\n<tr class=\"even\">\n<td>possible_keys</td>\n<td>可能使用的索引</td>\n</tr>\n<tr class=\"odd\">\n<td>key</td>\n<td>实际使用的索引，NULL表示未使用索引</td>\n</tr>\n<tr class=\"even\">\n<td>key_len</td>\n<td>查询中使用的索引长度</td>\n</tr>\n<tr class=\"odd\">\n<td>ref</td>\n<td>列与索引的比较</td>\n</tr>\n<tr class=\"even\">\n<td>rows</td>\n<td>扫描的行数</td>\n</tr>\n<tr class=\"odd\">\n<td>filtered</td>\n<td>选取的行数占扫描的行数的百分比，理想的结果是100</td>\n</tr>\n<tr class=\"even\">\n<td>extra</td>\n<td>其他额外信息</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"索引种类\">索引种类</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th>索引种类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>普通索引</td>\n<td>最基本的索引，没有任何限制，仅加速查询</td>\n</tr>\n<tr class=\"even\">\n<td>唯一索引</td>\n<td>索引列的值必须唯一，但允许有空值</td>\n</tr>\n<tr class=\"odd\">\n<td>主键索引</td>\n<td>一种特殊的唯一索引，不允许有空值 一般是在建表的同时自动创建主键索引</td>\n</tr>\n<tr class=\"even\">\n<td>复合索引</td>\n<td>两个或多个列上的索引被称作复合索引</td>\n</tr>\n<tr class=\"odd\">\n<td>全文索引</td>\n<td>对文本内容进行分词索引</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"创建索引\">创建索引</h3>\n<ul>\n<li><p>创建普通索引 CREATE INDEX indexName ON tableName(columnName(length)) <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> name_idx <span class=\"keyword\">on</span> base(<span class=\"keyword\">name</span>);</span><br></pre></td></tr></table></figure> CREATE UNIQUE INDEX indexName ON tableName(columnName(length))<br />\n</p></li>\n<li><p>创建唯一索引 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">unique</span> <span class=\"keyword\">index</span> name_idx <span class=\"keyword\">on</span> base(<span class=\"keyword\">name</span>);</span><br></pre></td></tr></table></figure></p></li>\n<li><p>创建复合索引 CREATE INDEX indexName ON tableName(columnName1, columnName2, …) <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> muti_idx <span class=\"keyword\">on</span> base(<span class=\"keyword\">name</span>, sex, age);</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"删除索引\">删除索引</h3>\n<p>DROP INDEX [indexName] ON tableName;</p>\n<h3 id=\"查看索引\">查看索引</h3>\n<p>SHOW INDEX FROM tableName;</p>\n<ul>\n<li>使用索引分析器 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> base <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'cp'</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"复合索引\">复合索引</h3>\n<ul>\n<li>前导列特性（最左前缀）<br />\n在MySQL中，如果创建了复合索引(name, salary, dept)，就相当于创建了(name, salary, dept)、 (name, salary)和(name)三个索引，这被称为复合索引前导列特性， 因此在创建复合索引时应该将 最常用作查询条件的列放在最左边，依次递减</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">未使用索引</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> salary=<span class=\"number\">8800</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> dept=<span class=\"string\">'部门A'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> salary=<span class=\"number\">8800</span> <span class=\"keyword\">and</span> dept=<span class=\"string\">'部门A'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    使用索引</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'liufeng'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'liufeng'</span> <span class=\"keyword\">and</span> salary=<span class=\"number\">8800</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'liufeng'</span> <span class=\"keyword\">and</span> salary=<span class=\"number\">8800</span> <span class=\"keyword\">and</span> dept=<span class=\"string\">'部门A'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"覆盖索引\">覆盖索引</h3>\n<ul>\n<li><p>什么是覆盖索引<br />\n即select的数据列只从索引中就能得到，不必读取数据行，也就是只需扫描索引就可以得到查询结果</p></li>\n<li><p>几点说明<br />\n</p></li>\n</ul>\n<ol type=\"1\">\n<li>使用覆盖索引，只需要从索引中就能检索到需要的数据，而不要再扫描数据表；<br />\n</li>\n<li>索引的体量往往要比数据表小很多，因此只读取索引速度会非常快，也会极大减少数据访问量；<br />\n</li>\n<li>MySQL的查询优化器会在执行查询前判断，是否有一个索引可以覆盖所有的查询列；<br />\n</li>\n<li>并非所有类型的索引都可以作为覆盖索引，覆盖索引必须要存储索引列的值。像哈希索引、空间索引、全<br />\n文索引等并不会真正存储索引列的值<br />\n</li>\n<li>当一个查询使用了覆盖索引， 在查询分析器EXPLAIN的Extra列可以看到“Using index”</li>\n</ol>\n<h3 id=\"索引优化\">索引优化</h3>\n<ul>\n<li>选择区分度高的列建立索引<br />\n区分度计算公式：count(distinct col)/count(*)，表示字段不重复的比例<br />\n</li>\n<li>避免对索引列进行计算<br />\nfrom_unixtime(create_time)='2014-05-29' 不会用到索引<br />\n</li>\n<li>每次查询每张表仅能使用一个索引</li>\n</ul>\n<h2 id=\"事务\">事务</h2>\n<ul>\n<li><p>MyISAM 不支持， InnoDB</p></li>\n<li><p>什么是事务 用来处理批量的mysql操作， 为了保证数据库的完整性，这些操作要么完全执行，要么完全不执行</p></li>\n<li><p>几个术语<br />\n回退(rollback) 撤销SQL语句的过程<br />\n提交(commit) 未存储的SQL语句写入数据库表<br />\n保留点(savepoint) 事务处理中设置临时占位符(place-holder).可以发布回退</p></li>\n<li><p>可以执行回退的语句 INSERT UPDATE和DELETE</p></li>\n<li><p>事务的4个特性(ACID) 原子性: 批量的sql, 要么都发生， 要么都不发生<br />\n一致性：事务前后的数据保持业务上的合理一致<br />\n持久性：事务一旦发生不能取消，只能通过补偿性事务来抵消效果<br />\n隔离性：在事务进行中，其他操作开不到此事务的任何效果</p></li>\n<li><p>操作命令<br />\n开启事务：start transaction<br />\n执行命令： xxx<br />\n提交事务/回滚事务 commit/rollback<br />\n设置隔离级别：set session transaction isolation level [read uncommitted | read committed | repeatable read |serializable]</p></li>\n<li><p>示例</p></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建表</span><br><span class=\"line\">mysql&gt; create table account(</span><br><span class=\"line\">    -&gt; uname char(10),</span><br><span class=\"line\">    -&gt; money int)</span><br><span class=\"line\">    -&gt; engine innodb charset utf8;</span><br><span class=\"line\">//插入数据</span><br><span class=\"line\">mysql&gt; insert into account values</span><br><span class=\"line\">    -&gt; ('zhang', 5000),</span><br><span class=\"line\">    -&gt; ('lisi', 3000);</span><br><span class=\"line\"></span><br><span class=\"line\">//开启事务</span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span></span><br><span class=\"line\"></span><br><span class=\"line\">//更新数据</span><br><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">account</span> <span class=\"keyword\">set</span> money = money + <span class=\"number\">100000</span>  <span class=\"keyword\">where</span> uname=<span class=\"string\">'lisi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">//查询</span><br><span class=\"line\">mysql&gt; select * from account;</span><br><span class=\"line\">+<span class=\"comment\">-------+-------+</span></span><br><span class=\"line\">| uname | money |</span><br><span class=\"line\">+<span class=\"comment\">-------+-------+</span></span><br><span class=\"line\">| zhang |  5000 |</span><br><span class=\"line\">| lisi  |  3000 |</span><br><span class=\"line\"></span><br><span class=\"line\">//设置隔离级别</span><br><span class=\"line\">mysql&gt; set session transaction  isolation level read uncommitted</span><br><span class=\"line\"></span><br><span class=\"line\">//提交事务</span><br><span class=\"line\">mysql&gt; commit;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>隔离级别<br />\nread uncommit : \"脏读\", 读到未提交事务的内容<br />\nread commited : 一个事务在进行的过程中， 读不到另外一个进行中事务的内容，但是能读到已经完成事务中的内容<br />\nrepeatable read: 可重复读,即在一个事务过程中,所有信息都来自事务开始那一瞬间的信息,不受其他已提交事务的影响. (大多数的系统,用此隔离级别)<br />\nserializable: 串行化, 所有的事务,必须编号,按顺序一个一个来执行,也就取消了冲突的可能.这样隔离级别最高,但事务相互等待的等待长. 在实用,也不是很多</p></li>\n<li><p>c++中使用事务 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参考brks</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MysqlConnection::transaction(<span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; sql)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//手动提交</span></span><br><span class=\"line\">\tmysql_autocommit(mysql_, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//开始事务</span></span><br><span class=\"line\">\tmysql_query(mysql_, <span class=\"string\">\"start transaction\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> iter = sql.begin(), iter != sql.end(); iter++)&#123;</span><br><span class=\"line\">\t\tret = mysql_qurey(mysql_, (*iter).c_ctr());</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ret != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//回滚</span></span><br><span class=\"line\">\t\tmysqL_query(mysql_, <span class=\"string\">\"rollback\"</span>);</span><br><span class=\"line\">\t\tLOG_ERROR(<span class=\"string\">\"excute transaction failed.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"number\">0</span> != mysql_query(mysql, <span class=\"string\">\"commit\"</span>))&#123;</span><br><span class=\"line\">\t\tLOG_ERROR(<span class=\"string\">\"commit transaction failed.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"存储过程\">存储过程</h2>\n<p>一组为了完成特定功能的SQL语句集， 经编译后存储在数据库中， 用户通过存储过过程名并传参来调用它</p>\n<ul>\n<li><p>优点 增强的sql语音的功能和灵活性<br />\n存储过程允许标准组件式编程<br />\n较快的执行速度(存储过程是预编译的)<br />\n减少网络流量<br />\n可被作物一种安全机制充分利用</p></li>\n<li><p>创建步骤<br />\n选择一个数据库<br />\n改变分割符：delimiter $$(避免使用;作为结束标记)<br />\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use test;</span><br><span class=\"line\">mysql&gt; delimiter $$</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create procedure p_hello()</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; select 'hello';</span><br><span class=\"line\">    -&gt; select 'world';</span><br><span class=\"line\">    -&gt; end</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; call p_hello;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>存储过程中的参数<br />\nin: 输入参数<br />\n必须在调用存储过程之前指定<br />\nout: 输出参数<br />\n可以在存储过程内部改变并返回<br />\ninout:输入输出参数<br />\n可以在调用时指定， 并可修改和返回<br />\nin 在存储过程中修值是传入值得一份拷贝，传入的值不会改变 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create procedure v_test1(in p_int int)</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; select p_int;</span><br><span class=\"line\">    -&gt; set p_int = p_int +1;</span><br><span class=\"line\">    -&gt; select p_int;</span><br><span class=\"line\">    -&gt; end;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter </span><br><span class=\"line\">mysql&gt; set @p_int =3;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//存储过程里的值被修改</span><br><span class=\"line\">mysql&gt; call v_test1(@p_int);</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| p_int |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">|     3 |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| p_int |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">|     <span class=\"number\">4</span> |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\"></span><br><span class=\"line\">//外面的值没变</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">select</span> @p_int;</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">| @p_int |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">|      3 |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br></pre></td></tr></table></figure> out 不认可传入的值，修改后值会变 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create procedure p_test_out(out v_out_int int)</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; select v_out_int;</span><br><span class=\"line\">    -&gt; set v_out_int=15;</span><br><span class=\"line\">    -&gt; select v_out_int;</span><br><span class=\"line\">    -&gt; end</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; set @v_out_int=10;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">mysql&gt; call p_test_out(@v_out_int);</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">| v_out_int |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">|      NULL |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">| v_out_int |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">|        <span class=\"number\">15</span> |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br></pre></td></tr></table></figure> inout 类似于引用，认可传入的值， 修改后会改变</p></li>\n</ul>\n<p>在存储过程里面定义变量 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create procedure p_vartest()</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; declare a varchar(20) default 'abc';</span><br><span class=\"line\">    -&gt; select a;</span><br><span class=\"line\">    -&gt; end;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; call p_vartest;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| a    |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| abc  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>c++中使用存储过程<br />\n</li>\n<li>创建存储过程<br />\n</li>\n<li>初始化mysql: mysql_init<br />\n</li>\n<li>链接mysql: mysql_real_connect<br />\n</li>\n<li>调用存储过程: mysql_real_qurey, 第二个参数，\"call xxx(xxx)\"</li>\n<li>释放资源与连接：mysql_free_result， mysql_close</li>\n</ul>\n<h2 id=\"视图\">视图</h2>\n<p>由查询结果形成的一张虚拟表， 如果某个查询结果出现的非常频繁， 要经常拿这个查询结果来做子查询<br />\n视图本身不包含数据， 它返回的数据是从其他表中检索出来的</p>\n<ul>\n<li>作用<br />\n</li>\n</ul>\n<ol type=\"1\">\n<li>权限控制：如某几个列允许用户查询，其他的列不允许， 可以通过视图开放其中一列或几列<br />\n</li>\n<li>简化复杂的查询</li>\n</ol>\n<ul>\n<li><p>视图能否更新，删除，添加<br />\n如果视图的每一行是和物理表一一对应的才可以<br />\n如果view的行是由物理表多行经过计算的到的结果，view不可以更新</p></li>\n<li><p>视图放在哪儿（视图算法）</p></li>\n</ul>\n<ol type=\"1\">\n<li>对于简单的查询形成的view, 再对view查询时，如where, order等， 可以把建视图的语句+查询视图的语句合并成=》查物理的语句，这种视图算法叫merge(合并)<br />\n</li>\n<li>视图的语句本身比较复杂，很难再和查询视图的语句合并，mysql先执行视图的创建语句，把结果集形成内存中的临时表，然后再去查临时表(temptable)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\">数据类型</h2>\n<ul>\n<li><p>数值<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型      所占字节       说明</span><br><span class=\"line\">tinyint    1            小整数值，如状态</span><br><span class=\"line\">smallint   2            大整数值</span><br><span class=\"line\">mediumint  3            大整数值</span><br><span class=\"line\">int        4            大整数值</span><br><span class=\"line\">bigint     8            极大整数值</span><br><span class=\"line\">float      4            单精度浮点数值</span><br><span class=\"line\">double     8            双精度浮点数值</span><br><span class=\"line\">decimal    Max(D+, M+)  含小数值，例如金额</span><br></pre></td></tr></table></figure></p></li>\n<li><p>日期<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型        所占字节数          说明</span><br><span class=\"line\">date        3                  YYYY-MM-DD</span><br><span class=\"line\">time        3                  HH:MM:SS</span><br><span class=\"line\">year        1                  YYYY</span><br><span class=\"line\">datetime    8                  YYYY-MM-DD HH:MM:SS</span><br><span class=\"line\">timestamp   8                  YYYYMMDDHHMMSS</span><br></pre></td></tr></table></figure></p></li>\n<li><p>字符串<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型       所占字节数     说明</span><br><span class=\"line\">char       0~255         定长字段串</span><br><span class=\"line\">varchar    0~65535       变长字符串</span><br><span class=\"line\">text       0~65535       长文本数据</span><br><span class=\"line\">blob                     二进制形式的文本数据</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"数据完整性\">数据完整性</h2>\n<ul>\n<li><p>实体完整性<br />\n求每张表都有唯一标识符，每张表中的主键字段不能为空且不能重复<br />\n约束方法：唯一性约束、主键约束、标识列</p></li>\n<li><p>域完整性<br />\n表中某些列不能输入无效的值, 如数据类型、格式、值域范围、是否允许空值等<br />\n约束方法：限制数据类型、检查约束、默认值、非空约束</p></li>\n<li><p>参照完整性<br />\n求关系中不允许引用不存在的实体<br />\n约束方法：外键约束</p></li>\n<li><p>用户自定义完整性<br />\n针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求<br />\n约束方法：规则、存储过程、触发器</p></li>\n</ul>\n<p>唯一性约束<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#可以使用关键字 UNIQUE 实现字段的唯一性约束，从而保证实体的完整性  </span></span><br><span class=\"line\"><span class=\"comment\">#UNIQUE 意味着任何两条数据的同一个字段不能有相同值。</span></span><br><span class=\"line\"><span class=\"comment\">#一个表中可以有多个 UNIQUE 约束。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在创建表时添加唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> person(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment primary <span class=\"keyword\">key</span> <span class=\"keyword\">comment</span> <span class=\"string\">'主键id'</span>,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">id_number <span class=\"built_in\">varchar</span>(<span class=\"number\">18</span>) <span class=\"keyword\">unique</span> <span class=\"keyword\">comment</span> <span class=\"string\">'身份证号'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>外键约束 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 外键（FOREIGN KEY）约束定义了表之间的一致性关系，用于强制参照完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 外键约束定义了对同一个表或其他表的列的引用，这些列具有PRIMARY KEY或UNIQUE约束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 学生表(主表)</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> stu(</span><br><span class=\"line\">stu_no <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> primary <span class=\"keyword\">key</span> <span class=\"keyword\">comment</span> <span class=\"string\">'学号'</span>,</span><br><span class=\"line\">stu_name <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--成绩表</span></span><br><span class=\"line\"><span class=\"comment\">--在插入数据时，必须先向主表插入，再向从表插入, 删除数据时正好相反</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> sc(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment primary <span class=\"keyword\">key</span> <span class=\"keyword\">comment</span> <span class=\"string\">'主键id'</span>,</span><br><span class=\"line\">stu_no <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'学号'</span>,</span><br><span class=\"line\">course <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'课程'</span>,</span><br><span class=\"line\">grade <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'成绩'</span>,</span><br><span class=\"line\"><span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span>(stu_no) <span class=\"keyword\">references</span> stu(stu_no)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"函数\">函数　</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数学函数    </span></span><br><span class=\"line\">ABS SQRT MOD SIN COS TAN COT</span><br><span class=\"line\"><span class=\"comment\">--字符串函数 </span></span><br><span class=\"line\">LENGTH LOWER UPPER TRIM SUBSTRING</span><br><span class=\"line\"><span class=\"comment\">-- 日期和时间函数 </span></span><br><span class=\"line\">NOW CURDATE CURTIME SYSDATE DATE_FORMAT YEAR MONTH WEEK</span><br><span class=\"line\"><span class=\"comment\">--聚合函数 </span></span><br><span class=\"line\">COUNT SUM AVG MIN MAX</span><br><span class=\"line\"><span class=\"comment\">--条件判断函数 </span></span><br><span class=\"line\">IF IFNULL CASE WHEN</span><br><span class=\"line\"><span class=\"comment\">--系统信息函数 </span></span><br><span class=\"line\">VERSION DATABASE USER</span><br><span class=\"line\"><span class=\"comment\">-- 加密函数 </span></span><br><span class=\"line\">MD5 SHA1 SHA2</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>now <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 返回当期时间</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--在实际应用中，大多数业务表都会带一个创建时间create_time字段，用于记录每一条数据的产生时间。在向表</span></span><br><span class=\"line\"><span class=\"comment\">--中插入数据时，就可以在insert语句中使用now()函数</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span>(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, create_time) <span class=\"keyword\">values</span>(<span class=\"number\">1</span>, <span class=\"string\">'zhangsan'</span>, <span class=\"keyword\">now</span>());</span><br></pre></td></tr></table></figure></p></li>\n<li><p>date_format <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--在实际应用中，一般会按照标准格式存储日期/时间，如 2019-12-13 14:15:16 。在查询使用数据时，往往又</span></span><br><span class=\"line\"><span class=\"comment\">--会有不同的格式要求，这时就需要使用date_format()函数进行格式 转换</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span>, <span class=\"keyword\">date_format</span>(birthday, <span class=\"string\">'%Y/%m/%d'</span>) <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>聚合函数　 聚合函数是对一组值进行计算，并返回单个值 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count 返回符合条件的记录总数</span><br><span class=\"line\">sum 返回指定列的总和，忽略空值</span><br><span class=\"line\">avg 返回指定列的平均值，忽略空值</span><br><span class=\"line\">min 返回指定列的最小值，忽略空值</span><br><span class=\"line\">max 返回指定列的最大值，忽略空值</span><br></pre></td></tr></table></figure></p></li>\n<li><p>ifnull 函数ifnull()用于处理NULL值。 ifnull(v1,v2)，如果 v1 的值不为 NULL，则返回 v1，否则返回 v2 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">ifnull</span>(<span class=\"number\">1</span>/<span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">--0</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">ifnull</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">--1</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>case when 流程控制语句，可以在SQL语句中使用case when来获取更加准确和直接的结果 SQL中的case when类似于编程语言中的if else或者switch <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 语法</span></span><br><span class=\"line\">CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] <span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> [expr] <span class=\"keyword\">THEN</span> [result1]…<span class=\"keyword\">ELSE</span> [<span class=\"keyword\">default</span>] <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- as 取别名　</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">case</span> sex <span class=\"keyword\">when</span> <span class=\"string\">'男'</span>　<span class=\"keyword\">then</span> <span class=\"string\">'F'</span> <span class=\"keyword\">when</span> <span class=\"string\">'女'</span> <span class=\"keyword\">then</span> <span class=\"string\">'M'</span> <span class=\"keyword\">else</span> <span class=\"string\">''</span> <span class=\"keyword\">end</span> <span class=\"keyword\">as</span> sex</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"索引\">索引</h2>\n<h3 id=\"慢查询日志\">慢查询日志　　</h3>\n<h4 id=\"mysql的日志类型\">mysql的日志类型　</h4>\n<table>\n<colgroup>\n<col style=\"width: 31%\" />\n<col style=\"width: 68%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>日志</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>重做日志（redo log）</td>\n<td>重做日志是一种物理格式的日志，记录的是物理数据页面的修改的信息，其redo log是顺序 写入redo log file的物理文件中去的。</td>\n</tr>\n<tr class=\"even\">\n<td>回滚日志（undo log）</td>\n<td>回滚日志是一种逻辑格式的日志，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务 之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。</td>\n</tr>\n<tr class=\"odd\">\n<td>二进制日志（binlog）</td>\n<td>二进制日志是一种逻辑格式的日志，以二进制文件的形式记录了数据库中的操作，但不记录 查询语句。</td>\n</tr>\n<tr class=\"even\">\n<td>错误日志（errorlog）</td>\n<td>错误日志记录着mysqld启动和停止，以及服务器在运行过程中发生的错误的相关信息。</td>\n</tr>\n<tr class=\"odd\">\n<td>慢查询日志（slow query log）</td>\n<td>慢查询日志记录执行时间过长和没有使用索引的查询语句</td>\n</tr>\n<tr class=\"even\">\n<td>一般查询日志（general log）</td>\n<td>记录了服务器接收到的每一个查询或是命令，无论这些查询或是命令是否正确甚至是否包含 语法错误，general log都会将其记录下来</td>\n</tr>\n<tr class=\"odd\">\n<td>中继日志（relay log）</td>\n<td>中继日志类似二进制；可用于复制架构中，使从服务器和主服务器的数据保持一致</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"慢查询日志属性\">慢查询日志属性　　</h4>\n<table>\n<colgroup>\n<col style=\"width: 32%\" />\n<col style=\"width: 67%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>slow_query_log</td>\n<td>是否开启慢查询日志，1表示开启，0表示关闭。</td>\n</tr>\n<tr class=\"even\">\n<td>slow_query_log_file</td>\n<td>慢查询日志存储路径，可选。 注意：MySQL 5.6之前的版本，参数名为 log-slow-queries</td>\n</tr>\n<tr class=\"odd\">\n<td>long_query_time</td>\n<td>阈值，当SQL语句的响应时间超过该阈值就会被记录到日志中。</td>\n</tr>\n<tr class=\"even\">\n<td>log_queries_not_using_indexes</td>\n<td>未使用索引的查询也被记录到慢查询日志中，可选。</td>\n</tr>\n<tr class=\"odd\">\n<td>log_output</td>\n<td>日志存储方式，默认为FILE。 log_output=‘FILE’表示将日志存入文件 log_output=‘TABLE’表示将日志存入数据库 log_output=‘FILE,TABLE’表示同时将日志存入文件和数据库</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"开启慢查询日志\">开启慢查询日志　</h4>\n<p>慢查询日志可以通过命令临时设置，也可以修改配置文件永久设置 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看是否开启慢查询日志</span><br><span class=\"line\">show variables like &#39;slow%&#39;;</span><br><span class=\"line\">#临时开启慢查询日志</span><br><span class=\"line\">set slow_query_log&#x3D;&#39;ON&#39;;</span><br><span class=\"line\">set long_query_time&#x3D;1;</span><br><span class=\"line\">#慢查询日志文件所在位置</span><br><span class=\"line\">show variables like &#39;%datadir%&#39;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询分析器\">查询分析器</h3>\n<p>explain命令可以查看SQL语句的执行计划。当explain与SQL语句一起使用时，MySQL将显示来自 优化器的有关语句执行计划的信息。也就是说，MySQL解释了它将如何处理语句，包括有关如何联 接表以及以何种顺序联接表的信息</p>\n<h4 id=\"explain功能\">explain功能　</h4>\n<p>分析出表的读取顺序 数据读取操作的操作类型 哪些索引可以使用 哪些索引被实际使用 表之间的引用 每张表有多少行被优化器查询</p>\n<h4 id=\"explain-使用\">explain 使用　</h4>\n<p><img src=\"https://i.loli.net/2020/08/20/QBWxtJcN8Lq2iDg.png\"/></p>\n<h4 id=\"结果分析\">结果分析　</h4>\n<table>\n<thead>\n<tr class=\"header\">\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>id</td>\n<td>执行select子句或操作表的顺序</td>\n</tr>\n<tr class=\"even\">\n<td>select_type</td>\n<td>查询的类型，如SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION等</td>\n</tr>\n<tr class=\"odd\">\n<td>table</td>\n<td>当前行使用的表名</td>\n</tr>\n<tr class=\"even\">\n<td>partitions</td>\n<td>匹配的分区</td>\n</tr>\n<tr class=\"odd\">\n<td>type</td>\n<td>连接类型，如system、const、eq_ref、ref、range、index、all等</td>\n</tr>\n<tr class=\"even\">\n<td>possible_keys</td>\n<td>可能使用的索引</td>\n</tr>\n<tr class=\"odd\">\n<td>key</td>\n<td>实际使用的索引，NULL表示未使用索引</td>\n</tr>\n<tr class=\"even\">\n<td>key_len</td>\n<td>查询中使用的索引长度</td>\n</tr>\n<tr class=\"odd\">\n<td>ref</td>\n<td>列与索引的比较</td>\n</tr>\n<tr class=\"even\">\n<td>rows</td>\n<td>扫描的行数</td>\n</tr>\n<tr class=\"odd\">\n<td>filtered</td>\n<td>选取的行数占扫描的行数的百分比，理想的结果是100</td>\n</tr>\n<tr class=\"even\">\n<td>extra</td>\n<td>其他额外信息</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"索引种类\">索引种类</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th>索引种类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>普通索引</td>\n<td>最基本的索引，没有任何限制，仅加速查询</td>\n</tr>\n<tr class=\"even\">\n<td>唯一索引</td>\n<td>索引列的值必须唯一，但允许有空值</td>\n</tr>\n<tr class=\"odd\">\n<td>主键索引</td>\n<td>一种特殊的唯一索引，不允许有空值 一般是在建表的同时自动创建主键索引</td>\n</tr>\n<tr class=\"even\">\n<td>复合索引</td>\n<td>两个或多个列上的索引被称作复合索引</td>\n</tr>\n<tr class=\"odd\">\n<td>全文索引</td>\n<td>对文本内容进行分词索引</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"创建索引\">创建索引</h3>\n<ul>\n<li><p>创建普通索引 CREATE INDEX indexName ON tableName(columnName(length)) <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> name_idx <span class=\"keyword\">on</span> base(<span class=\"keyword\">name</span>);</span><br></pre></td></tr></table></figure> CREATE UNIQUE INDEX indexName ON tableName(columnName(length))<br />\n</p></li>\n<li><p>创建唯一索引 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">unique</span> <span class=\"keyword\">index</span> name_idx <span class=\"keyword\">on</span> base(<span class=\"keyword\">name</span>);</span><br></pre></td></tr></table></figure></p></li>\n<li><p>创建复合索引 CREATE INDEX indexName ON tableName(columnName1, columnName2, …) <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> muti_idx <span class=\"keyword\">on</span> base(<span class=\"keyword\">name</span>, sex, age);</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"删除索引\">删除索引</h3>\n<p>DROP INDEX [indexName] ON tableName;</p>\n<h3 id=\"查看索引\">查看索引</h3>\n<p>SHOW INDEX FROM tableName;</p>\n<ul>\n<li>使用索引分析器 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> base <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'cp'</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"复合索引\">复合索引</h3>\n<ul>\n<li>前导列特性（最左前缀）<br />\n在MySQL中，如果创建了复合索引(name, salary, dept)，就相当于创建了(name, salary, dept)、 (name, salary)和(name)三个索引，这被称为复合索引前导列特性， 因此在创建复合索引时应该将 最常用作查询条件的列放在最左边，依次递减</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">未使用索引</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> salary=<span class=\"number\">8800</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> dept=<span class=\"string\">'部门A'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> salary=<span class=\"number\">8800</span> <span class=\"keyword\">and</span> dept=<span class=\"string\">'部门A'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    使用索引</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'liufeng'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'liufeng'</span> <span class=\"keyword\">and</span> salary=<span class=\"number\">8800</span>;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employee <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'liufeng'</span> <span class=\"keyword\">and</span> salary=<span class=\"number\">8800</span> <span class=\"keyword\">and</span> dept=<span class=\"string\">'部门A'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"覆盖索引\">覆盖索引</h3>\n<ul>\n<li><p>什么是覆盖索引<br />\n即select的数据列只从索引中就能得到，不必读取数据行，也就是只需扫描索引就可以得到查询结果</p></li>\n<li><p>几点说明<br />\n</p></li>\n</ul>\n<ol type=\"1\">\n<li>使用覆盖索引，只需要从索引中就能检索到需要的数据，而不要再扫描数据表；<br />\n</li>\n<li>索引的体量往往要比数据表小很多，因此只读取索引速度会非常快，也会极大减少数据访问量；<br />\n</li>\n<li>MySQL的查询优化器会在执行查询前判断，是否有一个索引可以覆盖所有的查询列；<br />\n</li>\n<li>并非所有类型的索引都可以作为覆盖索引，覆盖索引必须要存储索引列的值。像哈希索引、空间索引、全<br />\n文索引等并不会真正存储索引列的值<br />\n</li>\n<li>当一个查询使用了覆盖索引， 在查询分析器EXPLAIN的Extra列可以看到“Using index”</li>\n</ol>\n<h3 id=\"索引优化\">索引优化</h3>\n<ul>\n<li>选择区分度高的列建立索引<br />\n区分度计算公式：count(distinct col)/count(*)，表示字段不重复的比例<br />\n</li>\n<li>避免对索引列进行计算<br />\nfrom_unixtime(create_time)='2014-05-29' 不会用到索引<br />\n</li>\n<li>每次查询每张表仅能使用一个索引</li>\n</ul>\n<h2 id=\"事务\">事务</h2>\n<ul>\n<li><p>MyISAM 不支持， InnoDB</p></li>\n<li><p>什么是事务 用来处理批量的mysql操作， 为了保证数据库的完整性，这些操作要么完全执行，要么完全不执行</p></li>\n<li><p>几个术语<br />\n回退(rollback) 撤销SQL语句的过程<br />\n提交(commit) 未存储的SQL语句写入数据库表<br />\n保留点(savepoint) 事务处理中设置临时占位符(place-holder).可以发布回退</p></li>\n<li><p>可以执行回退的语句 INSERT UPDATE和DELETE</p></li>\n<li><p>事务的4个特性(ACID) 原子性: 批量的sql, 要么都发生， 要么都不发生<br />\n一致性：事务前后的数据保持业务上的合理一致<br />\n持久性：事务一旦发生不能取消，只能通过补偿性事务来抵消效果<br />\n隔离性：在事务进行中，其他操作开不到此事务的任何效果</p></li>\n<li><p>操作命令<br />\n开启事务：start transaction<br />\n执行命令： xxx<br />\n提交事务/回滚事务 commit/rollback<br />\n设置隔离级别：set session transaction isolation level [read uncommitted | read committed | repeatable read |serializable]</p></li>\n<li><p>示例</p></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建表</span><br><span class=\"line\">mysql&gt; create table account(</span><br><span class=\"line\">    -&gt; uname char(10),</span><br><span class=\"line\">    -&gt; money int)</span><br><span class=\"line\">    -&gt; engine innodb charset utf8;</span><br><span class=\"line\">//插入数据</span><br><span class=\"line\">mysql&gt; insert into account values</span><br><span class=\"line\">    -&gt; ('zhang', 5000),</span><br><span class=\"line\">    -&gt; ('lisi', 3000);</span><br><span class=\"line\"></span><br><span class=\"line\">//开启事务</span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span></span><br><span class=\"line\"></span><br><span class=\"line\">//更新数据</span><br><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">account</span> <span class=\"keyword\">set</span> money = money + <span class=\"number\">100000</span>  <span class=\"keyword\">where</span> uname=<span class=\"string\">'lisi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">//查询</span><br><span class=\"line\">mysql&gt; select * from account;</span><br><span class=\"line\">+<span class=\"comment\">-------+-------+</span></span><br><span class=\"line\">| uname | money |</span><br><span class=\"line\">+<span class=\"comment\">-------+-------+</span></span><br><span class=\"line\">| zhang |  5000 |</span><br><span class=\"line\">| lisi  |  3000 |</span><br><span class=\"line\"></span><br><span class=\"line\">//设置隔离级别</span><br><span class=\"line\">mysql&gt; set session transaction  isolation level read uncommitted</span><br><span class=\"line\"></span><br><span class=\"line\">//提交事务</span><br><span class=\"line\">mysql&gt; commit;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>隔离级别<br />\nread uncommit : \"脏读\", 读到未提交事务的内容<br />\nread commited : 一个事务在进行的过程中， 读不到另外一个进行中事务的内容，但是能读到已经完成事务中的内容<br />\nrepeatable read: 可重复读,即在一个事务过程中,所有信息都来自事务开始那一瞬间的信息,不受其他已提交事务的影响. (大多数的系统,用此隔离级别)<br />\nserializable: 串行化, 所有的事务,必须编号,按顺序一个一个来执行,也就取消了冲突的可能.这样隔离级别最高,但事务相互等待的等待长. 在实用,也不是很多</p></li>\n<li><p>c++中使用事务 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参考brks</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> MysqlConnection::transaction(<span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; sql)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//手动提交</span></span><br><span class=\"line\">\tmysql_autocommit(mysql_, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//开始事务</span></span><br><span class=\"line\">\tmysql_query(mysql_, <span class=\"string\">\"start transaction\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> iter = sql.begin(), iter != sql.end(); iter++)&#123;</span><br><span class=\"line\">\t\tret = mysql_qurey(mysql_, (*iter).c_ctr());</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ret != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//回滚</span></span><br><span class=\"line\">\t\tmysqL_query(mysql_, <span class=\"string\">\"rollback\"</span>);</span><br><span class=\"line\">\t\tLOG_ERROR(<span class=\"string\">\"excute transaction failed.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"number\">0</span> != mysql_query(mysql, <span class=\"string\">\"commit\"</span>))&#123;</span><br><span class=\"line\">\t\tLOG_ERROR(<span class=\"string\">\"commit transaction failed.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"存储过程\">存储过程</h2>\n<p>一组为了完成特定功能的SQL语句集， 经编译后存储在数据库中， 用户通过存储过过程名并传参来调用它</p>\n<ul>\n<li><p>优点 增强的sql语音的功能和灵活性<br />\n存储过程允许标准组件式编程<br />\n较快的执行速度(存储过程是预编译的)<br />\n减少网络流量<br />\n可被作物一种安全机制充分利用</p></li>\n<li><p>创建步骤<br />\n选择一个数据库<br />\n改变分割符：delimiter $$(避免使用;作为结束标记)<br />\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use test;</span><br><span class=\"line\">mysql&gt; delimiter $$</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create procedure p_hello()</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; select 'hello';</span><br><span class=\"line\">    -&gt; select 'world';</span><br><span class=\"line\">    -&gt; end</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; call p_hello;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>存储过程中的参数<br />\nin: 输入参数<br />\n必须在调用存储过程之前指定<br />\nout: 输出参数<br />\n可以在存储过程内部改变并返回<br />\ninout:输入输出参数<br />\n可以在调用时指定， 并可修改和返回<br />\nin 在存储过程中修值是传入值得一份拷贝，传入的值不会改变 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create procedure v_test1(in p_int int)</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; select p_int;</span><br><span class=\"line\">    -&gt; set p_int = p_int +1;</span><br><span class=\"line\">    -&gt; select p_int;</span><br><span class=\"line\">    -&gt; end;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter </span><br><span class=\"line\">mysql&gt; set @p_int =3;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//存储过程里的值被修改</span><br><span class=\"line\">mysql&gt; call v_test1(@p_int);</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| p_int |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">|     3 |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| p_int |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">|     <span class=\"number\">4</span> |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\"></span><br><span class=\"line\">//外面的值没变</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">select</span> @p_int;</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">| @p_int |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">|      3 |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br></pre></td></tr></table></figure> out 不认可传入的值，修改后值会变 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create procedure p_test_out(out v_out_int int)</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; select v_out_int;</span><br><span class=\"line\">    -&gt; set v_out_int=15;</span><br><span class=\"line\">    -&gt; select v_out_int;</span><br><span class=\"line\">    -&gt; end</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; set @v_out_int=10;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">mysql&gt; call p_test_out(@v_out_int);</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">| v_out_int |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">|      NULL |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">| v_out_int |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br><span class=\"line\">|        <span class=\"number\">15</span> |</span><br><span class=\"line\">+<span class=\"comment\">-----------+</span></span><br></pre></td></tr></table></figure> inout 类似于引用，认可传入的值， 修改后会改变</p></li>\n</ul>\n<p>在存储过程里面定义变量 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create procedure p_vartest()</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; declare a varchar(20) default 'abc';</span><br><span class=\"line\">    -&gt; select a;</span><br><span class=\"line\">    -&gt; end;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; call p_vartest;</span><br><span class=\"line\">    -&gt; $$;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| a    |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| abc  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>c++中使用存储过程<br />\n</li>\n<li>创建存储过程<br />\n</li>\n<li>初始化mysql: mysql_init<br />\n</li>\n<li>链接mysql: mysql_real_connect<br />\n</li>\n<li>调用存储过程: mysql_real_qurey, 第二个参数，\"call xxx(xxx)\"</li>\n<li>释放资源与连接：mysql_free_result， mysql_close</li>\n</ul>\n<h2 id=\"视图\">视图</h2>\n<p>由查询结果形成的一张虚拟表， 如果某个查询结果出现的非常频繁， 要经常拿这个查询结果来做子查询<br />\n视图本身不包含数据， 它返回的数据是从其他表中检索出来的</p>\n<ul>\n<li>作用<br />\n</li>\n</ul>\n<ol type=\"1\">\n<li>权限控制：如某几个列允许用户查询，其他的列不允许， 可以通过视图开放其中一列或几列<br />\n</li>\n<li>简化复杂的查询</li>\n</ol>\n<ul>\n<li><p>视图能否更新，删除，添加<br />\n如果视图的每一行是和物理表一一对应的才可以<br />\n如果view的行是由物理表多行经过计算的到的结果，view不可以更新</p></li>\n<li><p>视图放在哪儿（视图算法）</p></li>\n</ul>\n<ol type=\"1\">\n<li>对于简单的查询形成的view, 再对view查询时，如where, order等， 可以把建视图的语句+查询视图的语句合并成=》查物理的语句，这种视图算法叫merge(合并)<br />\n</li>\n<li>视图的语句本身比较复杂，很难再和查询视图的语句合并，mysql先执行视图的创建语句，把结果集形成内存中的临时表，然后再去查临时表(temptable)</li>\n</ol>\n"},{"title":"mysql面试","date":"2020-03-03T12:17:16.000Z","_content":"<!-- more -->\n## 基础\n###  MySQL 执行一条查询语句的内部执行过程   \n * 答案：  \n 链接器=》分析器=》优化器=》执行器=》存储引擎    \n1. 客户端先通过连接器连接到 MySQL 服务器   \n2. 连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器     \n3. 分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器  \n4. 优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好  \n5. 优化器执行完就进入执行器，执行器就开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回   \n\n* 详解：  \n查询、更新等语句都会走下面这个图(mysql逻辑架构图)     \n![p1](/images/mysql_p1_20200304092002.png)     \n大体上MySQL=Server层+存储引擎层  \nServer层实现的功能：内置函数(日期、时间、数学、加密函数)和跨存储引擎功能(存储过程、触发器、视图)  \n存储引擎层功能：数据存储和提取，架构模式为插件式，最常用的存储引擎InnoDB(5.5.5后默认引擎)、MyISAM、Memory    \n连接器： \n负责与客户端建立连接，获取权限，维持和管理连接     \n建立连接    \nmysql  -h$ip  -P$port  -u$user -p    \n获取权限   \n如果用户密码不对， 则报错\"Access denied for user\"， 然后退出  \n如果用户密码认证通过，连接器会到权限表里查出你拥有的权限 (即使管理员修改了你的权限也只能下次重新连接是生效)    \n管理连接  \n查询连接状态   \nshow processlist\n其中Command 为Sleep的表示空闲连接， 如果空闲时间超过wait_timeout则自动断开     \n查询缓存：   \n以key-value的形式存在内存中，key是查询命令，value是结果  \n缓存利大于弊，查询缓存失效非常频繁，只要对一个表更新，这个表上所有查询缓存都会被清空 , 更新频繁的数据库不适应缓存   \n使用场景：  业务是一张静态表，长时间不更新，例如配置信息  \n设置sql语句默认不查询   \n set session query_cache_type=DEMAND  #当前会话  \n Mysql8.0后没有查询缓存功能   \n分析器      \n优化器：    \n表里有多个索引是，决定用哪个索引，或一个语句有多表关联(join)时，决定各个表连接顺序   \n执行器：    \n先判断有没有查询权限，没有则返回错误 ， 如果有则使用引擎提供的接口      \n\n\n二、 MySQL执行一条更新语句内部的执行过程    \n* 答案:\n与查询语句的流程一样：链接器=》分析器=》优化器=》执行器=》存储引擎   \n执行器和存储引擎(innodb)的细节不同：   \n1. 执行器先找引擎取指定主键的数据（B-,b+树）, 如果数据在内存上直接返回给执行器，否则从磁盘读入内存在返回   \n2. 执行器根据更新语句对数据进行操作后调用引擎接口写入  \n3. 引擎将这行数据更新到内存，并将更新操作记录到redo log, 此时redo log处于prepare状态，通知执行器可以提交事务。  \n4. 执行器生成这个操作的binlog, 并将binlog写入磁盘\n5. 执行器调用引擎提交事务接口，引擎讲redo log改为commit状态，更新完成      \n\n\n## 索引  \n### 主键索引和非主键索引有什么区别（innodb引擎下）\n1. 主键索引叶子节点中存储整行数据, 非主键索引存的是主键\n2. 非主键索引可能存在回表查询， 因此IO操作可能多于主键索引, 索引应该避免回表查询   \n3. 创建方式上，如果表中有主键，会自动生成主键索引。表中无主键，将唯一索引+not null 作为主键\n   如果没有， mysql自动创建rowid, 隐式列。 非主键索引要主动创建\n4. 非主键索引会占用额外的磁盘空间，会降低更新效率   \n\n### 为什么建议使用主键自增索引  \n表的存储结构， 表空间有段(索引=索引段+数据段)组成， 区=1M=64页， 1页=16k\n不使用自增索引插入数据时B+树的结构可能也会跟着调整， 可能产生磁盘碎片降低磁盘利用率\n\n### 为什么索引使用整型而不是字符串  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mysql_interview.md","raw":"---\ntitle: mysql面试\ndate: 2020-03-03 20:17:16\ncategories: \n    - 中间件  \ntags: \n    - 面试  \n    - mysql  \n---\n<!-- more -->\n## 基础\n###  MySQL 执行一条查询语句的内部执行过程   \n * 答案：  \n 链接器=》分析器=》优化器=》执行器=》存储引擎    \n1. 客户端先通过连接器连接到 MySQL 服务器   \n2. 连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器     \n3. 分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器  \n4. 优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好  \n5. 优化器执行完就进入执行器，执行器就开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回   \n\n* 详解：  \n查询、更新等语句都会走下面这个图(mysql逻辑架构图)     \n![p1](/images/mysql_p1_20200304092002.png)     \n大体上MySQL=Server层+存储引擎层  \nServer层实现的功能：内置函数(日期、时间、数学、加密函数)和跨存储引擎功能(存储过程、触发器、视图)  \n存储引擎层功能：数据存储和提取，架构模式为插件式，最常用的存储引擎InnoDB(5.5.5后默认引擎)、MyISAM、Memory    \n连接器： \n负责与客户端建立连接，获取权限，维持和管理连接     \n建立连接    \nmysql  -h$ip  -P$port  -u$user -p    \n获取权限   \n如果用户密码不对， 则报错\"Access denied for user\"， 然后退出  \n如果用户密码认证通过，连接器会到权限表里查出你拥有的权限 (即使管理员修改了你的权限也只能下次重新连接是生效)    \n管理连接  \n查询连接状态   \nshow processlist\n其中Command 为Sleep的表示空闲连接， 如果空闲时间超过wait_timeout则自动断开     \n查询缓存：   \n以key-value的形式存在内存中，key是查询命令，value是结果  \n缓存利大于弊，查询缓存失效非常频繁，只要对一个表更新，这个表上所有查询缓存都会被清空 , 更新频繁的数据库不适应缓存   \n使用场景：  业务是一张静态表，长时间不更新，例如配置信息  \n设置sql语句默认不查询   \n set session query_cache_type=DEMAND  #当前会话  \n Mysql8.0后没有查询缓存功能   \n分析器      \n优化器：    \n表里有多个索引是，决定用哪个索引，或一个语句有多表关联(join)时，决定各个表连接顺序   \n执行器：    \n先判断有没有查询权限，没有则返回错误 ， 如果有则使用引擎提供的接口      \n\n\n二、 MySQL执行一条更新语句内部的执行过程    \n* 答案:\n与查询语句的流程一样：链接器=》分析器=》优化器=》执行器=》存储引擎   \n执行器和存储引擎(innodb)的细节不同：   \n1. 执行器先找引擎取指定主键的数据（B-,b+树）, 如果数据在内存上直接返回给执行器，否则从磁盘读入内存在返回   \n2. 执行器根据更新语句对数据进行操作后调用引擎接口写入  \n3. 引擎将这行数据更新到内存，并将更新操作记录到redo log, 此时redo log处于prepare状态，通知执行器可以提交事务。  \n4. 执行器生成这个操作的binlog, 并将binlog写入磁盘\n5. 执行器调用引擎提交事务接口，引擎讲redo log改为commit状态，更新完成      \n\n\n## 索引  \n### 主键索引和非主键索引有什么区别（innodb引擎下）\n1. 主键索引叶子节点中存储整行数据, 非主键索引存的是主键\n2. 非主键索引可能存在回表查询， 因此IO操作可能多于主键索引, 索引应该避免回表查询   \n3. 创建方式上，如果表中有主键，会自动生成主键索引。表中无主键，将唯一索引+not null 作为主键\n   如果没有， mysql自动创建rowid, 隐式列。 非主键索引要主动创建\n4. 非主键索引会占用额外的磁盘空间，会降低更新效率   \n\n### 为什么建议使用主键自增索引  \n表的存储结构， 表空间有段(索引=索引段+数据段)组成， 区=1M=64页， 1页=16k\n不使用自增索引插入数据时B+树的结构可能也会跟着调整， 可能产生磁盘碎片降低磁盘利用率\n\n### 为什么索引使用整型而不是字符串  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mysql_interview","published":1,"updated":"2020-07-06T23:27:01.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vw000y54yn2uy3ghta","content":"<a id=\"more\"></a>\n<h2 id=\"基础\">基础</h2>\n<h3 id=\"mysql-执行一条查询语句的内部执行过程\">MySQL 执行一条查询语句的内部执行过程</h3>\n<ul>\n<li>答案：<br />\n链接器=》分析器=》优化器=》执行器=》存储引擎<br />\n</li>\n</ul>\n<ol type=\"1\">\n<li>客户端先通过连接器连接到 MySQL 服务器<br />\n</li>\n<li>连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器<br />\n</li>\n<li>分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器<br />\n</li>\n<li>优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好<br />\n</li>\n<li>优化器执行完就进入执行器，执行器就开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回</li>\n</ol>\n<ul>\n<li>详解：<br />\n查询、更新等语句都会走下面这个图(mysql逻辑架构图)<br />\n<img src=\"/images/mysql_p1_20200304092002.png\" alt=\"p1\" /><br />\n大体上MySQL=Server层+存储引擎层<br />\nServer层实现的功能：内置函数(日期、时间、数学、加密函数)和跨存储引擎功能(存储过程、触发器、视图)<br />\n存储引擎层功能：数据存储和提取，架构模式为插件式，最常用的存储引擎InnoDB(5.5.5后默认引擎)、MyISAM、Memory<br />\n连接器： 负责与客户端建立连接，获取权限，维持和管理连接<br />\n建立连接<br />\nmysql -h<span class=\"math inline\">\\(ip -P\\)</span>port -u$user -p<br />\n获取权限<br />\n如果用户密码不对， 则报错\"Access denied for user\"， 然后退出<br />\n如果用户密码认证通过，连接器会到权限表里查出你拥有的权限 (即使管理员修改了你的权限也只能下次重新连接是生效)<br />\n管理连接<br />\n查询连接状态<br />\nshow processlist 其中Command 为Sleep的表示空闲连接， 如果空闲时间超过wait_timeout则自动断开<br />\n查询缓存：<br />\n以key-value的形式存在内存中，key是查询命令，value是结果<br />\n缓存利大于弊，查询缓存失效非常频繁，只要对一个表更新，这个表上所有查询缓存都会被清空 , 更新频繁的数据库不适应缓存<br />\n使用场景： 业务是一张静态表，长时间不更新，例如配置信息<br />\n设置sql语句默认不查询<br />\nset session query_cache_type=DEMAND #当前会话<br />\nMysql8.0后没有查询缓存功能<br />\n分析器<br />\n优化器：<br />\n表里有多个索引是，决定用哪个索引，或一个语句有多表关联(join)时，决定各个表连接顺序<br />\n执行器：<br />\n先判断有没有查询权限，没有则返回错误 ， 如果有则使用引擎提供的接口</li>\n</ul>\n<p>二、 MySQL执行一条更新语句内部的执行过程<br />\n* 答案: 与查询语句的流程一样：链接器=》分析器=》优化器=》执行器=》存储引擎<br />\n执行器和存储引擎(innodb)的细节不同：<br />\n1. 执行器先找引擎取指定主键的数据（B-,b+树）, 如果数据在内存上直接返回给执行器，否则从磁盘读入内存在返回<br />\n2. 执行器根据更新语句对数据进行操作后调用引擎接口写入<br />\n3. 引擎将这行数据更新到内存，并将更新操作记录到redo log, 此时redo log处于prepare状态，通知执行器可以提交事务。<br />\n4. 执行器生成这个操作的binlog, 并将binlog写入磁盘 5. 执行器调用引擎提交事务接口，引擎讲redo log改为commit状态，更新完成</p>\n<h2 id=\"索引\">索引</h2>\n<h3 id=\"主键索引和非主键索引有什么区别innodb引擎下\">主键索引和非主键索引有什么区别（innodb引擎下）</h3>\n<ol type=\"1\">\n<li>主键索引叶子节点中存储整行数据, 非主键索引存的是主键</li>\n<li>非主键索引可能存在回表查询， 因此IO操作可能多于主键索引, 索引应该避免回表查询<br />\n</li>\n<li>创建方式上，如果表中有主键，会自动生成主键索引。表中无主键，将唯一索引+not null 作为主键 如果没有， mysql自动创建rowid, 隐式列。 非主键索引要主动创建</li>\n<li>非主键索引会占用额外的磁盘空间，会降低更新效率</li>\n</ol>\n<h3 id=\"为什么建议使用主键自增索引\">为什么建议使用主键自增索引</h3>\n<p>表的存储结构， 表空间有段(索引=索引段+数据段)组成， 区=1M=64页， 1页=16k 不使用自增索引插入数据时B+树的结构可能也会跟着调整， 可能产生磁盘碎片降低磁盘利用率</p>\n<h3 id=\"为什么索引使用整型而不是字符串\">为什么索引使用整型而不是字符串</h3>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\">基础</h2>\n<h3 id=\"mysql-执行一条查询语句的内部执行过程\">MySQL 执行一条查询语句的内部执行过程</h3>\n<ul>\n<li>答案：<br />\n链接器=》分析器=》优化器=》执行器=》存储引擎<br />\n</li>\n</ul>\n<ol type=\"1\">\n<li>客户端先通过连接器连接到 MySQL 服务器<br />\n</li>\n<li>连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器<br />\n</li>\n<li>分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器<br />\n</li>\n<li>优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好<br />\n</li>\n<li>优化器执行完就进入执行器，执行器就开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回</li>\n</ol>\n<ul>\n<li>详解：<br />\n查询、更新等语句都会走下面这个图(mysql逻辑架构图)<br />\n<img src=\"/images/mysql_p1_20200304092002.png\" alt=\"p1\" /><br />\n大体上MySQL=Server层+存储引擎层<br />\nServer层实现的功能：内置函数(日期、时间、数学、加密函数)和跨存储引擎功能(存储过程、触发器、视图)<br />\n存储引擎层功能：数据存储和提取，架构模式为插件式，最常用的存储引擎InnoDB(5.5.5后默认引擎)、MyISAM、Memory<br />\n连接器： 负责与客户端建立连接，获取权限，维持和管理连接<br />\n建立连接<br />\nmysql -h<span class=\"math inline\">\\(ip -P\\)</span>port -u$user -p<br />\n获取权限<br />\n如果用户密码不对， 则报错\"Access denied for user\"， 然后退出<br />\n如果用户密码认证通过，连接器会到权限表里查出你拥有的权限 (即使管理员修改了你的权限也只能下次重新连接是生效)<br />\n管理连接<br />\n查询连接状态<br />\nshow processlist 其中Command 为Sleep的表示空闲连接， 如果空闲时间超过wait_timeout则自动断开<br />\n查询缓存：<br />\n以key-value的形式存在内存中，key是查询命令，value是结果<br />\n缓存利大于弊，查询缓存失效非常频繁，只要对一个表更新，这个表上所有查询缓存都会被清空 , 更新频繁的数据库不适应缓存<br />\n使用场景： 业务是一张静态表，长时间不更新，例如配置信息<br />\n设置sql语句默认不查询<br />\nset session query_cache_type=DEMAND #当前会话<br />\nMysql8.0后没有查询缓存功能<br />\n分析器<br />\n优化器：<br />\n表里有多个索引是，决定用哪个索引，或一个语句有多表关联(join)时，决定各个表连接顺序<br />\n执行器：<br />\n先判断有没有查询权限，没有则返回错误 ， 如果有则使用引擎提供的接口</li>\n</ul>\n<p>二、 MySQL执行一条更新语句内部的执行过程<br />\n* 答案: 与查询语句的流程一样：链接器=》分析器=》优化器=》执行器=》存储引擎<br />\n执行器和存储引擎(innodb)的细节不同：<br />\n1. 执行器先找引擎取指定主键的数据（B-,b+树）, 如果数据在内存上直接返回给执行器，否则从磁盘读入内存在返回<br />\n2. 执行器根据更新语句对数据进行操作后调用引擎接口写入<br />\n3. 引擎将这行数据更新到内存，并将更新操作记录到redo log, 此时redo log处于prepare状态，通知执行器可以提交事务。<br />\n4. 执行器生成这个操作的binlog, 并将binlog写入磁盘 5. 执行器调用引擎提交事务接口，引擎讲redo log改为commit状态，更新完成</p>\n<h2 id=\"索引\">索引</h2>\n<h3 id=\"主键索引和非主键索引有什么区别innodb引擎下\">主键索引和非主键索引有什么区别（innodb引擎下）</h3>\n<ol type=\"1\">\n<li>主键索引叶子节点中存储整行数据, 非主键索引存的是主键</li>\n<li>非主键索引可能存在回表查询， 因此IO操作可能多于主键索引, 索引应该避免回表查询<br />\n</li>\n<li>创建方式上，如果表中有主键，会自动生成主键索引。表中无主键，将唯一索引+not null 作为主键 如果没有， mysql自动创建rowid, 隐式列。 非主键索引要主动创建</li>\n<li>非主键索引会占用额外的磁盘空间，会降低更新效率</li>\n</ol>\n<h3 id=\"为什么建议使用主键自增索引\">为什么建议使用主键自增索引</h3>\n<p>表的存储结构， 表空间有段(索引=索引段+数据段)组成， 区=1M=64页， 1页=16k 不使用自增索引插入数据时B+树的结构可能也会跟着调整， 可能产生磁盘碎片降低磁盘利用率</p>\n<h3 id=\"为什么索引使用整型而不是字符串\">为什么索引使用整型而不是字符串</h3>"},{"title":"shell","date":"2020-07-04T11:10:37.000Z","_content":"\n### 语法   \n```sh\n#! /bin/bash                                                                    \n                                                                               \nif [ $# -lt 1 ];then                                                            \n   echo \"arg count must > 1\"                                                    \n   echo \"Uage bash -x example_1.sh [args...]\"                                  \n   exit                                                                        \nfi                                                                              \n                                                                               \narg=$1                                                                          \nif [ $arg -gt 10 ];then                                                          \n   echo \"$arg > 10\"                                                            \nelse                                                                            \n   echo \"$arg <= 10\"                                                            \nfi\n```\n* if [[...]] 表示模式匹配   \n```sh\nif [[ $trunk_path = *$dir* ]]; then                     \n    trunk_path=`echo $${trunk_path} | sed \"s/\\/$$dir.*//\"`  \nfi \n```\n\n* 数组，函数传参数，for循环\n```sh\n#! /bin/bash\n\n\nif [ $# -lt 1 ]; then\n   echo \"args must > 1\"\n   echo \"Usage bash +x example_2.sh [args...]\"\nfi\n\n\nargs=$@\nfor arg in $args;\ndo\n   echo $arg\ndone\n\n\nfunction func1(){\n   echo $1 #$1是该函数的第一个参数\n}\n\n\nfunc1 \"hello everybody\" #函数传参\n\n\n#第二种写法\nfunc2(){\n   echo \"bash shell function defination\"\n}\n\n\nfunc2 #调用\n```\n\n```sh\n#! /bin/bash\n\narray=(\"hello\"  \"gg\" 1 \"shit\")\n\necho \"first element is ${array[0]}\"\necho \"second element is ${array[1]}\"\necho \"third element is ${array[2]}\"\necho \"fourth element is ${array[3]}\"\necho \"all element are ${array[@]}\" #所有的元素\necho \"size of array is ${#array[@]}\" #数组的元素个数\n\nfor arg in ${array[@]};\ndo\n   echo $arg\ndone\n```\n* While循环以及其它几种循环、case、表达式expr  \n```sh\n#! /bin/bash\nif [ $# -lt 1 ]; then\n       echo \"args must > 1\"\n           echo \"Usage bash +x example_2.sh [args...]\"\nfi\n\n\ncase $1 in\n   \"install\")\n       echo \"operation is install\"\n   ;;\n   \n   \"uninstall\")\n       echo \"operation is uninstall\"\n   ;;\n   *)\n       echo \"operation is not support\"\n   ;;\nesac\n\n\nfor ((i=0; i<10; i++))\ndo\n   if ((i==1));then\n       continue\n   fi\n   echo $i\ndone\n\n\nfor i in 'seq 5'; do\n   echo \"loop $i\"\ndone\n```\n* 脚本之间的引用  \n/lib/lsb/init-functions  \n```sh\nfirst.sh\n#! /bin/bash\n\nfunction fun(){\n   echo \"execute first script\"\n}\n\nfile=first\n\nsecond.sh\n#! /bin/bash\n. first.sh  ##引用脚本\necho $file\n```\n\n* 错误处理  \n$?  \nset -o errexit  //遇到报错不会往下执行  \ncommand > file 2>&1 //将stdout和stderr合并后重定向到文件  \n\n* 字典\n```sh\n#! /bin/bash\n\n\nset -o errexit\n\n\n#方式1\nhput(){\n   eval \"hkey_$1\"=\"$2\"\n}\n\n\nhget(){\n   eval echo '${'\"hkey_$1\"'}'\n}\n\n\nhput k1 value1\nhget k1\n\n\n\n\n#方式2\ndeclare -A dic\ndic=([key1]=\"value1\" [key2]=\"value2\" [key3]=\"value3\")\necho ${dic[\"key1\"]}\necho ${!dic[@]} #打印所有的key\necho ${dic[@]} #打印所有的值\n\n\nfor key in ${!dic[@]}\ndo\n   echo $key: ${dic[$key]}\"\"\ndone\n```\n\n\n\n### 调试\n* trap  \nshell脚本执行时产生三个伪信号，可使用trap捕获 ，并输出调试信息   \n```sh\n  信号名              产生原因\n  EXIT               从一个函数中退出或整个脚本执行完毕\n  ERR                从一条命令返回非零状态时（代表命令执行不成功） \n  DEBUG              脚本中每一条命令执行之前\n```\n* tee　　\n* 调试钩子　\n* shell参数  \nman sh 查看  \n-n 只读取， 不执行， 例如 sh -n *.sh  好像只能检查语法是否有问题  \n-x 进入跟踪方式，打印执行的每一条指令  \n输出的默认值$PS4是\"+\"，可以设置环境变量export PS4='+{$LINENO:${FUNCNAME[0]}}';  echo $PS4 \n\n\n\n### 命令　 　\n#### ls     \n```sh\n    ls file | xargs rm  //查看文件并删除\n    ls -l  *.cpp *.c *.h | awk '{sum+=$5} END {print sum}' // 统计文件大小总和\n    ls -lt //按时间排列，时间又近及远\n```\n\n#### cp  \n```sh \n    cp s1/conf/ActivityTime.json ./s[2-3]/conf/ -r  //递归拷贝文件\n```\n\n#### ps  \n```sh\n    ps -aux --sort=lstart    //进程按时间排序 \n```\n#### pstree\n```sh\n    pstree -p | wcl -c  //查看系统线程数\n```\n#### bash\n```sh\n ps aux | grep Cgi | grep cgi | grep sg17|awk '{printf(\"kill -9 %s\\n\", $2);}' | bash \n```\n#### ping \n```sh\n    ping //是否可达\n    ping -l src -c times dst //多ip情况下指定ip，times表示次数   \n```\n#### telnet\n```sh\n    telnet //端口是否开放\n```\n#### bg\n```sh\n    bg  //将任务放置后台\n```\n\n#### fg   \n```sh\n    fg //将任务放置前台\n```\n\n#### jobs\n```sh\n    jobs -l  //列出任务pid\n```\n#### history\n```sh\n    history | grep rm //查看删除文件历史\n    /root/.bash_history //root用户所有历史记录（不同终端）\n```\n#### getconf  \n```sh\n    getconf WORD_BIT //获取cpu字长\n```\n\n#### ldd\n```sh\n    ldd //查看动态库依赖\n```\n#### whereis which locate  \n```sh\n    查看软件安装路径\n```\n\n#### date \n```sh\n   date -d \"00:00:00 2018-06-01\" +%s //通过日期显示时戳\n   date -d @1501570226  //通过时间戳显示日期\n```\n#### netstat  \n```sh\n    netstat -tunlp | grep 8061 查看端口被哪个进程占用\n```\n\n#### gcc\n```sh\n   -I: 第一个寻找头文件目录\n   -L: 第一个寻找库文件目录\n   -l: 寻找动态库或静态库\n   -c: 只编译，不连接\n```\n\n#### objdump  \n```sh\n    objdump -s -d xx.o   //反汇编\n```\n\n#### find\n```sh\n   find . -name \"*.cpp\" | xargs grep -w \"CLog\"                  #全词匹配查找\n   find -name file                                              #查找文件名\n   find -iname file                                             #忽略大小写\n   find  -maxdepth file                                         #最大递归深度\n   find  -mindepth file                                         #对消递归深度\n   find  -not  file                                             #相反匹配\n   find  . -empty                                               #查找空文件\n   find  -name file -exec cmd {} \\;                             #在找到的文件上执行命令\n   find . -type f                                               #查找文件\n   find ~ -size +100M/-100M                                     #查找满足尺寸文件\n   find / -type f -name *.zip -size +100M -exec rm -i {} \\;     #查找删除\n```\n\n#### grep\n```sh\n   grep -v \"match\" file                               #出除含有匹配字符串之外的所有行\n   grep  \"match\" file --color=auto                    #匹配字符串标颜色\n   grep -E \"[1-9]+\" file; egrep \"[1-9]+\" file         #正则匹配\n   grep -o \"match\" file                               #只输出匹配的部分\n   grep -c \"match\" file                               #输出匹配到的行数\n   grep -b \"match\" file                               #匹配字符的偏移量\n   grep -n \"match\" file                               #输出匹配到字符的行数\n   grep -l \"match\" file                               #列出匹配到字符的文件名\n   grep -r \"match\" file                               #递归搜索匹配项\n   grep -i \"MATCH\" file                               #忽略大小写\n   grep -w \"match\" file                               #全词匹配\n   grep -e \"match1\" -e \"match2\" file                  #多重匹配项\n   grep \"match\" --include *.{php,html}                #只在目录中所有的.php和.html文件中递归搜索字符\"main()\"\n   grep \"main()\" . -r --exclude \"README\"              #在搜索结果中排除所有README文件\n   grep 170501686 coins_20180417.log | grep 'change pay log' |grep ',cash=-' |awk -F '[=,]' '{a+=$12} END{print a}'\n   grep -E 'act=new|act=add' equipment_20180705.log | grep 'code=get_world_battle_Kill_rewards' #找出包含 get_world_battle_Kill_rewards 的行，其中act=new 或act=add\n   grep get_default_error_string /* -rFn --binary-files=without-match  #只递归匹配文本文件，不匹配二进制文件中的内容\n\n```\n\n#### awk\n```sh\n   awk '{print $1, $4}' netstat.txt                                                   #打印1,4列\n   awk '{printf \"%-8s %-8s %-8s %-18s %-22s %-15s\\n\",$1,$2,$3,$4,$5,$6}'  netstat.txt #格式化输出\n   awk '$3==0 && $6==\"LISTEN\"' netstat.txt                                            #第三列的值为0 && 第6列的值为LISTEN\n   awk '$3 > 0 {print $0}' netstat.txt                                                #第三列不为0的所有项\n   awk '$3==0 && $6==\"LISTEN\" || NR==1 ' netstat.txt                                  #包括第一行\n   awk '$3==0 && $6==\"LISTEN\" || NR==1 {printf \"%-20s %-20s %s\\n\",$4,$5,$6}' netstat.txt   #加上格式化输出\n   awk 'BEGIN{FS=\":\"}{print $1, $2, $5}' /etc/passwd 或 awk -F: '{print $1, $2, $5}' /etc/passwd  #指定分隔符\n   awk -F'[::]' '{print $1, $2, $5}' /etc/passwd                                 #指定多个分割符\n   awk '$6 ~ /FIN/ || NR==1 {print NR,$4,$5,$6}' OFS=\"\\t\" netstat.txt       #匹配FIN状态\n   awk 'NR!=1{print > $6}' netstat.txt                                                #拆分文件\n   awk '{for(i=1;i<=NF;i++)printf \"%-22s\", $i \"  \";printf\"\\n\"}' netstat.txt    #打印出除开第一行的所有行   \n   grep appid $file | awk -F \"=\" '{print $3}' | sed 's/[\"/>]//g' | sed 's/ //g' #过滤掉\"/>和空格\n\n```\n#### sed  \n```sh\n   sed -i \"s/my/cp/g\" pet.txt                                          #将文件中所有的my替换成cp\n   sed -i \"s/^/#/g\" pet.txt                                            #在每行最前面加#\n   sed -i \"s/$/---/g\" pet.txt                                          #在每行最有面加---\n   sed -i 's/<[^>]*>//g' html.txt                                      #去掉某html中的tags\n   sed -i \"3s/my/your/g\" pets.txt                                      #替换第3行以后的my\n   sed -i \"3,6s/my/your/g\" pets.txt                                    #只替换3到6行的my\n   sed -i 's/s/S/1' my.txt                                             #只替换每一行的第一个s\n   sed -i -e '1,3s/my/your/g' -e '3,$s/This/That/g' my.txt             #1到3行换成your, 3行以后换成That \n   sed -i s/1527696000/1528560000/g ./s*/conf/ActivityTime.json\n```\n#### lsof\n```sh\n    lsof  -p PID  | wc -l  #查看进程打开的文件数量\n    lsof  -p PID  |awk '{print $2}'|sort | uniq -c | awk '{sum += $1} END{print sum}' #查看进程打开的文件数量\n    lsof -i :port  #查看某个端口的连接情况\n    watch \"losf -p PID | wc -l\"  #查看进程打开文件数量的变化情况\n```\n\n#### ip\n```sh\n    ip addr  //查看ip地址（可显示mac地址和网卡名称）\n```\n#### 通配符  \n```sh\n    \"?\"  匹配单个字符串\n    \"*\"  匹配字符串序列\n```\n\n#### 正则　　\n```sh\n    ERE BRE\n    \".\"  任意单个字符\n    \"*\"  匹配任一字符的任意长度\n    \"^\" 以xx开始字符\n    \"$\" 以xx结尾字符\n    \"[]\" 字符集合\n```  \n\n\n### 实战　  \n终端遍历目录导入数据库  \n终端中执行　　\n```sh\nfor i in $(ls sg17_s*); do $(mysql -u root -p $(basename $i .sql) < $i);done\n```\n将所有db.conf 中的密码替换　　　\n```sh\nfind ./ -name db.conf | xargs sed -i 's/password\\ =\\ 1234/password\\ =\\ Ujg5-bc@0520/g'\n```\n\n\n\n","source":"_posts/shell.md","raw":"---\ntitle: shell\ndate: 2020-07-04 19:10:37\ncategories:\n    - Linux\ntags:\n---\n\n### 语法   \n```sh\n#! /bin/bash                                                                    \n                                                                               \nif [ $# -lt 1 ];then                                                            \n   echo \"arg count must > 1\"                                                    \n   echo \"Uage bash -x example_1.sh [args...]\"                                  \n   exit                                                                        \nfi                                                                              \n                                                                               \narg=$1                                                                          \nif [ $arg -gt 10 ];then                                                          \n   echo \"$arg > 10\"                                                            \nelse                                                                            \n   echo \"$arg <= 10\"                                                            \nfi\n```\n* if [[...]] 表示模式匹配   \n```sh\nif [[ $trunk_path = *$dir* ]]; then                     \n    trunk_path=`echo $${trunk_path} | sed \"s/\\/$$dir.*//\"`  \nfi \n```\n\n* 数组，函数传参数，for循环\n```sh\n#! /bin/bash\n\n\nif [ $# -lt 1 ]; then\n   echo \"args must > 1\"\n   echo \"Usage bash +x example_2.sh [args...]\"\nfi\n\n\nargs=$@\nfor arg in $args;\ndo\n   echo $arg\ndone\n\n\nfunction func1(){\n   echo $1 #$1是该函数的第一个参数\n}\n\n\nfunc1 \"hello everybody\" #函数传参\n\n\n#第二种写法\nfunc2(){\n   echo \"bash shell function defination\"\n}\n\n\nfunc2 #调用\n```\n\n```sh\n#! /bin/bash\n\narray=(\"hello\"  \"gg\" 1 \"shit\")\n\necho \"first element is ${array[0]}\"\necho \"second element is ${array[1]}\"\necho \"third element is ${array[2]}\"\necho \"fourth element is ${array[3]}\"\necho \"all element are ${array[@]}\" #所有的元素\necho \"size of array is ${#array[@]}\" #数组的元素个数\n\nfor arg in ${array[@]};\ndo\n   echo $arg\ndone\n```\n* While循环以及其它几种循环、case、表达式expr  \n```sh\n#! /bin/bash\nif [ $# -lt 1 ]; then\n       echo \"args must > 1\"\n           echo \"Usage bash +x example_2.sh [args...]\"\nfi\n\n\ncase $1 in\n   \"install\")\n       echo \"operation is install\"\n   ;;\n   \n   \"uninstall\")\n       echo \"operation is uninstall\"\n   ;;\n   *)\n       echo \"operation is not support\"\n   ;;\nesac\n\n\nfor ((i=0; i<10; i++))\ndo\n   if ((i==1));then\n       continue\n   fi\n   echo $i\ndone\n\n\nfor i in 'seq 5'; do\n   echo \"loop $i\"\ndone\n```\n* 脚本之间的引用  \n/lib/lsb/init-functions  \n```sh\nfirst.sh\n#! /bin/bash\n\nfunction fun(){\n   echo \"execute first script\"\n}\n\nfile=first\n\nsecond.sh\n#! /bin/bash\n. first.sh  ##引用脚本\necho $file\n```\n\n* 错误处理  \n$?  \nset -o errexit  //遇到报错不会往下执行  \ncommand > file 2>&1 //将stdout和stderr合并后重定向到文件  \n\n* 字典\n```sh\n#! /bin/bash\n\n\nset -o errexit\n\n\n#方式1\nhput(){\n   eval \"hkey_$1\"=\"$2\"\n}\n\n\nhget(){\n   eval echo '${'\"hkey_$1\"'}'\n}\n\n\nhput k1 value1\nhget k1\n\n\n\n\n#方式2\ndeclare -A dic\ndic=([key1]=\"value1\" [key2]=\"value2\" [key3]=\"value3\")\necho ${dic[\"key1\"]}\necho ${!dic[@]} #打印所有的key\necho ${dic[@]} #打印所有的值\n\n\nfor key in ${!dic[@]}\ndo\n   echo $key: ${dic[$key]}\"\"\ndone\n```\n\n\n\n### 调试\n* trap  \nshell脚本执行时产生三个伪信号，可使用trap捕获 ，并输出调试信息   \n```sh\n  信号名              产生原因\n  EXIT               从一个函数中退出或整个脚本执行完毕\n  ERR                从一条命令返回非零状态时（代表命令执行不成功） \n  DEBUG              脚本中每一条命令执行之前\n```\n* tee　　\n* 调试钩子　\n* shell参数  \nman sh 查看  \n-n 只读取， 不执行， 例如 sh -n *.sh  好像只能检查语法是否有问题  \n-x 进入跟踪方式，打印执行的每一条指令  \n输出的默认值$PS4是\"+\"，可以设置环境变量export PS4='+{$LINENO:${FUNCNAME[0]}}';  echo $PS4 \n\n\n\n### 命令　 　\n#### ls     \n```sh\n    ls file | xargs rm  //查看文件并删除\n    ls -l  *.cpp *.c *.h | awk '{sum+=$5} END {print sum}' // 统计文件大小总和\n    ls -lt //按时间排列，时间又近及远\n```\n\n#### cp  \n```sh \n    cp s1/conf/ActivityTime.json ./s[2-3]/conf/ -r  //递归拷贝文件\n```\n\n#### ps  \n```sh\n    ps -aux --sort=lstart    //进程按时间排序 \n```\n#### pstree\n```sh\n    pstree -p | wcl -c  //查看系统线程数\n```\n#### bash\n```sh\n ps aux | grep Cgi | grep cgi | grep sg17|awk '{printf(\"kill -9 %s\\n\", $2);}' | bash \n```\n#### ping \n```sh\n    ping //是否可达\n    ping -l src -c times dst //多ip情况下指定ip，times表示次数   \n```\n#### telnet\n```sh\n    telnet //端口是否开放\n```\n#### bg\n```sh\n    bg  //将任务放置后台\n```\n\n#### fg   \n```sh\n    fg //将任务放置前台\n```\n\n#### jobs\n```sh\n    jobs -l  //列出任务pid\n```\n#### history\n```sh\n    history | grep rm //查看删除文件历史\n    /root/.bash_history //root用户所有历史记录（不同终端）\n```\n#### getconf  \n```sh\n    getconf WORD_BIT //获取cpu字长\n```\n\n#### ldd\n```sh\n    ldd //查看动态库依赖\n```\n#### whereis which locate  \n```sh\n    查看软件安装路径\n```\n\n#### date \n```sh\n   date -d \"00:00:00 2018-06-01\" +%s //通过日期显示时戳\n   date -d @1501570226  //通过时间戳显示日期\n```\n#### netstat  \n```sh\n    netstat -tunlp | grep 8061 查看端口被哪个进程占用\n```\n\n#### gcc\n```sh\n   -I: 第一个寻找头文件目录\n   -L: 第一个寻找库文件目录\n   -l: 寻找动态库或静态库\n   -c: 只编译，不连接\n```\n\n#### objdump  \n```sh\n    objdump -s -d xx.o   //反汇编\n```\n\n#### find\n```sh\n   find . -name \"*.cpp\" | xargs grep -w \"CLog\"                  #全词匹配查找\n   find -name file                                              #查找文件名\n   find -iname file                                             #忽略大小写\n   find  -maxdepth file                                         #最大递归深度\n   find  -mindepth file                                         #对消递归深度\n   find  -not  file                                             #相反匹配\n   find  . -empty                                               #查找空文件\n   find  -name file -exec cmd {} \\;                             #在找到的文件上执行命令\n   find . -type f                                               #查找文件\n   find ~ -size +100M/-100M                                     #查找满足尺寸文件\n   find / -type f -name *.zip -size +100M -exec rm -i {} \\;     #查找删除\n```\n\n#### grep\n```sh\n   grep -v \"match\" file                               #出除含有匹配字符串之外的所有行\n   grep  \"match\" file --color=auto                    #匹配字符串标颜色\n   grep -E \"[1-9]+\" file; egrep \"[1-9]+\" file         #正则匹配\n   grep -o \"match\" file                               #只输出匹配的部分\n   grep -c \"match\" file                               #输出匹配到的行数\n   grep -b \"match\" file                               #匹配字符的偏移量\n   grep -n \"match\" file                               #输出匹配到字符的行数\n   grep -l \"match\" file                               #列出匹配到字符的文件名\n   grep -r \"match\" file                               #递归搜索匹配项\n   grep -i \"MATCH\" file                               #忽略大小写\n   grep -w \"match\" file                               #全词匹配\n   grep -e \"match1\" -e \"match2\" file                  #多重匹配项\n   grep \"match\" --include *.{php,html}                #只在目录中所有的.php和.html文件中递归搜索字符\"main()\"\n   grep \"main()\" . -r --exclude \"README\"              #在搜索结果中排除所有README文件\n   grep 170501686 coins_20180417.log | grep 'change pay log' |grep ',cash=-' |awk -F '[=,]' '{a+=$12} END{print a}'\n   grep -E 'act=new|act=add' equipment_20180705.log | grep 'code=get_world_battle_Kill_rewards' #找出包含 get_world_battle_Kill_rewards 的行，其中act=new 或act=add\n   grep get_default_error_string /* -rFn --binary-files=without-match  #只递归匹配文本文件，不匹配二进制文件中的内容\n\n```\n\n#### awk\n```sh\n   awk '{print $1, $4}' netstat.txt                                                   #打印1,4列\n   awk '{printf \"%-8s %-8s %-8s %-18s %-22s %-15s\\n\",$1,$2,$3,$4,$5,$6}'  netstat.txt #格式化输出\n   awk '$3==0 && $6==\"LISTEN\"' netstat.txt                                            #第三列的值为0 && 第6列的值为LISTEN\n   awk '$3 > 0 {print $0}' netstat.txt                                                #第三列不为0的所有项\n   awk '$3==0 && $6==\"LISTEN\" || NR==1 ' netstat.txt                                  #包括第一行\n   awk '$3==0 && $6==\"LISTEN\" || NR==1 {printf \"%-20s %-20s %s\\n\",$4,$5,$6}' netstat.txt   #加上格式化输出\n   awk 'BEGIN{FS=\":\"}{print $1, $2, $5}' /etc/passwd 或 awk -F: '{print $1, $2, $5}' /etc/passwd  #指定分隔符\n   awk -F'[::]' '{print $1, $2, $5}' /etc/passwd                                 #指定多个分割符\n   awk '$6 ~ /FIN/ || NR==1 {print NR,$4,$5,$6}' OFS=\"\\t\" netstat.txt       #匹配FIN状态\n   awk 'NR!=1{print > $6}' netstat.txt                                                #拆分文件\n   awk '{for(i=1;i<=NF;i++)printf \"%-22s\", $i \"  \";printf\"\\n\"}' netstat.txt    #打印出除开第一行的所有行   \n   grep appid $file | awk -F \"=\" '{print $3}' | sed 's/[\"/>]//g' | sed 's/ //g' #过滤掉\"/>和空格\n\n```\n#### sed  \n```sh\n   sed -i \"s/my/cp/g\" pet.txt                                          #将文件中所有的my替换成cp\n   sed -i \"s/^/#/g\" pet.txt                                            #在每行最前面加#\n   sed -i \"s/$/---/g\" pet.txt                                          #在每行最有面加---\n   sed -i 's/<[^>]*>//g' html.txt                                      #去掉某html中的tags\n   sed -i \"3s/my/your/g\" pets.txt                                      #替换第3行以后的my\n   sed -i \"3,6s/my/your/g\" pets.txt                                    #只替换3到6行的my\n   sed -i 's/s/S/1' my.txt                                             #只替换每一行的第一个s\n   sed -i -e '1,3s/my/your/g' -e '3,$s/This/That/g' my.txt             #1到3行换成your, 3行以后换成That \n   sed -i s/1527696000/1528560000/g ./s*/conf/ActivityTime.json\n```\n#### lsof\n```sh\n    lsof  -p PID  | wc -l  #查看进程打开的文件数量\n    lsof  -p PID  |awk '{print $2}'|sort | uniq -c | awk '{sum += $1} END{print sum}' #查看进程打开的文件数量\n    lsof -i :port  #查看某个端口的连接情况\n    watch \"losf -p PID | wc -l\"  #查看进程打开文件数量的变化情况\n```\n\n#### ip\n```sh\n    ip addr  //查看ip地址（可显示mac地址和网卡名称）\n```\n#### 通配符  \n```sh\n    \"?\"  匹配单个字符串\n    \"*\"  匹配字符串序列\n```\n\n#### 正则　　\n```sh\n    ERE BRE\n    \".\"  任意单个字符\n    \"*\"  匹配任一字符的任意长度\n    \"^\" 以xx开始字符\n    \"$\" 以xx结尾字符\n    \"[]\" 字符集合\n```  \n\n\n### 实战　  \n终端遍历目录导入数据库  \n终端中执行　　\n```sh\nfor i in $(ls sg17_s*); do $(mysql -u root -p $(basename $i .sql) < $i);done\n```\n将所有db.conf 中的密码替换　　　\n```sh\nfind ./ -name db.conf | xargs sed -i 's/password\\ =\\ 1234/password\\ =\\ Ujg5-bc@0520/g'\n```\n\n\n\n","slug":"shell","published":1,"updated":"2020-07-04T13:34:07.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vy001154yn29bxbrug","content":"<h3 id=\"语法\">语法</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash                                                                    </span></span><br><span class=\"line\">                                                                               </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ];<span class=\"keyword\">then</span>                                                            </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"arg count must &gt; 1\"</span>                                                    </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Uage bash -x example_1.sh [args...]\"</span>                                  </span><br><span class=\"line\">   <span class=\"built_in\">exit</span>                                                                        </span><br><span class=\"line\"><span class=\"keyword\">fi</span>                                                                              </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">arg=<span class=\"variable\">$1</span>                                                                          </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$arg</span> -gt 10 ];<span class=\"keyword\">then</span>                                                          </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$arg</span> &gt; 10\"</span>                                                            </span><br><span class=\"line\"><span class=\"keyword\">else</span>                                                                            </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$arg</span> &lt;= 10\"</span>                                                            </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>if [[...]] 表示模式匹配<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$trunk_path</span> = *<span class=\"variable\">$dir</span>* ]]; <span class=\"keyword\">then</span>                     </span><br><span class=\"line\">    trunk_path=`<span class=\"built_in\">echo</span> $<span class=\"variable\">$&#123;trunk_path&#125;</span> | sed <span class=\"string\">\"s/\\/$<span class=\"variable\">$dir</span>.*//\"</span>`  </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>数组，函数传参数，for循环 <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"args must &gt; 1\"</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage bash +x example_2.sh [args...]\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">args=<span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> <span class=\"variable\">$args</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$arg</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">func1</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span> <span class=\"comment\">#$1是该函数的第一个参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func1 <span class=\"string\">\"hello everybody\"</span> <span class=\"comment\">#函数传参</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#第二种写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func2</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"bash shell function defination\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func2 <span class=\"comment\">#调用</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">array=(<span class=\"string\">\"hello\"</span>  <span class=\"string\">\"gg\"</span> 1 <span class=\"string\">\"shit\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"first element is <span class=\"variable\">$&#123;array[0]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"second element is <span class=\"variable\">$&#123;array[1]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"third element is <span class=\"variable\">$&#123;array[2]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"fourth element is <span class=\"variable\">$&#123;array[3]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"all element are <span class=\"variable\">$&#123;array[@]&#125;</span>\"</span> <span class=\"comment\">#所有的元素</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"size of array is <span class=\"variable\">$&#123;#array[@]&#125;</span>\"</span> <span class=\"comment\">#数组的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;array[@]&#125;</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$arg</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>While循环以及其它几种循环、case、表达式expr<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"args must &gt; 1\"</span></span><br><span class=\"line\">           <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage bash +x example_2.sh [args...]\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">   <span class=\"string\">\"install\"</span>)</span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"operation is install\"</span></span><br><span class=\"line\">   ;;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"string\">\"uninstall\"</span>)</span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"operation is uninstall\"</span></span><br><span class=\"line\">   ;;</span><br><span class=\"line\">   *)</span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"operation is not support\"</span></span><br><span class=\"line\">   ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=0; i&lt;10; i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((i==1));<span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"built_in\">continue</span></span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">'seq 5'</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"loop <span class=\"variable\">$i</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>脚本之间的引用<br />\n/lib/lsb/init-functions<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first.sh</span><br><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fun</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"execute first script\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">file=first</span><br><span class=\"line\"></span><br><span class=\"line\">second.sh</span><br><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\">. first.sh  <span class=\"comment\">##引用脚本</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$file</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>错误处理<br />\n$?<br />\nset -o errexit //遇到报错不会往下执行<br />\ncommand &gt; file 2&gt;&amp;1 //将stdout和stderr合并后重定向到文件</p></li>\n<li><p>字典 <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hput</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">eval</span> <span class=\"string\">\"hkey_<span class=\"variable\">$1</span>\"</span>=<span class=\"string\">\"<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hget</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">eval</span> <span class=\"built_in\">echo</span> <span class=\"string\">'$&#123;'</span><span class=\"string\">\"hkey_<span class=\"variable\">$1</span>\"</span><span class=\"string\">'&#125;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hput k1 value1</span><br><span class=\"line\">hget k1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A dic</span><br><span class=\"line\">dic=([key1]=<span class=\"string\">\"value1\"</span> [key2]=<span class=\"string\">\"value2\"</span> [key3]=<span class=\"string\">\"value3\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;dic[\"key1\"]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;!dic[@]&#125;</span> <span class=\"comment\">#打印所有的key</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;dic[@]&#125;</span> <span class=\"comment\">#打印所有的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;!dic[@]&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$key</span>: <span class=\"variable\">$&#123;dic[$key]&#125;</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"调试\">调试</h3>\n<ul>\n<li>trap<br />\nshell脚本执行时产生三个伪信号，可使用trap捕获 ，并输出调试信息<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信号名              产生原因</span><br><span class=\"line\">EXIT               从一个函数中退出或整个脚本执行完毕</span><br><span class=\"line\">ERR                从一条命令返回非零状态时（代表命令执行不成功） </span><br><span class=\"line\">DEBUG              脚本中每一条命令执行之前</span><br></pre></td></tr></table></figure></li>\n<li>tee　　</li>\n<li>调试钩子　</li>\n<li>shell参数<br />\nman sh 查看<br />\n-n 只读取， 不执行， 例如 sh -n *.sh 好像只能检查语法是否有问题<br />\n-x 进入跟踪方式，打印执行的每一条指令<br />\n输出的默认值<span class=\"math inline\">\\(PS4是&quot;+&quot;，可以设置环境变量export PS4=&#39;+{\\)</span>LINENO:${FUNCNAME[0]}}'; echo $PS4</li>\n</ul>\n<h3 id=\"命令\">命令　 　</h3>\n<h4 id=\"ls\">ls</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls file | xargs rm  //查看文件并删除</span><br><span class=\"line\">ls -l  *.cpp *.c *.h | awk <span class=\"string\">'&#123;sum+=$5&#125; END &#123;print sum&#125;'</span> // 统计文件大小总和</span><br><span class=\"line\">ls -lt //按时间排列，时间又近及远</span><br></pre></td></tr></table></figure>\n<h4 id=\"cp\">cp</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp s1/conf/ActivityTime.json ./s[2-3]/conf/ -r  //递归拷贝文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"ps\">ps</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux --sort=lstart    //进程按时间排序</span><br></pre></td></tr></table></figure>\n<h4 id=\"pstree\">pstree</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -p | wcl -c  //查看系统线程数</span><br></pre></td></tr></table></figure>\n<h4 id=\"bash\">bash</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep Cgi | grep cgi | grep sg17|awk <span class=\"string\">'&#123;printf(\"kill -9 %s\\n\", $2);&#125;'</span> | bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"ping\">ping</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping //是否可达</span><br><span class=\"line\">ping -l src -c <span class=\"built_in\">times</span> dst //多ip情况下指定ip，<span class=\"built_in\">times</span>表示次数</span><br></pre></td></tr></table></figure>\n<h4 id=\"telnet\">telnet</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet //端口是否开放</span><br></pre></td></tr></table></figure>\n<h4 id=\"bg\">bg</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bg</span>  //将任务放置后台</span><br></pre></td></tr></table></figure>\n<h4 id=\"fg\">fg</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fg</span> //将任务放置前台</span><br></pre></td></tr></table></figure>\n<h4 id=\"jobs\">jobs</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">jobs</span> -l  //列出任务pid</span><br></pre></td></tr></table></figure>\n<h4 id=\"history\">history</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span> | grep rm //查看删除文件历史</span><br><span class=\"line\">/root/.bash_history //root用户所有历史记录（不同终端）</span><br></pre></td></tr></table></figure>\n<h4 id=\"getconf\">getconf</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getconf WORD_BIT //获取cpu字长</span><br></pre></td></tr></table></figure>\n<h4 id=\"ldd\">ldd</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldd //查看动态库依赖</span><br></pre></td></tr></table></figure>\n<h4 id=\"whereis-which-locate\">whereis which locate</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看软件安装路径</span><br></pre></td></tr></table></figure>\n<h4 id=\"date\">date</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -d <span class=\"string\">\"00:00:00 2018-06-01\"</span> +%s //通过日期显示时戳</span><br><span class=\"line\">date -d @1501570226  //通过时间戳显示日期</span><br></pre></td></tr></table></figure>\n<h4 id=\"netstat\">netstat</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tunlp | grep 8061 查看端口被哪个进程占用</span><br></pre></td></tr></table></figure>\n<h4 id=\"gcc\">gcc</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-I: 第一个寻找头文件目录</span><br><span class=\"line\">-L: 第一个寻找库文件目录</span><br><span class=\"line\">-l: 寻找动态库或静态库</span><br><span class=\"line\">-c: 只编译，不连接</span><br></pre></td></tr></table></figure>\n<h4 id=\"objdump\">objdump</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objdump -s -d xx.o   //反汇编</span><br></pre></td></tr></table></figure>\n<h4 id=\"find\">find</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\"*.cpp\"</span> | xargs grep -w <span class=\"string\">\"CLog\"</span>                  <span class=\"comment\">#全词匹配查找</span></span><br><span class=\"line\">find -name file                                              <span class=\"comment\">#查找文件名</span></span><br><span class=\"line\">find -iname file                                             <span class=\"comment\">#忽略大小写</span></span><br><span class=\"line\">find  -maxdepth file                                         <span class=\"comment\">#最大递归深度</span></span><br><span class=\"line\">find  -mindepth file                                         <span class=\"comment\">#对消递归深度</span></span><br><span class=\"line\">find  -not  file                                             <span class=\"comment\">#相反匹配</span></span><br><span class=\"line\">find  . -empty                                               <span class=\"comment\">#查找空文件</span></span><br><span class=\"line\">find  -name file -<span class=\"built_in\">exec</span> cmd &#123;&#125; \\;                             <span class=\"comment\">#在找到的文件上执行命令</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f                                               <span class=\"comment\">#查找文件</span></span><br><span class=\"line\">find ~ -size +100M/-100M                                     <span class=\"comment\">#查找满足尺寸文件</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -name *.zip -size +100M -<span class=\"built_in\">exec</span> rm -i &#123;&#125; \\;     <span class=\"comment\">#查找删除</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"grep\">grep</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -v <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#出除含有匹配字符串之外的所有行</span></span><br><span class=\"line\">grep  <span class=\"string\">\"match\"</span> file --color=auto                    <span class=\"comment\">#匹配字符串标颜色</span></span><br><span class=\"line\">grep -E <span class=\"string\">\"[1-9]+\"</span> file; egrep <span class=\"string\">\"[1-9]+\"</span> file         <span class=\"comment\">#正则匹配</span></span><br><span class=\"line\">grep -o <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#只输出匹配的部分</span></span><br><span class=\"line\">grep -c <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#输出匹配到的行数</span></span><br><span class=\"line\">grep -b <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#匹配字符的偏移量</span></span><br><span class=\"line\">grep -n <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#输出匹配到字符的行数</span></span><br><span class=\"line\">grep -l <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#列出匹配到字符的文件名</span></span><br><span class=\"line\">grep -r <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#递归搜索匹配项</span></span><br><span class=\"line\">grep -i <span class=\"string\">\"MATCH\"</span> file                               <span class=\"comment\">#忽略大小写</span></span><br><span class=\"line\">grep -w <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#全词匹配</span></span><br><span class=\"line\">grep -e <span class=\"string\">\"match1\"</span> -e <span class=\"string\">\"match2\"</span> file                  <span class=\"comment\">#多重匹配项</span></span><br><span class=\"line\">grep <span class=\"string\">\"match\"</span> --include *.&#123;php,html&#125;                <span class=\"comment\">#只在目录中所有的.php和.html文件中递归搜索字符\"main()\"</span></span><br><span class=\"line\">grep <span class=\"string\">\"main()\"</span> . -r --exclude <span class=\"string\">\"README\"</span>              <span class=\"comment\">#在搜索结果中排除所有README文件</span></span><br><span class=\"line\">grep 170501686 coins_20180417.log | grep <span class=\"string\">'change pay log'</span> |grep <span class=\"string\">',cash=-'</span> |awk -F <span class=\"string\">'[=,]'</span> <span class=\"string\">'&#123;a+=$12&#125; END&#123;print a&#125;'</span></span><br><span class=\"line\">grep -E <span class=\"string\">'act=new|act=add'</span> equipment_20180705.log | grep <span class=\"string\">'code=get_world_battle_Kill_rewards'</span> <span class=\"comment\">#找出包含 get_world_battle_Kill_rewards 的行，其中act=new 或act=add</span></span><br><span class=\"line\">grep get_default_error_string /* -rFn --binary-files=without-match  <span class=\"comment\">#只递归匹配文本文件，不匹配二进制文件中的内容</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"awk\">awk</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'&#123;print $1, $4&#125;'</span> netstat.txt                                                   <span class=\"comment\">#打印1,4列</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;printf \"%-8s %-8s %-8s %-18s %-22s %-15s\\n\",$1,$2,$3,$4,$5,$6&#125;'</span>  netstat.txt <span class=\"comment\">#格式化输出</span></span><br><span class=\"line\">awk <span class=\"string\">'$3==0 &amp;&amp; $6==\"LISTEN\"'</span> netstat.txt                                            <span class=\"comment\">#第三列的值为0 &amp;&amp; 第6列的值为LISTEN</span></span><br><span class=\"line\">awk <span class=\"string\">'$3 &gt; 0 &#123;print $0&#125;'</span> netstat.txt                                                <span class=\"comment\">#第三列不为0的所有项</span></span><br><span class=\"line\">awk <span class=\"string\">'$3==0 &amp;&amp; $6==\"LISTEN\" || NR==1 '</span> netstat.txt                                  <span class=\"comment\">#包括第一行</span></span><br><span class=\"line\">awk <span class=\"string\">'$3==0 &amp;&amp; $6==\"LISTEN\" || NR==1 &#123;printf \"%-20s %-20s %s\\n\",$4,$5,$6&#125;'</span> netstat.txt   <span class=\"comment\">#加上格式化输出</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;FS=\":\"&#125;&#123;print $1, $2, $5&#125;'</span> /etc/passwd 或 awk -F: <span class=\"string\">'&#123;print $1, $2, $5&#125;'</span> /etc/passwd  <span class=\"comment\">#指定分隔符</span></span><br><span class=\"line\">awk -F<span class=\"string\">'[::]'</span> <span class=\"string\">'&#123;print $1, $2, $5&#125;'</span> /etc/passwd                                 <span class=\"comment\">#指定多个分割符</span></span><br><span class=\"line\">awk <span class=\"string\">'$6 ~ /FIN/ || NR==1 &#123;print NR,$4,$5,$6&#125;'</span> OFS=<span class=\"string\">\"\\t\"</span> netstat.txt       <span class=\"comment\">#匹配FIN状态</span></span><br><span class=\"line\">awk <span class=\"string\">'NR!=1&#123;print &gt; $6&#125;'</span> netstat.txt                                                <span class=\"comment\">#拆分文件</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;for(i=1;i&lt;=NF;i++)printf \"%-22s\", $i \"  \";printf\"\\n\"&#125;'</span> netstat.txt    <span class=\"comment\">#打印出除开第一行的所有行   </span></span><br><span class=\"line\">grep appid <span class=\"variable\">$file</span> | awk -F <span class=\"string\">\"=\"</span> <span class=\"string\">'&#123;print $3&#125;'</span> | sed <span class=\"string\">'s/[\"/&gt;]//g'</span> | sed <span class=\"string\">'s/ //g'</span> <span class=\"comment\">#过滤掉\"/&gt;和空格</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"sed\">sed</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">\"s/my/cp/g\"</span> pet.txt                                          <span class=\"comment\">#将文件中所有的my替换成cp</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"s/^/#/g\"</span> pet.txt                                            <span class=\"comment\">#在每行最前面加#</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"s/$/---/g\"</span> pet.txt                                          <span class=\"comment\">#在每行最有面加---</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/&lt;[^&gt;]*&gt;//g'</span> html.txt                                      <span class=\"comment\">#去掉某html中的tags</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"3s/my/your/g\"</span> pets.txt                                      <span class=\"comment\">#替换第3行以后的my</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"3,6s/my/your/g\"</span> pets.txt                                    <span class=\"comment\">#只替换3到6行的my</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/s/S/1'</span> my.txt                                             <span class=\"comment\">#只替换每一行的第一个s</span></span><br><span class=\"line\">sed -i -e <span class=\"string\">'1,3s/my/your/g'</span> -e <span class=\"string\">'3,$s/This/That/g'</span> my.txt             <span class=\"comment\">#1到3行换成your, 3行以后换成That </span></span><br><span class=\"line\">sed -i s/1527696000/1528560000/g ./s*/conf/ActivityTime.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"lsof\">lsof</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof  -p PID  | wc -l  <span class=\"comment\">#查看进程打开的文件数量</span></span><br><span class=\"line\">lsof  -p PID  |awk <span class=\"string\">'&#123;print $2&#125;'</span>|sort | uniq -c | awk <span class=\"string\">'&#123;sum += $1&#125; END&#123;print sum&#125;'</span> <span class=\"comment\">#查看进程打开的文件数量</span></span><br><span class=\"line\">lsof -i :port  <span class=\"comment\">#查看某个端口的连接情况</span></span><br><span class=\"line\">watch <span class=\"string\">\"losf -p PID | wc -l\"</span>  <span class=\"comment\">#查看进程打开文件数量的变化情况</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ip\">ip</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr  //查看ip地址（可显示mac地址和网卡名称）</span><br></pre></td></tr></table></figure>\n<h4 id=\"通配符\">通配符</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"?\"</span>  匹配单个字符串</span><br><span class=\"line\"><span class=\"string\">\"*\"</span>  匹配字符串序列</span><br></pre></td></tr></table></figure>\n<h4 id=\"正则\">正则　　</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    ERE BRE</span><br><span class=\"line\">    <span class=\"string\">\".\"</span>  任意单个字符</span><br><span class=\"line\">    <span class=\"string\">\"*\"</span>  匹配任一字符的任意长度</span><br><span class=\"line\">    <span class=\"string\">\"^\"</span> 以xx开始字符</span><br><span class=\"line\">    <span class=\"string\">\"$\"</span> 以xx结尾字符</span><br><span class=\"line\">    <span class=\"string\">\"[]\"</span> 字符集合</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 实战　  </span></span><br><span class=\"line\">终端遍历目录导入数据库  </span><br><span class=\"line\">终端中执行　　</span><br><span class=\"line\">```sh</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(ls sg17_s*); <span class=\"keyword\">do</span> $(mysql -u root -p $(basename <span class=\"variable\">$i</span> .sql) &lt; <span class=\"variable\">$i</span>);<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>将所有db.conf 中的密码替换　　　 <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ./ -name db.conf | xargs sed -i <span class=\"string\">'s/password\\ =\\ 1234/password\\ =\\ Ujg5-bc@0520/g'</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"语法\">语法</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash                                                                    </span></span><br><span class=\"line\">                                                                               </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ];<span class=\"keyword\">then</span>                                                            </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"arg count must &gt; 1\"</span>                                                    </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Uage bash -x example_1.sh [args...]\"</span>                                  </span><br><span class=\"line\">   <span class=\"built_in\">exit</span>                                                                        </span><br><span class=\"line\"><span class=\"keyword\">fi</span>                                                                              </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">arg=<span class=\"variable\">$1</span>                                                                          </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$arg</span> -gt 10 ];<span class=\"keyword\">then</span>                                                          </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$arg</span> &gt; 10\"</span>                                                            </span><br><span class=\"line\"><span class=\"keyword\">else</span>                                                                            </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$arg</span> &lt;= 10\"</span>                                                            </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>if [[...]] 表示模式匹配<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$trunk_path</span> = *<span class=\"variable\">$dir</span>* ]]; <span class=\"keyword\">then</span>                     </span><br><span class=\"line\">    trunk_path=`<span class=\"built_in\">echo</span> $<span class=\"variable\">$&#123;trunk_path&#125;</span> | sed <span class=\"string\">\"s/\\/$<span class=\"variable\">$dir</span>.*//\"</span>`  </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>数组，函数传参数，for循环 <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"args must &gt; 1\"</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage bash +x example_2.sh [args...]\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">args=<span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> <span class=\"variable\">$args</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$arg</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">func1</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span> <span class=\"comment\">#$1是该函数的第一个参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func1 <span class=\"string\">\"hello everybody\"</span> <span class=\"comment\">#函数传参</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#第二种写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func2</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"bash shell function defination\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func2 <span class=\"comment\">#调用</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">array=(<span class=\"string\">\"hello\"</span>  <span class=\"string\">\"gg\"</span> 1 <span class=\"string\">\"shit\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"first element is <span class=\"variable\">$&#123;array[0]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"second element is <span class=\"variable\">$&#123;array[1]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"third element is <span class=\"variable\">$&#123;array[2]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"fourth element is <span class=\"variable\">$&#123;array[3]&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"all element are <span class=\"variable\">$&#123;array[@]&#125;</span>\"</span> <span class=\"comment\">#所有的元素</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"size of array is <span class=\"variable\">$&#123;#array[@]&#125;</span>\"</span> <span class=\"comment\">#数组的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;array[@]&#125;</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$arg</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>While循环以及其它几种循环、case、表达式expr<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"args must &gt; 1\"</span></span><br><span class=\"line\">           <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage bash +x example_2.sh [args...]\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">   <span class=\"string\">\"install\"</span>)</span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"operation is install\"</span></span><br><span class=\"line\">   ;;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"string\">\"uninstall\"</span>)</span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"operation is uninstall\"</span></span><br><span class=\"line\">   ;;</span><br><span class=\"line\">   *)</span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"operation is not support\"</span></span><br><span class=\"line\">   ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=0; i&lt;10; i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((i==1));<span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"built_in\">continue</span></span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">'seq 5'</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"loop <span class=\"variable\">$i</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>脚本之间的引用<br />\n/lib/lsb/init-functions<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first.sh</span><br><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fun</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"execute first script\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">file=first</span><br><span class=\"line\"></span><br><span class=\"line\">second.sh</span><br><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\">. first.sh  <span class=\"comment\">##引用脚本</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$file</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>错误处理<br />\n$?<br />\nset -o errexit //遇到报错不会往下执行<br />\ncommand &gt; file 2&gt;&amp;1 //将stdout和stderr合并后重定向到文件</p></li>\n<li><p>字典 <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -o errexit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hput</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">eval</span> <span class=\"string\">\"hkey_<span class=\"variable\">$1</span>\"</span>=<span class=\"string\">\"<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hget</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">eval</span> <span class=\"built_in\">echo</span> <span class=\"string\">'$&#123;'</span><span class=\"string\">\"hkey_<span class=\"variable\">$1</span>\"</span><span class=\"string\">'&#125;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hput k1 value1</span><br><span class=\"line\">hget k1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A dic</span><br><span class=\"line\">dic=([key1]=<span class=\"string\">\"value1\"</span> [key2]=<span class=\"string\">\"value2\"</span> [key3]=<span class=\"string\">\"value3\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;dic[\"key1\"]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;!dic[@]&#125;</span> <span class=\"comment\">#打印所有的key</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;dic[@]&#125;</span> <span class=\"comment\">#打印所有的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;!dic[@]&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$key</span>: <span class=\"variable\">$&#123;dic[$key]&#125;</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"调试\">调试</h3>\n<ul>\n<li>trap<br />\nshell脚本执行时产生三个伪信号，可使用trap捕获 ，并输出调试信息<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信号名              产生原因</span><br><span class=\"line\">EXIT               从一个函数中退出或整个脚本执行完毕</span><br><span class=\"line\">ERR                从一条命令返回非零状态时（代表命令执行不成功） </span><br><span class=\"line\">DEBUG              脚本中每一条命令执行之前</span><br></pre></td></tr></table></figure></li>\n<li>tee　　</li>\n<li>调试钩子　</li>\n<li>shell参数<br />\nman sh 查看<br />\n-n 只读取， 不执行， 例如 sh -n *.sh 好像只能检查语法是否有问题<br />\n-x 进入跟踪方式，打印执行的每一条指令<br />\n输出的默认值<span class=\"math inline\">\\(PS4是&quot;+&quot;，可以设置环境变量export PS4=&#39;+{\\)</span>LINENO:${FUNCNAME[0]}}'; echo $PS4</li>\n</ul>\n<h3 id=\"命令\">命令　 　</h3>\n<h4 id=\"ls\">ls</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls file | xargs rm  //查看文件并删除</span><br><span class=\"line\">ls -l  *.cpp *.c *.h | awk <span class=\"string\">'&#123;sum+=$5&#125; END &#123;print sum&#125;'</span> // 统计文件大小总和</span><br><span class=\"line\">ls -lt //按时间排列，时间又近及远</span><br></pre></td></tr></table></figure>\n<h4 id=\"cp\">cp</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp s1/conf/ActivityTime.json ./s[2-3]/conf/ -r  //递归拷贝文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"ps\">ps</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux --sort=lstart    //进程按时间排序</span><br></pre></td></tr></table></figure>\n<h4 id=\"pstree\">pstree</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -p | wcl -c  //查看系统线程数</span><br></pre></td></tr></table></figure>\n<h4 id=\"bash\">bash</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep Cgi | grep cgi | grep sg17|awk <span class=\"string\">'&#123;printf(\"kill -9 %s\\n\", $2);&#125;'</span> | bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"ping\">ping</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping //是否可达</span><br><span class=\"line\">ping -l src -c <span class=\"built_in\">times</span> dst //多ip情况下指定ip，<span class=\"built_in\">times</span>表示次数</span><br></pre></td></tr></table></figure>\n<h4 id=\"telnet\">telnet</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet //端口是否开放</span><br></pre></td></tr></table></figure>\n<h4 id=\"bg\">bg</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bg</span>  //将任务放置后台</span><br></pre></td></tr></table></figure>\n<h4 id=\"fg\">fg</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fg</span> //将任务放置前台</span><br></pre></td></tr></table></figure>\n<h4 id=\"jobs\">jobs</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">jobs</span> -l  //列出任务pid</span><br></pre></td></tr></table></figure>\n<h4 id=\"history\">history</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span> | grep rm //查看删除文件历史</span><br><span class=\"line\">/root/.bash_history //root用户所有历史记录（不同终端）</span><br></pre></td></tr></table></figure>\n<h4 id=\"getconf\">getconf</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getconf WORD_BIT //获取cpu字长</span><br></pre></td></tr></table></figure>\n<h4 id=\"ldd\">ldd</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldd //查看动态库依赖</span><br></pre></td></tr></table></figure>\n<h4 id=\"whereis-which-locate\">whereis which locate</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看软件安装路径</span><br></pre></td></tr></table></figure>\n<h4 id=\"date\">date</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -d <span class=\"string\">\"00:00:00 2018-06-01\"</span> +%s //通过日期显示时戳</span><br><span class=\"line\">date -d @1501570226  //通过时间戳显示日期</span><br></pre></td></tr></table></figure>\n<h4 id=\"netstat\">netstat</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tunlp | grep 8061 查看端口被哪个进程占用</span><br></pre></td></tr></table></figure>\n<h4 id=\"gcc\">gcc</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-I: 第一个寻找头文件目录</span><br><span class=\"line\">-L: 第一个寻找库文件目录</span><br><span class=\"line\">-l: 寻找动态库或静态库</span><br><span class=\"line\">-c: 只编译，不连接</span><br></pre></td></tr></table></figure>\n<h4 id=\"objdump\">objdump</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objdump -s -d xx.o   //反汇编</span><br></pre></td></tr></table></figure>\n<h4 id=\"find\">find</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\"*.cpp\"</span> | xargs grep -w <span class=\"string\">\"CLog\"</span>                  <span class=\"comment\">#全词匹配查找</span></span><br><span class=\"line\">find -name file                                              <span class=\"comment\">#查找文件名</span></span><br><span class=\"line\">find -iname file                                             <span class=\"comment\">#忽略大小写</span></span><br><span class=\"line\">find  -maxdepth file                                         <span class=\"comment\">#最大递归深度</span></span><br><span class=\"line\">find  -mindepth file                                         <span class=\"comment\">#对消递归深度</span></span><br><span class=\"line\">find  -not  file                                             <span class=\"comment\">#相反匹配</span></span><br><span class=\"line\">find  . -empty                                               <span class=\"comment\">#查找空文件</span></span><br><span class=\"line\">find  -name file -<span class=\"built_in\">exec</span> cmd &#123;&#125; \\;                             <span class=\"comment\">#在找到的文件上执行命令</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f                                               <span class=\"comment\">#查找文件</span></span><br><span class=\"line\">find ~ -size +100M/-100M                                     <span class=\"comment\">#查找满足尺寸文件</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -name *.zip -size +100M -<span class=\"built_in\">exec</span> rm -i &#123;&#125; \\;     <span class=\"comment\">#查找删除</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"grep\">grep</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -v <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#出除含有匹配字符串之外的所有行</span></span><br><span class=\"line\">grep  <span class=\"string\">\"match\"</span> file --color=auto                    <span class=\"comment\">#匹配字符串标颜色</span></span><br><span class=\"line\">grep -E <span class=\"string\">\"[1-9]+\"</span> file; egrep <span class=\"string\">\"[1-9]+\"</span> file         <span class=\"comment\">#正则匹配</span></span><br><span class=\"line\">grep -o <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#只输出匹配的部分</span></span><br><span class=\"line\">grep -c <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#输出匹配到的行数</span></span><br><span class=\"line\">grep -b <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#匹配字符的偏移量</span></span><br><span class=\"line\">grep -n <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#输出匹配到字符的行数</span></span><br><span class=\"line\">grep -l <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#列出匹配到字符的文件名</span></span><br><span class=\"line\">grep -r <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#递归搜索匹配项</span></span><br><span class=\"line\">grep -i <span class=\"string\">\"MATCH\"</span> file                               <span class=\"comment\">#忽略大小写</span></span><br><span class=\"line\">grep -w <span class=\"string\">\"match\"</span> file                               <span class=\"comment\">#全词匹配</span></span><br><span class=\"line\">grep -e <span class=\"string\">\"match1\"</span> -e <span class=\"string\">\"match2\"</span> file                  <span class=\"comment\">#多重匹配项</span></span><br><span class=\"line\">grep <span class=\"string\">\"match\"</span> --include *.&#123;php,html&#125;                <span class=\"comment\">#只在目录中所有的.php和.html文件中递归搜索字符\"main()\"</span></span><br><span class=\"line\">grep <span class=\"string\">\"main()\"</span> . -r --exclude <span class=\"string\">\"README\"</span>              <span class=\"comment\">#在搜索结果中排除所有README文件</span></span><br><span class=\"line\">grep 170501686 coins_20180417.log | grep <span class=\"string\">'change pay log'</span> |grep <span class=\"string\">',cash=-'</span> |awk -F <span class=\"string\">'[=,]'</span> <span class=\"string\">'&#123;a+=$12&#125; END&#123;print a&#125;'</span></span><br><span class=\"line\">grep -E <span class=\"string\">'act=new|act=add'</span> equipment_20180705.log | grep <span class=\"string\">'code=get_world_battle_Kill_rewards'</span> <span class=\"comment\">#找出包含 get_world_battle_Kill_rewards 的行，其中act=new 或act=add</span></span><br><span class=\"line\">grep get_default_error_string /* -rFn --binary-files=without-match  <span class=\"comment\">#只递归匹配文本文件，不匹配二进制文件中的内容</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"awk\">awk</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'&#123;print $1, $4&#125;'</span> netstat.txt                                                   <span class=\"comment\">#打印1,4列</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;printf \"%-8s %-8s %-8s %-18s %-22s %-15s\\n\",$1,$2,$3,$4,$5,$6&#125;'</span>  netstat.txt <span class=\"comment\">#格式化输出</span></span><br><span class=\"line\">awk <span class=\"string\">'$3==0 &amp;&amp; $6==\"LISTEN\"'</span> netstat.txt                                            <span class=\"comment\">#第三列的值为0 &amp;&amp; 第6列的值为LISTEN</span></span><br><span class=\"line\">awk <span class=\"string\">'$3 &gt; 0 &#123;print $0&#125;'</span> netstat.txt                                                <span class=\"comment\">#第三列不为0的所有项</span></span><br><span class=\"line\">awk <span class=\"string\">'$3==0 &amp;&amp; $6==\"LISTEN\" || NR==1 '</span> netstat.txt                                  <span class=\"comment\">#包括第一行</span></span><br><span class=\"line\">awk <span class=\"string\">'$3==0 &amp;&amp; $6==\"LISTEN\" || NR==1 &#123;printf \"%-20s %-20s %s\\n\",$4,$5,$6&#125;'</span> netstat.txt   <span class=\"comment\">#加上格式化输出</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;FS=\":\"&#125;&#123;print $1, $2, $5&#125;'</span> /etc/passwd 或 awk -F: <span class=\"string\">'&#123;print $1, $2, $5&#125;'</span> /etc/passwd  <span class=\"comment\">#指定分隔符</span></span><br><span class=\"line\">awk -F<span class=\"string\">'[::]'</span> <span class=\"string\">'&#123;print $1, $2, $5&#125;'</span> /etc/passwd                                 <span class=\"comment\">#指定多个分割符</span></span><br><span class=\"line\">awk <span class=\"string\">'$6 ~ /FIN/ || NR==1 &#123;print NR,$4,$5,$6&#125;'</span> OFS=<span class=\"string\">\"\\t\"</span> netstat.txt       <span class=\"comment\">#匹配FIN状态</span></span><br><span class=\"line\">awk <span class=\"string\">'NR!=1&#123;print &gt; $6&#125;'</span> netstat.txt                                                <span class=\"comment\">#拆分文件</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;for(i=1;i&lt;=NF;i++)printf \"%-22s\", $i \"  \";printf\"\\n\"&#125;'</span> netstat.txt    <span class=\"comment\">#打印出除开第一行的所有行   </span></span><br><span class=\"line\">grep appid <span class=\"variable\">$file</span> | awk -F <span class=\"string\">\"=\"</span> <span class=\"string\">'&#123;print $3&#125;'</span> | sed <span class=\"string\">'s/[\"/&gt;]//g'</span> | sed <span class=\"string\">'s/ //g'</span> <span class=\"comment\">#过滤掉\"/&gt;和空格</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"sed\">sed</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">\"s/my/cp/g\"</span> pet.txt                                          <span class=\"comment\">#将文件中所有的my替换成cp</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"s/^/#/g\"</span> pet.txt                                            <span class=\"comment\">#在每行最前面加#</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"s/$/---/g\"</span> pet.txt                                          <span class=\"comment\">#在每行最有面加---</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/&lt;[^&gt;]*&gt;//g'</span> html.txt                                      <span class=\"comment\">#去掉某html中的tags</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"3s/my/your/g\"</span> pets.txt                                      <span class=\"comment\">#替换第3行以后的my</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"3,6s/my/your/g\"</span> pets.txt                                    <span class=\"comment\">#只替换3到6行的my</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/s/S/1'</span> my.txt                                             <span class=\"comment\">#只替换每一行的第一个s</span></span><br><span class=\"line\">sed -i -e <span class=\"string\">'1,3s/my/your/g'</span> -e <span class=\"string\">'3,$s/This/That/g'</span> my.txt             <span class=\"comment\">#1到3行换成your, 3行以后换成That </span></span><br><span class=\"line\">sed -i s/1527696000/1528560000/g ./s*/conf/ActivityTime.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"lsof\">lsof</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof  -p PID  | wc -l  <span class=\"comment\">#查看进程打开的文件数量</span></span><br><span class=\"line\">lsof  -p PID  |awk <span class=\"string\">'&#123;print $2&#125;'</span>|sort | uniq -c | awk <span class=\"string\">'&#123;sum += $1&#125; END&#123;print sum&#125;'</span> <span class=\"comment\">#查看进程打开的文件数量</span></span><br><span class=\"line\">lsof -i :port  <span class=\"comment\">#查看某个端口的连接情况</span></span><br><span class=\"line\">watch <span class=\"string\">\"losf -p PID | wc -l\"</span>  <span class=\"comment\">#查看进程打开文件数量的变化情况</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ip\">ip</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr  //查看ip地址（可显示mac地址和网卡名称）</span><br></pre></td></tr></table></figure>\n<h4 id=\"通配符\">通配符</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"?\"</span>  匹配单个字符串</span><br><span class=\"line\"><span class=\"string\">\"*\"</span>  匹配字符串序列</span><br></pre></td></tr></table></figure>\n<h4 id=\"正则\">正则　　</h4>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    ERE BRE</span><br><span class=\"line\">    <span class=\"string\">\".\"</span>  任意单个字符</span><br><span class=\"line\">    <span class=\"string\">\"*\"</span>  匹配任一字符的任意长度</span><br><span class=\"line\">    <span class=\"string\">\"^\"</span> 以xx开始字符</span><br><span class=\"line\">    <span class=\"string\">\"$\"</span> 以xx结尾字符</span><br><span class=\"line\">    <span class=\"string\">\"[]\"</span> 字符集合</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 实战　  </span></span><br><span class=\"line\">终端遍历目录导入数据库  </span><br><span class=\"line\">终端中执行　　</span><br><span class=\"line\">```sh</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(ls sg17_s*); <span class=\"keyword\">do</span> $(mysql -u root -p $(basename <span class=\"variable\">$i</span> .sql) &lt; <span class=\"variable\">$i</span>);<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>将所有db.conf 中的密码替换　　　 <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ./ -name db.conf | xargs sed -i <span class=\"string\">'s/password\\ =\\ 1234/password\\ =\\ Ujg5-bc@0520/g'</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"微服务实战","date":"2020-11-14T10:43:00.000Z","_content":"\n<!-- more -->\n微服务实战\n\n### PHP电商单体应用准备　\n\n#### 基于 Laravel 开源项目 Laracom 快速构建在线商城系统\n##### 1. 环境准备　\n开始之前，需要确保本地具备以下软件:\n* PHP 7.1+\n* Composer\n* Git\n\n##### 2. 安装Homestead \n1. 安装vagrant\n直接去官网下载:\nhttps://www.vagrantup.com/downloads\n\n2. 将 Homestead Vagrant 盒子 laravel/homesterad 添加到 Vagrant 中\n```shell\n\tvagrant box add laravel/homestead\n```\n  选择３\n  <img src=\"https://i.loli.net/2020/10/25/Bh8J2wVa6ZErOy7.png\"/>\n\n3. 克隆Homestead，克隆完成后，你需要检查 Homestead 的版本标签，因为 master 分支不会总是稳定版本，你可以在 [GitHub Release Page](https://github.com/laravel/homestead/releases) 查找到最新稳定版本然后在本地将其检出\n```shell\n\tcd ~/Homestead\n\tgit checkout v11.3.0\n```\n\n4. 执行初始化脚本\n```shell\n\tbash init.sh\n```\n5. 配置 Homestead\n```shell\n\tcd ~/Homestead\n\tcp Homestead.yaml.example Homestead.yaml\n\t\n\t#修改配置如下\n\tip: \"192.168.10.10\"\n    memory: 2048\n    cpus: 2\n    provider: virtualbox\n\n    authorize: ~/.ssh/id_rsa.pub\n\n    keys:\n        - ~/.ssh/id_rsa\n\n    folders:\n        - map: /home/cp/data/laracom\n          to: /home/vagrant/laracom\n          type: \"rsync\"\n          options:\n              rsync__args: [\"--verbose\", \"--archive\", \"--delete\", \"-zz\"]\n              rsync__exclude: [\"node_modules\"]\n\n    sites:\n        - map: laracom.test\n          to: /home/vagrant/laracom/public\n\n    databases:\n        - laracom\n\n    features:\n        - mariadb: false\n        - ohmyzsh: false\n        - webdriver: false\n        - backup: true\n\n    # ports:\n    #     - send: 50000\n    #       to: 5000\n    #     - send: 7777\n    #       to: 777\n    #       protocol: udp\n```\n6. 安装virtualbox  \n\n```shell\n   sudo apt install  virtualbox\n```\n##### 安装Laracom\n1. 安装Composer\n```shell\n\t\n\tcurl -sS https://getcomposer.org/installer | php\n\tmv composer.phar /usr/local/bin/composer\n```\n2. 创建Laracom \n```shell\n\tcomposer create-project jsdecena/laracom --prefer-dist  --ignore  -platform-reqs\n```\n3. 进入Laracom根目录，修改环境配置文件.env\n```shell\n\t#注意是laracom根目录\n\tcd ~/laracom\n\t\n\t＃.env文件中修改如下\n    APP_URL=http://laracom.test\n\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=laracom\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\n4. 安装前端依赖并编译前端资源\n```shell\n\tnpm install\n\tnpm run dev\n```\n5. 配置Homestead\n　参考2.5中的配置\n\n6. 重启虚拟机\n```shell\n\tvagrant reload --provision\n```\n\n7. 登录虚拟机, 进入项目根目录运行数据库迁移和填充命令\n```shell\n\tvagrant ssh\n    cd /home/vagrant/laracom\n    composer install\n    php artisan migrate --seed\n```\n　执行数据库迁移时如果.env中配置的数据库没有创建(上面的配置数据库为laracom)要自行创建\n　```sql\n\tcreate database laracom\n　```\n8. 生成文件上传目录软链接\n```shell\n\tphp artisan storage:link\n```\n\n9. 访问构建的网页\n　　在浏览器中通过 http://laracom.test 访问\n\n参考:   \n  [重量级开发环境：Homestead](https://xueyuanjun.com/post/19915.html)  \n  [基于 Laravel 开源项目 Laracom 快速构建在线商城系统](https://xueyuanjun.com/post/20000)\n\n  ","source":"_posts/微服务实战.md","raw":"---\ntitle: 微服务实战\ndate: 2020-11-14 18:43:00\ntags:\ncategories:\n    - 微服务\n---\n\n<!-- more -->\n微服务实战\n\n### PHP电商单体应用准备　\n\n#### 基于 Laravel 开源项目 Laracom 快速构建在线商城系统\n##### 1. 环境准备　\n开始之前，需要确保本地具备以下软件:\n* PHP 7.1+\n* Composer\n* Git\n\n##### 2. 安装Homestead \n1. 安装vagrant\n直接去官网下载:\nhttps://www.vagrantup.com/downloads\n\n2. 将 Homestead Vagrant 盒子 laravel/homesterad 添加到 Vagrant 中\n```shell\n\tvagrant box add laravel/homestead\n```\n  选择３\n  <img src=\"https://i.loli.net/2020/10/25/Bh8J2wVa6ZErOy7.png\"/>\n\n3. 克隆Homestead，克隆完成后，你需要检查 Homestead 的版本标签，因为 master 分支不会总是稳定版本，你可以在 [GitHub Release Page](https://github.com/laravel/homestead/releases) 查找到最新稳定版本然后在本地将其检出\n```shell\n\tcd ~/Homestead\n\tgit checkout v11.3.0\n```\n\n4. 执行初始化脚本\n```shell\n\tbash init.sh\n```\n5. 配置 Homestead\n```shell\n\tcd ~/Homestead\n\tcp Homestead.yaml.example Homestead.yaml\n\t\n\t#修改配置如下\n\tip: \"192.168.10.10\"\n    memory: 2048\n    cpus: 2\n    provider: virtualbox\n\n    authorize: ~/.ssh/id_rsa.pub\n\n    keys:\n        - ~/.ssh/id_rsa\n\n    folders:\n        - map: /home/cp/data/laracom\n          to: /home/vagrant/laracom\n          type: \"rsync\"\n          options:\n              rsync__args: [\"--verbose\", \"--archive\", \"--delete\", \"-zz\"]\n              rsync__exclude: [\"node_modules\"]\n\n    sites:\n        - map: laracom.test\n          to: /home/vagrant/laracom/public\n\n    databases:\n        - laracom\n\n    features:\n        - mariadb: false\n        - ohmyzsh: false\n        - webdriver: false\n        - backup: true\n\n    # ports:\n    #     - send: 50000\n    #       to: 5000\n    #     - send: 7777\n    #       to: 777\n    #       protocol: udp\n```\n6. 安装virtualbox  \n\n```shell\n   sudo apt install  virtualbox\n```\n##### 安装Laracom\n1. 安装Composer\n```shell\n\t\n\tcurl -sS https://getcomposer.org/installer | php\n\tmv composer.phar /usr/local/bin/composer\n```\n2. 创建Laracom \n```shell\n\tcomposer create-project jsdecena/laracom --prefer-dist  --ignore  -platform-reqs\n```\n3. 进入Laracom根目录，修改环境配置文件.env\n```shell\n\t#注意是laracom根目录\n\tcd ~/laracom\n\t\n\t＃.env文件中修改如下\n    APP_URL=http://laracom.test\n\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=laracom\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\n4. 安装前端依赖并编译前端资源\n```shell\n\tnpm install\n\tnpm run dev\n```\n5. 配置Homestead\n　参考2.5中的配置\n\n6. 重启虚拟机\n```shell\n\tvagrant reload --provision\n```\n\n7. 登录虚拟机, 进入项目根目录运行数据库迁移和填充命令\n```shell\n\tvagrant ssh\n    cd /home/vagrant/laracom\n    composer install\n    php artisan migrate --seed\n```\n　执行数据库迁移时如果.env中配置的数据库没有创建(上面的配置数据库为laracom)要自行创建\n　```sql\n\tcreate database laracom\n　```\n8. 生成文件上传目录软链接\n```shell\n\tphp artisan storage:link\n```\n\n9. 访问构建的网页\n　　在浏览器中通过 http://laracom.test 访问\n\n参考:   \n  [重量级开发环境：Homestead](https://xueyuanjun.com/post/19915.html)  \n  [基于 Laravel 开源项目 Laracom 快速构建在线商城系统](https://xueyuanjun.com/post/20000)\n\n  ","slug":"微服务实战","published":1,"updated":"2020-11-14T14:40:23.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4vz001554ynfyz3hk1a","content":"<a id=\"more\"></a>\n<p>微服务实战</p>\n<h3 id=\"php电商单体应用准备\">PHP电商单体应用准备　</h3>\n<h4 id=\"基于-laravel-开源项目-laracom-快速构建在线商城系统\">基于 Laravel 开源项目 Laracom 快速构建在线商城系统</h4>\n<h5 id=\"环境准备\">1. 环境准备　</h5>\n<p>开始之前，需要确保本地具备以下软件: * PHP 7.1+ * Composer * Git</p>\n<h5 id=\"安装homestead\">2. 安装Homestead</h5>\n<ol type=\"1\">\n<li><p>安装vagrant 直接去官网下载: https://www.vagrantup.com/downloads</p></li>\n<li><p>将 Homestead Vagrant 盒子 laravel/homesterad 添加到 Vagrant 中 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure> 选择３ <img src=\"https://i.loli.net/2020/10/25/Bh8J2wVa6ZErOy7.png\"/></p></li>\n<li><p>克隆Homestead，克隆完成后，你需要检查 Homestead 的版本标签，因为 master 分支不会总是稳定版本，你可以在 <a href=\"https://github.com/laravel/homestead/releases\" target=\"_blank\" rel=\"noopener\">GitHub Release Page</a> 查找到最新稳定版本然后在本地将其检出 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead</span><br><span class=\"line\">git checkout v11.3.0</span><br></pre></td></tr></table></figure></p></li>\n<li><p>执行初始化脚本 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash init.sh</span><br></pre></td></tr></table></figure></p></li>\n<li><p>配置 Homestead <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead</span><br><span class=\"line\">cp Homestead.yaml.example Homestead.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置如下</span></span><br><span class=\"line\">ip: \"192.168.10.10\"</span><br><span class=\"line\">   memory: 2048</span><br><span class=\"line\">   cpus: 2</span><br><span class=\"line\">   provider: virtualbox</span><br><span class=\"line\"></span><br><span class=\"line\">   authorize: ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">   keys:</span><br><span class=\"line\">       - ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">   folders:</span><br><span class=\"line\">       - map: /home/cp/data/laracom</span><br><span class=\"line\">         to: /home/vagrant/laracom</span><br><span class=\"line\">         type: \"rsync\"</span><br><span class=\"line\">         options:</span><br><span class=\"line\">             rsync__args: [\"--verbose\", \"--archive\", \"--delete\", \"-zz\"]</span><br><span class=\"line\">             rsync__exclude: [\"node_modules\"]</span><br><span class=\"line\"></span><br><span class=\"line\">   sites:</span><br><span class=\"line\">       - map: laracom.test</span><br><span class=\"line\">         to: /home/vagrant/laracom/public</span><br><span class=\"line\"></span><br><span class=\"line\">   databases:</span><br><span class=\"line\">       - laracom</span><br><span class=\"line\"></span><br><span class=\"line\">   features:</span><br><span class=\"line\">       - mariadb: false</span><br><span class=\"line\">       - ohmyzsh: false</span><br><span class=\"line\">       - webdriver: false</span><br><span class=\"line\">       - backup: true</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> ports:</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">     - send: 50000</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">       to: 5000</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">     - send: 7777</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">       to: 777</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">       protocol: udp</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>安装virtualbox</p></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install  virtualbox</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装laracom\">安装Laracom</h5>\n<ol type=\"1\">\n<li><p>安装Composer <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">curl -sS https://getcomposer.org/installer | php</span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure></p></li>\n<li><p>创建Laracom <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project jsdecena/laracom --prefer-dist  --ignore  -platform-reqs</span><br></pre></td></tr></table></figure></p></li>\n<li><p>进入Laracom根目录，修改环境配置文件.env <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意是laracom根目录</span></span><br><span class=\"line\">cd ~/laracom</span><br><span class=\"line\"></span><br><span class=\"line\">＃.env文件中修改如下</span><br><span class=\"line\">   APP_URL=http://laracom.test</span><br><span class=\"line\"></span><br><span class=\"line\">   DB_CONNECTION=mysql</span><br><span class=\"line\">   DB_HOST=127.0.0.1</span><br><span class=\"line\">   DB_PORT=3306</span><br><span class=\"line\">   DB_DATABASE=laracom</span><br><span class=\"line\">   DB_USERNAME=homestead</span><br><span class=\"line\">   DB_PASSWORD=secret</span><br></pre></td></tr></table></figure></p></li>\n<li><p>安装前端依赖并编译前端资源 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p></li>\n<li><p>配置Homestead 　参考2.5中的配置</p></li>\n<li><p>重启虚拟机 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant reload --provision</span><br></pre></td></tr></table></figure></p></li>\n<li><p>登录虚拟机, 进入项目根目录运行数据库迁移和填充命令 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant ssh</span><br><span class=\"line\">   cd /home/vagrant/laracom</span><br><span class=\"line\">   composer install</span><br><span class=\"line\">   php artisan migrate --seed</span><br></pre></td></tr></table></figure> 　执行数据库迁移时如果.env中配置的数据库没有创建(上面的配置数据库为laracom)要自行创建 　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> laracom</span><br></pre></td></tr></table></figure></p></li>\n<li><p>生成文件上传目录软链接 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan storage:link</span><br></pre></td></tr></table></figure></p></li>\n<li><p>访问构建的网页 　　在浏览器中通过 http://laracom.test 访问</p></li>\n</ol>\n<p>参考:<br />\n<a href=\"https://xueyuanjun.com/post/19915.html\" target=\"_blank\" rel=\"noopener\">重量级开发环境：Homestead</a><br />\n<a href=\"https://xueyuanjun.com/post/20000\" target=\"_blank\" rel=\"noopener\">基于 Laravel 开源项目 Laracom 快速构建在线商城系统</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>微服务实战</p>\n<h3 id=\"php电商单体应用准备\">PHP电商单体应用准备　</h3>\n<h4 id=\"基于-laravel-开源项目-laracom-快速构建在线商城系统\">基于 Laravel 开源项目 Laracom 快速构建在线商城系统</h4>\n<h5 id=\"环境准备\">1. 环境准备　</h5>\n<p>开始之前，需要确保本地具备以下软件: * PHP 7.1+ * Composer * Git</p>\n<h5 id=\"安装homestead\">2. 安装Homestead</h5>\n<ol type=\"1\">\n<li><p>安装vagrant 直接去官网下载: https://www.vagrantup.com/downloads</p></li>\n<li><p>将 Homestead Vagrant 盒子 laravel/homesterad 添加到 Vagrant 中 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure> 选择３ <img src=\"https://i.loli.net/2020/10/25/Bh8J2wVa6ZErOy7.png\"/></p></li>\n<li><p>克隆Homestead，克隆完成后，你需要检查 Homestead 的版本标签，因为 master 分支不会总是稳定版本，你可以在 <a href=\"https://github.com/laravel/homestead/releases\" target=\"_blank\" rel=\"noopener\">GitHub Release Page</a> 查找到最新稳定版本然后在本地将其检出 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead</span><br><span class=\"line\">git checkout v11.3.0</span><br></pre></td></tr></table></figure></p></li>\n<li><p>执行初始化脚本 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash init.sh</span><br></pre></td></tr></table></figure></p></li>\n<li><p>配置 Homestead <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead</span><br><span class=\"line\">cp Homestead.yaml.example Homestead.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置如下</span></span><br><span class=\"line\">ip: \"192.168.10.10\"</span><br><span class=\"line\">   memory: 2048</span><br><span class=\"line\">   cpus: 2</span><br><span class=\"line\">   provider: virtualbox</span><br><span class=\"line\"></span><br><span class=\"line\">   authorize: ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">   keys:</span><br><span class=\"line\">       - ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">   folders:</span><br><span class=\"line\">       - map: /home/cp/data/laracom</span><br><span class=\"line\">         to: /home/vagrant/laracom</span><br><span class=\"line\">         type: \"rsync\"</span><br><span class=\"line\">         options:</span><br><span class=\"line\">             rsync__args: [\"--verbose\", \"--archive\", \"--delete\", \"-zz\"]</span><br><span class=\"line\">             rsync__exclude: [\"node_modules\"]</span><br><span class=\"line\"></span><br><span class=\"line\">   sites:</span><br><span class=\"line\">       - map: laracom.test</span><br><span class=\"line\">         to: /home/vagrant/laracom/public</span><br><span class=\"line\"></span><br><span class=\"line\">   databases:</span><br><span class=\"line\">       - laracom</span><br><span class=\"line\"></span><br><span class=\"line\">   features:</span><br><span class=\"line\">       - mariadb: false</span><br><span class=\"line\">       - ohmyzsh: false</span><br><span class=\"line\">       - webdriver: false</span><br><span class=\"line\">       - backup: true</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> ports:</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">     - send: 50000</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">       to: 5000</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">     - send: 7777</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">       to: 777</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">       protocol: udp</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>安装virtualbox</p></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install  virtualbox</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装laracom\">安装Laracom</h5>\n<ol type=\"1\">\n<li><p>安装Composer <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">curl -sS https://getcomposer.org/installer | php</span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure></p></li>\n<li><p>创建Laracom <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project jsdecena/laracom --prefer-dist  --ignore  -platform-reqs</span><br></pre></td></tr></table></figure></p></li>\n<li><p>进入Laracom根目录，修改环境配置文件.env <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意是laracom根目录</span></span><br><span class=\"line\">cd ~/laracom</span><br><span class=\"line\"></span><br><span class=\"line\">＃.env文件中修改如下</span><br><span class=\"line\">   APP_URL=http://laracom.test</span><br><span class=\"line\"></span><br><span class=\"line\">   DB_CONNECTION=mysql</span><br><span class=\"line\">   DB_HOST=127.0.0.1</span><br><span class=\"line\">   DB_PORT=3306</span><br><span class=\"line\">   DB_DATABASE=laracom</span><br><span class=\"line\">   DB_USERNAME=homestead</span><br><span class=\"line\">   DB_PASSWORD=secret</span><br></pre></td></tr></table></figure></p></li>\n<li><p>安装前端依赖并编译前端资源 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p></li>\n<li><p>配置Homestead 　参考2.5中的配置</p></li>\n<li><p>重启虚拟机 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant reload --provision</span><br></pre></td></tr></table></figure></p></li>\n<li><p>登录虚拟机, 进入项目根目录运行数据库迁移和填充命令 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant ssh</span><br><span class=\"line\">   cd /home/vagrant/laracom</span><br><span class=\"line\">   composer install</span><br><span class=\"line\">   php artisan migrate --seed</span><br></pre></td></tr></table></figure> 　执行数据库迁移时如果.env中配置的数据库没有创建(上面的配置数据库为laracom)要自行创建 　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> laracom</span><br></pre></td></tr></table></figure></p></li>\n<li><p>生成文件上传目录软链接 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan storage:link</span><br></pre></td></tr></table></figure></p></li>\n<li><p>访问构建的网页 　　在浏览器中通过 http://laracom.test 访问</p></li>\n</ol>\n<p>参考:<br />\n<a href=\"https://xueyuanjun.com/post/19915.html\" target=\"_blank\" rel=\"noopener\">重量级开发环境：Homestead</a><br />\n<a href=\"https://xueyuanjun.com/post/20000\" target=\"_blank\" rel=\"noopener\">基于 Laravel 开源项目 Laracom 快速构建在线商城系统</a></p>"},{"title":"秒杀系统设计","date":"2020-07-29T11:49:21.000Z","_content":"\n### 需求原型设计\n\n主要设计页面(墨刀原型设计工具)\n\n* 前台用户登录页面，商品展示页面，抢购结果页面 \n* 后台订单管理页面 \n\n\n### 系统架构设计  \n\n* 前端页面需要承载大流量\n* 在大并发状态下要解决超卖问题\n* 后端接口需要满足横向扩展\n![project_seckill](/images/project_seckill_2020073001.png)\n\n\n### RabbitMQ\n* 定义和特征  \nRabbitMQ是面向消息的中间件，用于组件之间的解耦，主要体现在消息的发送者和消费者之间无强依赖关系  \nRabbitMQ特点，高可用, 扩展性, 多语言客户端，管理界面等 \n主要使用场景，流量削峰，异步处理，应用解耦 \n* 管理命令介绍　\n```\nrabbtmq-plugins list  //查看插件\nrabbitmq-plugins enable rabbitmq_management  //安装管理界面\nrabbitmq-plugins disable rabbitmq_management //卸载管理界面　\nrabbitmqctl list_users  //列出已创建的用户\nrabbitmqctl set_user_tags　colin administrator　//设置用户和密码\nrabbitmqctl set_user_tags　colin administrator　//设置角色\n```\n* 核心概念\nVirtualHost\nConnection\nExchange\nChannel\nQueue\nBinding \n\n\n*常用工作模式　\n1. Simple模式　\n![project_seckill02](/images/project_seckill_2020073002.png)  \n\n2. Work, 工作模式\n　一个消息只能被一个消费者获取　\n![project_seckill_2020073101](/images/project_seckill_2020073101.png)\n\n3. Publish/Subscribe 订阅模式\n   消息被路由投递给多个队列，一个消息被多个消费者获取\n![project_seckill_2020080201](/images/project_seckill_2020080201.png)\n\n4. Routing, 路由模式　\n一个消息被多个消费者获取，并且消息的目标队列可被生产者指定\n![project_seckill_2020080202](/images/project_seckill_2020080202.png)\n\n\n5. Topic模式\n用BindingKey 以通配符， (#：一个或多个词，*：一个词)的方式指定\n![project_seckill_2020080203](/images/project_seckill_2020080203.png)\n\n\n6. RPC模式\n\n### 后台功能开发　　\n* 商品模型设计开发　　\n* 商品增删改查功能开发\n* 后台商品管理页面　\n\n\n","source":"_posts/秒杀系统设计.md","raw":"---\ntitle: 秒杀系统设计\ndate: 2020-07-29 19:49:21\ntags: go\ncategories:\n    - project\n---\n\n### 需求原型设计\n\n主要设计页面(墨刀原型设计工具)\n\n* 前台用户登录页面，商品展示页面，抢购结果页面 \n* 后台订单管理页面 \n\n\n### 系统架构设计  \n\n* 前端页面需要承载大流量\n* 在大并发状态下要解决超卖问题\n* 后端接口需要满足横向扩展\n![project_seckill](/images/project_seckill_2020073001.png)\n\n\n### RabbitMQ\n* 定义和特征  \nRabbitMQ是面向消息的中间件，用于组件之间的解耦，主要体现在消息的发送者和消费者之间无强依赖关系  \nRabbitMQ特点，高可用, 扩展性, 多语言客户端，管理界面等 \n主要使用场景，流量削峰，异步处理，应用解耦 \n* 管理命令介绍　\n```\nrabbtmq-plugins list  //查看插件\nrabbitmq-plugins enable rabbitmq_management  //安装管理界面\nrabbitmq-plugins disable rabbitmq_management //卸载管理界面　\nrabbitmqctl list_users  //列出已创建的用户\nrabbitmqctl set_user_tags　colin administrator　//设置用户和密码\nrabbitmqctl set_user_tags　colin administrator　//设置角色\n```\n* 核心概念\nVirtualHost\nConnection\nExchange\nChannel\nQueue\nBinding \n\n\n*常用工作模式　\n1. Simple模式　\n![project_seckill02](/images/project_seckill_2020073002.png)  \n\n2. Work, 工作模式\n　一个消息只能被一个消费者获取　\n![project_seckill_2020073101](/images/project_seckill_2020073101.png)\n\n3. Publish/Subscribe 订阅模式\n   消息被路由投递给多个队列，一个消息被多个消费者获取\n![project_seckill_2020080201](/images/project_seckill_2020080201.png)\n\n4. Routing, 路由模式　\n一个消息被多个消费者获取，并且消息的目标队列可被生产者指定\n![project_seckill_2020080202](/images/project_seckill_2020080202.png)\n\n\n5. Topic模式\n用BindingKey 以通配符， (#：一个或多个词，*：一个词)的方式指定\n![project_seckill_2020080203](/images/project_seckill_2020080203.png)\n\n\n6. RPC模式\n\n### 后台功能开发　　\n* 商品模型设计开发　　\n* 商品增删改查功能开发\n* 后台商品管理页面　\n\n\n","slug":"秒杀系统设计","published":1,"updated":"2020-08-09T12:08:03.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4w0001854ynehhybmre","content":"<h3 id=\"需求原型设计\">需求原型设计</h3>\n<p>主要设计页面(墨刀原型设计工具)</p>\n<ul>\n<li>前台用户登录页面，商品展示页面，抢购结果页面</li>\n<li>后台订单管理页面</li>\n</ul>\n<h3 id=\"系统架构设计\">系统架构设计</h3>\n<ul>\n<li>前端页面需要承载大流量</li>\n<li>在大并发状态下要解决超卖问题</li>\n<li>后端接口需要满足横向扩展 <img src=\"/images/project_seckill_2020073001.png\" alt=\"project_seckill\" /></li>\n</ul>\n<h3 id=\"rabbitmq\">RabbitMQ</h3>\n<ul>\n<li>定义和特征<br />\nRabbitMQ是面向消息的中间件，用于组件之间的解耦，主要体现在消息的发送者和消费者之间无强依赖关系<br />\nRabbitMQ特点，高可用, 扩展性, 多语言客户端，管理界面等 主要使用场景，流量削峰，异步处理，应用解耦</li>\n<li>管理命令介绍　 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbtmq-plugins list  &#x2F;&#x2F;查看插件</span><br><span class=\"line\">rabbitmq-plugins enable rabbitmq_management  &#x2F;&#x2F;安装管理界面</span><br><span class=\"line\">rabbitmq-plugins disable rabbitmq_management &#x2F;&#x2F;卸载管理界面　</span><br><span class=\"line\">rabbitmqctl list_users  &#x2F;&#x2F;列出已创建的用户</span><br><span class=\"line\">rabbitmqctl set_user_tags　colin administrator　&#x2F;&#x2F;设置用户和密码</span><br><span class=\"line\">rabbitmqctl set_user_tags　colin administrator　&#x2F;&#x2F;设置角色</span><br></pre></td></tr></table></figure></li>\n<li>核心概念 VirtualHost Connection Exchange Channel Queue Binding</li>\n</ul>\n<p>*常用工作模式　 1. Simple模式　 <img src=\"/images/project_seckill_2020073002.png\" alt=\"project_seckill02\" /></p>\n<ol start=\"2\" type=\"1\">\n<li><p>Work, 工作模式 　一个消息只能被一个消费者获取　 <img src=\"/images/project_seckill_2020073101.png\" alt=\"project_seckill_2020073101\" /></p></li>\n<li><p>Publish/Subscribe 订阅模式 消息被路由投递给多个队列，一个消息被多个消费者获取 <img src=\"/images/project_seckill_2020080201.png\" alt=\"project_seckill_2020080201\" /></p></li>\n<li><p>Routing, 路由模式　 一个消息被多个消费者获取，并且消息的目标队列可被生产者指定 <img src=\"/images/project_seckill_2020080202.png\" alt=\"project_seckill_2020080202\" /></p></li>\n<li><p>Topic模式 用BindingKey 以通配符， (#：一个或多个词，*：一个词)的方式指定 <img src=\"/images/project_seckill_2020080203.png\" alt=\"project_seckill_2020080203\" /></p></li>\n<li><p>RPC模式</p></li>\n</ol>\n<h3 id=\"后台功能开发\">后台功能开发　　</h3>\n<ul>\n<li>商品模型设计开发　　</li>\n<li>商品增删改查功能开发</li>\n<li>后台商品管理页面　</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"需求原型设计\">需求原型设计</h3>\n<p>主要设计页面(墨刀原型设计工具)</p>\n<ul>\n<li>前台用户登录页面，商品展示页面，抢购结果页面</li>\n<li>后台订单管理页面</li>\n</ul>\n<h3 id=\"系统架构设计\">系统架构设计</h3>\n<ul>\n<li>前端页面需要承载大流量</li>\n<li>在大并发状态下要解决超卖问题</li>\n<li>后端接口需要满足横向扩展 <img src=\"/images/project_seckill_2020073001.png\" alt=\"project_seckill\" /></li>\n</ul>\n<h3 id=\"rabbitmq\">RabbitMQ</h3>\n<ul>\n<li>定义和特征<br />\nRabbitMQ是面向消息的中间件，用于组件之间的解耦，主要体现在消息的发送者和消费者之间无强依赖关系<br />\nRabbitMQ特点，高可用, 扩展性, 多语言客户端，管理界面等 主要使用场景，流量削峰，异步处理，应用解耦</li>\n<li>管理命令介绍　 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbtmq-plugins list  &#x2F;&#x2F;查看插件</span><br><span class=\"line\">rabbitmq-plugins enable rabbitmq_management  &#x2F;&#x2F;安装管理界面</span><br><span class=\"line\">rabbitmq-plugins disable rabbitmq_management &#x2F;&#x2F;卸载管理界面　</span><br><span class=\"line\">rabbitmqctl list_users  &#x2F;&#x2F;列出已创建的用户</span><br><span class=\"line\">rabbitmqctl set_user_tags　colin administrator　&#x2F;&#x2F;设置用户和密码</span><br><span class=\"line\">rabbitmqctl set_user_tags　colin administrator　&#x2F;&#x2F;设置角色</span><br></pre></td></tr></table></figure></li>\n<li>核心概念 VirtualHost Connection Exchange Channel Queue Binding</li>\n</ul>\n<p>*常用工作模式　 1. Simple模式　 <img src=\"/images/project_seckill_2020073002.png\" alt=\"project_seckill02\" /></p>\n<ol start=\"2\" type=\"1\">\n<li><p>Work, 工作模式 　一个消息只能被一个消费者获取　 <img src=\"/images/project_seckill_2020073101.png\" alt=\"project_seckill_2020073101\" /></p></li>\n<li><p>Publish/Subscribe 订阅模式 消息被路由投递给多个队列，一个消息被多个消费者获取 <img src=\"/images/project_seckill_2020080201.png\" alt=\"project_seckill_2020080201\" /></p></li>\n<li><p>Routing, 路由模式　 一个消息被多个消费者获取，并且消息的目标队列可被生产者指定 <img src=\"/images/project_seckill_2020080202.png\" alt=\"project_seckill_2020080202\" /></p></li>\n<li><p>Topic模式 用BindingKey 以通配符， (#：一个或多个词，*：一个词)的方式指定 <img src=\"/images/project_seckill_2020080203.png\" alt=\"project_seckill_2020080203\" /></p></li>\n<li><p>RPC模式</p></li>\n</ol>\n<h3 id=\"后台功能开发\">后台功能开发　　</h3>\n<ul>\n<li>商品模型设计开发　　</li>\n<li>商品增删改查功能开发</li>\n<li>后台商品管理页面　</li>\n</ul>\n"},{"title":"模板","date":"2020-03-29T02:24:59.000Z","_content":"\n\n<!-- more -->\n## 函数模板\n定义模板是不会生成代码，只有当实例化时才会生成  \n### 类型模板参数\n```cpp\n    template<class T>\n    T add(T a, T b){\n        return a + b;\n    }\n\n```\n\n### 非类型模板参数\n非类型是指不是泛型， 即基本类型\n即显示使用<>指定\n非类型模板参数必须是常量， 因为模板代码在编译期生成\n* 所有参数都是非类型\n```cpp\ntemplate<int a, int b>\nint add(){\n    return a + b;    \n}\n\nadd<1, 2>() //显示指定参数\n\n```\n* 非类型和类型参数混合\n```cpp\ntemplate<class T, int a , int b>\nint add(T c){\n    return (int)c + a + b;    \n}\n\nadd<int, 1, 2>(3);\n```\n* 非类型模板也可以不用<>指定\n```cpp\ntemplate<unsigned L1, unsigned L1>\nint strcomp(const char(&p1)[L1], const char(&p2)[L2]){  //数组的引用\n    return strcmp(p1, p2);\n}\n\nstrcomp(\"test\", \"test2\"); //字符串长度由编译器默认推到\nstrcomp<5, 6>(\"test\", \"test2\"); //也可以显示指定\n```\n\n## 类模板\n类模板编译器不能自动推导参数所以要显示用<>指定  \n\n### 类模板成员函数\n* 定义在类内部不用写类型参数   \n```cpp\ntemplate<class T>\nclass A{\n\npublic:\n    void func(){}\n};\n\n```\n\n* 定义在类外部   \n\n```cpp\ntemplate<class T>\nvoid A<T>::func(){\n\n}\n\n```\n\n\n### 非类型模板参数\n非类型参数不能是浮点数和类\n```cpp\ntemplate <class T, int V = 100>\nclass A{\npublic:\nvoid func();\n\n};\ntemplate<class T, int V>\nvoid A<T, V>::func(){\n\n}\n```\n\n## typename使用场景  \n* 模板类型参数   \n* 使用类的类型成员， 用typename来标示这个类型      \n一般使用::后面跟类型时，编译器默认会当作类的成员变量。为防止这种情况使用必须使用typename(这里不能使用class代替)    \n\n例1：\n\n```cpp\ntemplate <class T>\nclass mystring{\npublic:\n    typedef T* Iterator;\n\n    Iterator begin();\n};\n\ntemplate<class T>\ntypename mystring<T>::Iterator mystring<T>::begin(){\n    //....    \n}\n\n```\n\n例2：\n```cpp\n//饿汉单例模式\ntemplate <class T>\nclass CHSingleton\n{\nprotected:\n    CHSingleton()\n    {\n        _destory.init();\n    }\n\n    ~CHSingleton()\n    {\n    }\n\npublic:\n    static T *Instance() { return _instance; }\n    class CDestory\n    {\n    public:\n        CDestory()\n        {\n            std::cout << \"CDestory\" << std::endl;\n        }\n        ~CDestory()\n        {\n            std::cout << \"~CDestory\" << std::endl;\n            delete CHSingleton::_instance;\n            CHSingleton::_instance = nullptr;\n        }\n        static void init() {}\n    };\n\nprivate:\n    thread_local static T *_instance;\n    static CDestory _destory;\n};\n\ntemplate <class T>\nthread_local T *CHSingleton<T>::_instance = new T;\n\ntemplate <class T>\ntypename CHSingleton<T>::CDestory CHSingleton<T>::_destory;\n\n```\n\n## 可调用对象做函数模板的默认参数  \nc++11以后支持模板函数默认参数  \n```cpp\ntypedef void (*func)(int, int);\n\nvoid func1(int a, int b){\n\n}\n//函数指针\ntemplate <class T, class Func=func1>\nvoid tfunc(const T& i, const T& j, Func f= func1){\n    f(i, j);\n}\n\n\n//函数对象\nclass Obj{\npublic:\n    void operator()(int, int){\n    }\n}\n\ntemplate <class T, class O=Obj>\nvoid tfunc(const T& i, const T& j, O o= Obj()){\n    o(i, j);\n}\n```\n\n\n## 成员函数模板   \n成员函数模板不能是虚函数， \n### 普通类的成员函数模板 \n```cpp\nclass A{\npublic:\n    template <class T>\n    void func(T t){\n    }\n};\n\nA a;\na.func(1);\n```\n\n### 类模板中的成员函数模板   \n* 类成员模板函数定义在类内   \n```cpp\ntemplate <class C>\nclass A{\npublic:\n    template<class T1, class T2>\n    A(T1 a, T2 b){\n\n    }\n\n    template<class T3>\n    void func(T3 c){\n    }\n\nprivate:\n    C c;\n};\n\nA<int> a;\na.func(1, 2);\n```\n* 类成员模板函数定义在类外  \n```cpp\ntemp<class C>  //先写类模板申明\ntemp<class T1, class T2> //再写成员函数模板申明 \nA<C>::A(T1 a, T2 b){\n\n}\n```\n## 模板显式实例化\n为防止多个cpp文件中实例化相同的模板类， c++11中使用显示实例化解决\n每种类型的模板只需实例化一次， 其他的cpp文件声明就行， 只有使用到该类型模板才用实例化  \n```cpp\n//a.cpp\ntemplate  A<float>;  //显式实例化类\ntemplate  void func(int a, int b) ;//显示实例化函数\n\n//b.cpp\nextern template A<float>; //显式实例化类声明\nextern template  void func(int a, int b) ;//显示实例化函数申明\n\n```\n类模板的实例化会实例化类模板的所有成员函数， 包括内联和类成员模板函数(vs中)    \n\n## using 定义模板别名 \n* 定义一个值为任意参数的模板别名  \n```cpp\ntemplate<class T>\nusing s_map = std::map<string, T>;\n\ns_map<int> m;\nm.insert({\"first\", 1});\n\n```\n* 定义一个函数指针模板\n```cpp\ntemplate<class T>\nusing funcptr = bool (*)(T, T);\n\nbool func(int i, int j){\n\n}\nfuncptr<int> f_ptr;\nf_ptr = func;\n```\n\n## 显示指定模板参数  \n```cpp\ntemplate <class T1, class T2, class T3>\nT1 sum(T2 i, T3 j){\n    T1 res = i + j;\n    return res;\n}\n//参数2,3能推导出来， 能省略\nauto res = sum<double>(200000000, 200000000);\n\ntemplate <class T1, class T2, class T3>\nT3 sum(T1 i, T2 j){\n    T3 res = i + j;\n    return res;\n}\n//参数不能省\nauto res = sum<double, double, double>(200000000, 200000000);\n\n```","source":"_posts/模板.md","raw":"---\ntitle: 模板\ndate: 2020-03-29 10:24:59\ncategories:\n    - c++\ntags:\n    - 泛型\n---\n\n\n<!-- more -->\n## 函数模板\n定义模板是不会生成代码，只有当实例化时才会生成  \n### 类型模板参数\n```cpp\n    template<class T>\n    T add(T a, T b){\n        return a + b;\n    }\n\n```\n\n### 非类型模板参数\n非类型是指不是泛型， 即基本类型\n即显示使用<>指定\n非类型模板参数必须是常量， 因为模板代码在编译期生成\n* 所有参数都是非类型\n```cpp\ntemplate<int a, int b>\nint add(){\n    return a + b;    \n}\n\nadd<1, 2>() //显示指定参数\n\n```\n* 非类型和类型参数混合\n```cpp\ntemplate<class T, int a , int b>\nint add(T c){\n    return (int)c + a + b;    \n}\n\nadd<int, 1, 2>(3);\n```\n* 非类型模板也可以不用<>指定\n```cpp\ntemplate<unsigned L1, unsigned L1>\nint strcomp(const char(&p1)[L1], const char(&p2)[L2]){  //数组的引用\n    return strcmp(p1, p2);\n}\n\nstrcomp(\"test\", \"test2\"); //字符串长度由编译器默认推到\nstrcomp<5, 6>(\"test\", \"test2\"); //也可以显示指定\n```\n\n## 类模板\n类模板编译器不能自动推导参数所以要显示用<>指定  \n\n### 类模板成员函数\n* 定义在类内部不用写类型参数   \n```cpp\ntemplate<class T>\nclass A{\n\npublic:\n    void func(){}\n};\n\n```\n\n* 定义在类外部   \n\n```cpp\ntemplate<class T>\nvoid A<T>::func(){\n\n}\n\n```\n\n\n### 非类型模板参数\n非类型参数不能是浮点数和类\n```cpp\ntemplate <class T, int V = 100>\nclass A{\npublic:\nvoid func();\n\n};\ntemplate<class T, int V>\nvoid A<T, V>::func(){\n\n}\n```\n\n## typename使用场景  \n* 模板类型参数   \n* 使用类的类型成员， 用typename来标示这个类型      \n一般使用::后面跟类型时，编译器默认会当作类的成员变量。为防止这种情况使用必须使用typename(这里不能使用class代替)    \n\n例1：\n\n```cpp\ntemplate <class T>\nclass mystring{\npublic:\n    typedef T* Iterator;\n\n    Iterator begin();\n};\n\ntemplate<class T>\ntypename mystring<T>::Iterator mystring<T>::begin(){\n    //....    \n}\n\n```\n\n例2：\n```cpp\n//饿汉单例模式\ntemplate <class T>\nclass CHSingleton\n{\nprotected:\n    CHSingleton()\n    {\n        _destory.init();\n    }\n\n    ~CHSingleton()\n    {\n    }\n\npublic:\n    static T *Instance() { return _instance; }\n    class CDestory\n    {\n    public:\n        CDestory()\n        {\n            std::cout << \"CDestory\" << std::endl;\n        }\n        ~CDestory()\n        {\n            std::cout << \"~CDestory\" << std::endl;\n            delete CHSingleton::_instance;\n            CHSingleton::_instance = nullptr;\n        }\n        static void init() {}\n    };\n\nprivate:\n    thread_local static T *_instance;\n    static CDestory _destory;\n};\n\ntemplate <class T>\nthread_local T *CHSingleton<T>::_instance = new T;\n\ntemplate <class T>\ntypename CHSingleton<T>::CDestory CHSingleton<T>::_destory;\n\n```\n\n## 可调用对象做函数模板的默认参数  \nc++11以后支持模板函数默认参数  \n```cpp\ntypedef void (*func)(int, int);\n\nvoid func1(int a, int b){\n\n}\n//函数指针\ntemplate <class T, class Func=func1>\nvoid tfunc(const T& i, const T& j, Func f= func1){\n    f(i, j);\n}\n\n\n//函数对象\nclass Obj{\npublic:\n    void operator()(int, int){\n    }\n}\n\ntemplate <class T, class O=Obj>\nvoid tfunc(const T& i, const T& j, O o= Obj()){\n    o(i, j);\n}\n```\n\n\n## 成员函数模板   \n成员函数模板不能是虚函数， \n### 普通类的成员函数模板 \n```cpp\nclass A{\npublic:\n    template <class T>\n    void func(T t){\n    }\n};\n\nA a;\na.func(1);\n```\n\n### 类模板中的成员函数模板   \n* 类成员模板函数定义在类内   \n```cpp\ntemplate <class C>\nclass A{\npublic:\n    template<class T1, class T2>\n    A(T1 a, T2 b){\n\n    }\n\n    template<class T3>\n    void func(T3 c){\n    }\n\nprivate:\n    C c;\n};\n\nA<int> a;\na.func(1, 2);\n```\n* 类成员模板函数定义在类外  \n```cpp\ntemp<class C>  //先写类模板申明\ntemp<class T1, class T2> //再写成员函数模板申明 \nA<C>::A(T1 a, T2 b){\n\n}\n```\n## 模板显式实例化\n为防止多个cpp文件中实例化相同的模板类， c++11中使用显示实例化解决\n每种类型的模板只需实例化一次， 其他的cpp文件声明就行， 只有使用到该类型模板才用实例化  \n```cpp\n//a.cpp\ntemplate  A<float>;  //显式实例化类\ntemplate  void func(int a, int b) ;//显示实例化函数\n\n//b.cpp\nextern template A<float>; //显式实例化类声明\nextern template  void func(int a, int b) ;//显示实例化函数申明\n\n```\n类模板的实例化会实例化类模板的所有成员函数， 包括内联和类成员模板函数(vs中)    \n\n## using 定义模板别名 \n* 定义一个值为任意参数的模板别名  \n```cpp\ntemplate<class T>\nusing s_map = std::map<string, T>;\n\ns_map<int> m;\nm.insert({\"first\", 1});\n\n```\n* 定义一个函数指针模板\n```cpp\ntemplate<class T>\nusing funcptr = bool (*)(T, T);\n\nbool func(int i, int j){\n\n}\nfuncptr<int> f_ptr;\nf_ptr = func;\n```\n\n## 显示指定模板参数  \n```cpp\ntemplate <class T1, class T2, class T3>\nT1 sum(T2 i, T3 j){\n    T1 res = i + j;\n    return res;\n}\n//参数2,3能推导出来， 能省略\nauto res = sum<double>(200000000, 200000000);\n\ntemplate <class T1, class T2, class T3>\nT3 sum(T1 i, T2 j){\n    T3 res = i + j;\n    return res;\n}\n//参数不能省\nauto res = sum<double, double, double>(200000000, 200000000);\n\n```","slug":"模板","published":1,"updated":"2020-11-14T10:45:12.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4w1001c54yn8xkdfs4m","content":"<a id=\"more\"></a>\n<h2 id=\"函数模板\">函数模板</h2>\n<p>定义模板是不会生成代码，只有当实例化时才会生成<br />\n### 类型模板参数 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T</span> <span class=\"title\">add</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>, <span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"非类型模板参数\">非类型模板参数</h3>\n<p>非类型是指不是泛型， 即基本类型 即显示使用&lt;&gt;指定 非类型模板参数必须是常量， 因为模板代码在编译期生成 * 所有参数都是非类型 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add&lt;<span class=\"number\">1</span>, <span class=\"number\">2</span>&gt;() <span class=\"comment\">//显示指定参数</span></span><br></pre></td></tr></table></figure> * 非类型和类型参数混合 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">a</span> , <span class=\"title\">int</span> <span class=\"title\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">add</span>(<span class=\"title\">T</span> <span class=\"title\">c</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)c + a + b;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add&lt;<span class=\"keyword\">int</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&gt;(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure> * 非类型模板也可以不用&lt;&gt;指定 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">unsigned</span> L1, <span class=\"keyword\">unsigned</span> L1&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strcomp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>(&amp;p1)[L1], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>(&amp;p2)[L2])</span></span>&#123;  <span class=\"comment\">//数组的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(p1, p2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strcomp(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"test2\"</span>); <span class=\"comment\">//字符串长度由编译器默认推到</span></span><br><span class=\"line\">strcomp&lt;<span class=\"number\">5</span>, <span class=\"number\">6</span>&gt;(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"test2\"</span>); <span class=\"comment\">//也可以显示指定</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"类模板\">类模板</h2>\n<p>类模板编译器不能自动推导参数所以要显示用&lt;&gt;指定</p>\n<h3 id=\"类模板成员函数\">类模板成员函数</h3>\n<ul>\n<li><p>定义在类内部不用写类型参数<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>定义在类外部</p></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">A</span>&lt;T&gt;:</span>:func()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非类型模板参数-1\">非类型模板参数</h3>\n<p>非类型参数不能是浮点数和类 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">V</span> = 100&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">V</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">A</span>&lt;T, V&gt;:</span>:func()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"typename使用场景\">typename使用场景</h2>\n<ul>\n<li>模板类型参数<br />\n</li>\n<li>使用类的类型成员， 用typename来标示这个类型<br />\n一般使用::后面跟类型时，编译器默认会当作类的成员变量。为防止这种情况使用必须使用typename(这里不能使用class代替)</li>\n</ul>\n<p>例1：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">mystring</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> T* Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">typename</span> <span class=\"title\">mystring</span>&lt;T&gt;:</span>:Iterator mystring&lt;T&gt;::begin()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....    </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例2： <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//饿汉单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">CHSingleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    CHSingleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _destory.init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~CHSingleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> T *<span class=\"title\">Instance</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> _instance; &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDestory</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        CDestory()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"CDestory\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ~CDestory()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~CDestory\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> CHSingleton::_instance;</span><br><span class=\"line\">            CHSingleton::_instance = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">thread_local</span> <span class=\"keyword\">static</span> T *_instance;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CDestory _destory;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">thread_local</span> <span class=\"title\">T</span> *<span class=\"title\">CHSingleton</span>&lt;T&gt;:</span>:_instance = <span class=\"keyword\">new</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">typename</span> <span class=\"title\">CHSingleton</span>&lt;T&gt;:</span>:CDestory CHSingleton&lt;T&gt;::_destory;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可调用对象做函数模板的默认参数\">可调用对象做函数模板的默认参数</h2>\n<p>c++11以后支持模板函数默认参数<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*func)</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数指针</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Func</span>=<span class=\"title\">func1</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">tfunc</span>(<span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">i</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">j</span>, <span class=\"title\">Func</span> <span class=\"title\">f</span>= <span class=\"title\">func1</span>)&#123;</span></span><br><span class=\"line\">    f(i, j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">O</span>=<span class=\"title\">Obj</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">tfunc</span>(<span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">i</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">j</span>, <span class=\"title\">O</span> <span class=\"title\">o</span>= <span class=\"title\">Obj</span>())&#123;</span></span><br><span class=\"line\">    o(i, j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"成员函数模板\">成员函数模板</h2>\n<p>成员函数模板不能是虚函数， ### 普通类的成员函数模板 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">void</span> <span class=\"title\">func</span>(<span class=\"title\">T</span> <span class=\"title\">t</span>)&#123;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">A a;</span><br><span class=\"line\">a.func(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类模板中的成员函数模板\">类模板中的成员函数模板</h3>\n<ul>\n<li>类成员模板函数定义在类内<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">A</span>(<span class=\"title\">T1</span> <span class=\"title\">a</span>, <span class=\"title\">T2</span> <span class=\"title\">b</span>)&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T3</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">void</span> <span class=\"title\">func</span>(<span class=\"title\">T3</span> <span class=\"title\">c</span>)&#123;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    C c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">A&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">a.func(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></li>\n<li>类成员模板函数定义在类外<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>&gt;  //先写类模板申明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">temp</span>&lt;class T1, class T2&gt; //再写成员函数模板申明 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">A</span>&lt;C&gt;:</span>:A(T1 a, T2 b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> ## 模板显式实例化 为防止多个cpp文件中实例化相同的模板类， c++11中使用显示实例化解决 每种类型的模板只需实例化一次， 其他的cpp文件声明就行， 只有使用到该类型模板才用实例化<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>  A&lt;<span class=\"keyword\">float</span>&gt;;  <span class=\"comment\">//显式实例化类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>  <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>;<span class=\"comment\">//显示实例化函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">template</span> A&lt;<span class=\"keyword\">float</span>&gt;; <span class=\"comment\">//显式实例化类声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">template</span>  <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>;<span class=\"comment\">//显示实例化函数申明</span></span><br></pre></td></tr></table></figure> 类模板的实例化会实例化类模板的所有成员函数， 包括内联和类成员模板函数(vs中)</li>\n</ul>\n<h2 id=\"using-定义模板别名\">using 定义模板别名</h2>\n<ul>\n<li>定义一个值为任意参数的模板别名<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">using</span> <span class=\"title\">s_map</span> = <span class=\"title\">std</span>:</span>:<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, T&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">s_map&lt;<span class=\"keyword\">int</span>&gt; m;</span><br><span class=\"line\">m.insert(&#123;<span class=\"string\">\"first\"</span>, <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>定义一个函数指针模板 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">using</span> <span class=\"title\">funcptr</span> = <span class=\"title\">bool</span> (*)(<span class=\"title\">T</span>, <span class=\"title\">T</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcptr&lt;<span class=\"keyword\">int</span>&gt; f_ptr;</span><br><span class=\"line\">f_ptr = func;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"显示指定模板参数\">显示指定模板参数</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>, <span class=\"title\">class</span> <span class=\"title\">T3</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T1</span> <span class=\"title\">sum</span>(<span class=\"title\">T2</span> <span class=\"title\">i</span>, <span class=\"title\">T3</span> <span class=\"title\">j</span>)&#123;</span></span><br><span class=\"line\">    T1 res = i + j;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数2,3能推导出来， 能省略</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> res = sum&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"number\">200000000</span>, <span class=\"number\">200000000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>, <span class=\"title\">class</span> <span class=\"title\">T3</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T3</span> <span class=\"title\">sum</span>(<span class=\"title\">T1</span> <span class=\"title\">i</span>, <span class=\"title\">T2</span> <span class=\"title\">j</span>)&#123;</span></span><br><span class=\"line\">    T3 res = i + j;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数不能省</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> res = sum&lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&gt;(<span class=\"number\">200000000</span>, <span class=\"number\">200000000</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数模板\">函数模板</h2>\n<p>定义模板是不会生成代码，只有当实例化时才会生成<br />\n### 类型模板参数 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T</span> <span class=\"title\">add</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>, <span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"非类型模板参数\">非类型模板参数</h3>\n<p>非类型是指不是泛型， 即基本类型 即显示使用&lt;&gt;指定 非类型模板参数必须是常量， 因为模板代码在编译期生成 * 所有参数都是非类型 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add&lt;<span class=\"number\">1</span>, <span class=\"number\">2</span>&gt;() <span class=\"comment\">//显示指定参数</span></span><br></pre></td></tr></table></figure> * 非类型和类型参数混合 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">a</span> , <span class=\"title\">int</span> <span class=\"title\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">add</span>(<span class=\"title\">T</span> <span class=\"title\">c</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)c + a + b;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add&lt;<span class=\"keyword\">int</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&gt;(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure> * 非类型模板也可以不用&lt;&gt;指定 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">unsigned</span> L1, <span class=\"keyword\">unsigned</span> L1&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strcomp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>(&amp;p1)[L1], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>(&amp;p2)[L2])</span></span>&#123;  <span class=\"comment\">//数组的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(p1, p2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strcomp(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"test2\"</span>); <span class=\"comment\">//字符串长度由编译器默认推到</span></span><br><span class=\"line\">strcomp&lt;<span class=\"number\">5</span>, <span class=\"number\">6</span>&gt;(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"test2\"</span>); <span class=\"comment\">//也可以显示指定</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"类模板\">类模板</h2>\n<p>类模板编译器不能自动推导参数所以要显示用&lt;&gt;指定</p>\n<h3 id=\"类模板成员函数\">类模板成员函数</h3>\n<ul>\n<li><p>定义在类内部不用写类型参数<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>定义在类外部</p></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">A</span>&lt;T&gt;:</span>:func()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非类型模板参数-1\">非类型模板参数</h3>\n<p>非类型参数不能是浮点数和类 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">V</span> = 100&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">V</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">A</span>&lt;T, V&gt;:</span>:func()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"typename使用场景\">typename使用场景</h2>\n<ul>\n<li>模板类型参数<br />\n</li>\n<li>使用类的类型成员， 用typename来标示这个类型<br />\n一般使用::后面跟类型时，编译器默认会当作类的成员变量。为防止这种情况使用必须使用typename(这里不能使用class代替)</li>\n</ul>\n<p>例1：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">mystring</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> T* Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">typename</span> <span class=\"title\">mystring</span>&lt;T&gt;:</span>:Iterator mystring&lt;T&gt;::begin()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....    </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例2： <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//饿汉单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">CHSingleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    CHSingleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _destory.init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~CHSingleton()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> T *<span class=\"title\">Instance</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> _instance; &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDestory</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        CDestory()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"CDestory\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ~CDestory()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~CDestory\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> CHSingleton::_instance;</span><br><span class=\"line\">            CHSingleton::_instance = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">thread_local</span> <span class=\"keyword\">static</span> T *_instance;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CDestory _destory;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">thread_local</span> <span class=\"title\">T</span> *<span class=\"title\">CHSingleton</span>&lt;T&gt;:</span>:_instance = <span class=\"keyword\">new</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">typename</span> <span class=\"title\">CHSingleton</span>&lt;T&gt;:</span>:CDestory CHSingleton&lt;T&gt;::_destory;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可调用对象做函数模板的默认参数\">可调用对象做函数模板的默认参数</h2>\n<p>c++11以后支持模板函数默认参数<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*func)</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数指针</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Func</span>=<span class=\"title\">func1</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">tfunc</span>(<span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">i</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">j</span>, <span class=\"title\">Func</span> <span class=\"title\">f</span>= <span class=\"title\">func1</span>)&#123;</span></span><br><span class=\"line\">    f(i, j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">O</span>=<span class=\"title\">Obj</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">tfunc</span>(<span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">i</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">j</span>, <span class=\"title\">O</span> <span class=\"title\">o</span>= <span class=\"title\">Obj</span>())&#123;</span></span><br><span class=\"line\">    o(i, j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"成员函数模板\">成员函数模板</h2>\n<p>成员函数模板不能是虚函数， ### 普通类的成员函数模板 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">void</span> <span class=\"title\">func</span>(<span class=\"title\">T</span> <span class=\"title\">t</span>)&#123;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">A a;</span><br><span class=\"line\">a.func(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类模板中的成员函数模板\">类模板中的成员函数模板</h3>\n<ul>\n<li>类成员模板函数定义在类内<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">A</span>(<span class=\"title\">T1</span> <span class=\"title\">a</span>, <span class=\"title\">T2</span> <span class=\"title\">b</span>)&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T3</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">void</span> <span class=\"title\">func</span>(<span class=\"title\">T3</span> <span class=\"title\">c</span>)&#123;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    C c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">A&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">a.func(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></li>\n<li>类成员模板函数定义在类外<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>&gt;  //先写类模板申明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">temp</span>&lt;class T1, class T2&gt; //再写成员函数模板申明 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">A</span>&lt;C&gt;:</span>:A(T1 a, T2 b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> ## 模板显式实例化 为防止多个cpp文件中实例化相同的模板类， c++11中使用显示实例化解决 每种类型的模板只需实例化一次， 其他的cpp文件声明就行， 只有使用到该类型模板才用实例化<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>  A&lt;<span class=\"keyword\">float</span>&gt;;  <span class=\"comment\">//显式实例化类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>  <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>;<span class=\"comment\">//显示实例化函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">template</span> A&lt;<span class=\"keyword\">float</span>&gt;; <span class=\"comment\">//显式实例化类声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">template</span>  <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>;<span class=\"comment\">//显示实例化函数申明</span></span><br></pre></td></tr></table></figure> 类模板的实例化会实例化类模板的所有成员函数， 包括内联和类成员模板函数(vs中)</li>\n</ul>\n<h2 id=\"using-定义模板别名\">using 定义模板别名</h2>\n<ul>\n<li>定义一个值为任意参数的模板别名<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">using</span> <span class=\"title\">s_map</span> = <span class=\"title\">std</span>:</span>:<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, T&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">s_map&lt;<span class=\"keyword\">int</span>&gt; m;</span><br><span class=\"line\">m.insert(&#123;<span class=\"string\">\"first\"</span>, <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>定义一个函数指针模板 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">using</span> <span class=\"title\">funcptr</span> = <span class=\"title\">bool</span> (*)(<span class=\"title\">T</span>, <span class=\"title\">T</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcptr&lt;<span class=\"keyword\">int</span>&gt; f_ptr;</span><br><span class=\"line\">f_ptr = func;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"显示指定模板参数\">显示指定模板参数</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>, <span class=\"title\">class</span> <span class=\"title\">T3</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T1</span> <span class=\"title\">sum</span>(<span class=\"title\">T2</span> <span class=\"title\">i</span>, <span class=\"title\">T3</span> <span class=\"title\">j</span>)&#123;</span></span><br><span class=\"line\">    T1 res = i + j;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数2,3能推导出来， 能省略</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> res = sum&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"number\">200000000</span>, <span class=\"number\">200000000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>, <span class=\"title\">class</span> <span class=\"title\">T3</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T3</span> <span class=\"title\">sum</span>(<span class=\"title\">T1</span> <span class=\"title\">i</span>, <span class=\"title\">T2</span> <span class=\"title\">j</span>)&#123;</span></span><br><span class=\"line\">    T3 res = i + j;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数不能省</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> res = sum&lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&gt;(<span class=\"number\">200000000</span>, <span class=\"number\">200000000</span>);</span><br></pre></td></tr></table></figure>"},{"title":"网络编程","date":"2020-08-26T22:10:02.000Z","_content":"\n##　Tcp中的异常处理　\n当客户段因位置原因崩溃或异常退出后，内核会发给服务端一条rst消息, 此时epoll变为可读，read 到rst报错, 一下情况会收到对端rst消息:\n1. connect一个不存在的端口，客户端会收到一条RST，报错Connection refused\n2. 程序崩溃或异常退出，会向对端发送\n3. 对端断电重启，send数据时会收到来自对端的RST\n4. close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由\t\t        SO_LINGER选项来控制的\n\n有些情况服务端感知不到客户端断开:\n1. 客户端断电或者网络异常　\n2. 拔掉网线\n这个时候服务端可能存在资源泄露的情况, 直至服务端资源耗尽拒绝提供服务, 解决方法加心跳\n\n### Tcp半开连接\nhttps://blog.csdn.net/larry_zeng1/article/details/78437050\n\n引用:\n\t[断开TCP连接](https://segmentfault.com/a/1190000017411330)\n\t[TCP 异常关闭研究分析](https://cloud.tencent.com/developer/news/24414)\n","source":"_posts/网络编程.md","raw":"---\ntitle: 网络编程\ndate: 2020-08-27 06:10:02\ntags: linux \n---\n\n##　Tcp中的异常处理　\n当客户段因位置原因崩溃或异常退出后，内核会发给服务端一条rst消息, 此时epoll变为可读，read 到rst报错, 一下情况会收到对端rst消息:\n1. connect一个不存在的端口，客户端会收到一条RST，报错Connection refused\n2. 程序崩溃或异常退出，会向对端发送\n3. 对端断电重启，send数据时会收到来自对端的RST\n4. close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由\t\t        SO_LINGER选项来控制的\n\n有些情况服务端感知不到客户端断开:\n1. 客户端断电或者网络异常　\n2. 拔掉网线\n这个时候服务端可能存在资源泄露的情况, 直至服务端资源耗尽拒绝提供服务, 解决方法加心跳\n\n### Tcp半开连接\nhttps://blog.csdn.net/larry_zeng1/article/details/78437050\n\n引用:\n\t[断开TCP连接](https://segmentfault.com/a/1190000017411330)\n\t[TCP 异常关闭研究分析](https://cloud.tencent.com/developer/news/24414)\n","slug":"网络编程","published":1,"updated":"2020-08-26T23:32:48.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4w2001e54yn1jhb0eiu","content":"<p>##　Tcp中的异常处理　 当客户段因位置原因崩溃或异常退出后，内核会发给服务端一条rst消息, 此时epoll变为可读，read 到rst报错, 一下情况会收到对端rst消息: 1. connect一个不存在的端口，客户端会收到一条RST，报错Connection refused 2. 程序崩溃或异常退出，会向对端发送 3. 对端断电重启，send数据时会收到来自对端的RST 4. close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由 SO_LINGER选项来控制的</p>\n<p>有些情况服务端感知不到客户端断开: 1. 客户端断电或者网络异常　 2. 拔掉网线 这个时候服务端可能存在资源泄露的情况, 直至服务端资源耗尽拒绝提供服务, 解决方法加心跳</p>\n<h3 id=\"tcp半开连接\">Tcp半开连接</h3>\n<p>https://blog.csdn.net/larry_zeng1/article/details/78437050</p>\n<p>引用: <a href=\"https://segmentfault.com/a/1190000017411330\" target=\"_blank\" rel=\"noopener\">断开TCP连接</a> <a href=\"https://cloud.tencent.com/developer/news/24414\" target=\"_blank\" rel=\"noopener\">TCP 异常关闭研究分析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##　Tcp中的异常处理　 当客户段因位置原因崩溃或异常退出后，内核会发给服务端一条rst消息, 此时epoll变为可读，read 到rst报错, 一下情况会收到对端rst消息: 1. connect一个不存在的端口，客户端会收到一条RST，报错Connection refused 2. 程序崩溃或异常退出，会向对端发送 3. 对端断电重启，send数据时会收到来自对端的RST 4. close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由 SO_LINGER选项来控制的</p>\n<p>有些情况服务端感知不到客户端断开: 1. 客户端断电或者网络异常　 2. 拔掉网线 这个时候服务端可能存在资源泄露的情况, 直至服务端资源耗尽拒绝提供服务, 解决方法加心跳</p>\n<h3 id=\"tcp半开连接\">Tcp半开连接</h3>\n<p>https://blog.csdn.net/larry_zeng1/article/details/78437050</p>\n<p>引用: <a href=\"https://segmentfault.com/a/1190000017411330\" target=\"_blank\" rel=\"noopener\">断开TCP连接</a> <a href=\"https://cloud.tencent.com/developer/news/24414\" target=\"_blank\" rel=\"noopener\">TCP 异常关闭研究分析</a></p>\n"},{"title":"趣谈linux操作系统笔记","date":"2020-03-06T08:09:34.000Z","_content":"\n## 核心原理篇\n### 综述\n* 操作系统内核体系结构图   \n![p1](/images/linuxkernel_20200306.jpeg)\n  \n* linux 命令图谱 \n![p2](/images/linuxkernel_20200306_1.jpeg)\n\n* 系统调用图谱\n![p3](/images/linuxkernel_20200306_2.jpeg)\n\n### 系统初始化  \n#### X86架构  \n* 计算机工作模式图   \n![p4](/images/linuxkernel_20200307_1.jpeg)    \n\n\n* CPU组成  \n运算单元: 加法、位移  \n控制单元: CPU内部缓存和寄存器组   \n数据单元: 取指令， 根据指令取数据， 计算结果后存放数据  \n\n\n* X86架构   \n![p5](/images/linuxkernel_20200307_2.jpeg)  \n\n\n* 程序执行过程图  \n![p6](/images/linuxkernel_20200308_1.jpeg)\n\n\n* 总线  \n地址总线: 位数决定寻址的范围  \n数据总线: 位数决定一次能拿多少数据  \n\n* 8086\n结构图:     \n![p7](/images/linuxkernel_20200308_3.jpeg)  \n\n寄存器:  \n8个16位通用寄存器，用于计算过程中暂存数据， AX、BX、CX、DX、SP、BP、SI、DI, 其中 AX、BX、CX、DX 可以分成两个 8 位的寄存器来使用，分别是 AH、AL、BH、BL、CH、CL、DH、DL  \n16位IP(Instruction Pointer Register), 指令指针寄存器，存放下一条指令在内存中的地址   \n4个16位段寄存器， CS(代码段寄存器)、DS(数据段的寄存器)、SS(栈寄存器)、ES   \n\n实模式：  \nCS和DS中都存放这段的起始地址， IP中存放代码段偏移地址， 通用寄存器中存放数据段的偏移地址  \n8086的地址总线位20位，寻址方式：起始地址*16+偏移量， 每个段的最大寻址64k  \n\n* 80386 \n寄存器:  \n8个32位通用寄存器， 低16位保留了16位和八位的使用方式， 高16位没有分的原因是不兼容之前的架构(8080和8086最大寻址分别是2^16和2^20, 通用寄存器保存地址的偏移量,高16位地址已经大于2^16)  \n32位指令寄存器EIP  \n4个16位段寄存器    \n![p8](/images/linuxkernel_20200308_4.jpeg)  \n\n\n保护模式： \n段的起始地址存放在内存的某个地方，这个地方是一个表格，表格里面一项项是段描述符， 这里面才是段的起始地址， 段寄存器里面存放的是表格中的哪一项，即选择子。 CPU从段寄存器中找到表格中的选择子， 然后简介找到段起始地址， 为了更快速的拿到段起始地址， 段寄存器会从内存中拿到 CPU 的描述符高速缓存器中    \n![p9](/images/linuxkernel_20200308_5.jpeg)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/趣谈linux操作系统笔记.md","raw":"---\ntitle: 趣谈linux操作系统笔记\ndate: 2020-03-06 16:09:34\ncategories:\n    - linux内核\ntags: \n---\n\n## 核心原理篇\n### 综述\n* 操作系统内核体系结构图   \n![p1](/images/linuxkernel_20200306.jpeg)\n  \n* linux 命令图谱 \n![p2](/images/linuxkernel_20200306_1.jpeg)\n\n* 系统调用图谱\n![p3](/images/linuxkernel_20200306_2.jpeg)\n\n### 系统初始化  \n#### X86架构  \n* 计算机工作模式图   \n![p4](/images/linuxkernel_20200307_1.jpeg)    \n\n\n* CPU组成  \n运算单元: 加法、位移  \n控制单元: CPU内部缓存和寄存器组   \n数据单元: 取指令， 根据指令取数据， 计算结果后存放数据  \n\n\n* X86架构   \n![p5](/images/linuxkernel_20200307_2.jpeg)  \n\n\n* 程序执行过程图  \n![p6](/images/linuxkernel_20200308_1.jpeg)\n\n\n* 总线  \n地址总线: 位数决定寻址的范围  \n数据总线: 位数决定一次能拿多少数据  \n\n* 8086\n结构图:     \n![p7](/images/linuxkernel_20200308_3.jpeg)  \n\n寄存器:  \n8个16位通用寄存器，用于计算过程中暂存数据， AX、BX、CX、DX、SP、BP、SI、DI, 其中 AX、BX、CX、DX 可以分成两个 8 位的寄存器来使用，分别是 AH、AL、BH、BL、CH、CL、DH、DL  \n16位IP(Instruction Pointer Register), 指令指针寄存器，存放下一条指令在内存中的地址   \n4个16位段寄存器， CS(代码段寄存器)、DS(数据段的寄存器)、SS(栈寄存器)、ES   \n\n实模式：  \nCS和DS中都存放这段的起始地址， IP中存放代码段偏移地址， 通用寄存器中存放数据段的偏移地址  \n8086的地址总线位20位，寻址方式：起始地址*16+偏移量， 每个段的最大寻址64k  \n\n* 80386 \n寄存器:  \n8个32位通用寄存器， 低16位保留了16位和八位的使用方式， 高16位没有分的原因是不兼容之前的架构(8080和8086最大寻址分别是2^16和2^20, 通用寄存器保存地址的偏移量,高16位地址已经大于2^16)  \n32位指令寄存器EIP  \n4个16位段寄存器    \n![p8](/images/linuxkernel_20200308_4.jpeg)  \n\n\n保护模式： \n段的起始地址存放在内存的某个地方，这个地方是一个表格，表格里面一项项是段描述符， 这里面才是段的起始地址， 段寄存器里面存放的是表格中的哪一项，即选择子。 CPU从段寄存器中找到表格中的选择子， 然后简介找到段起始地址， 为了更快速的拿到段起始地址， 段寄存器会从内存中拿到 CPU 的描述符高速缓存器中    \n![p9](/images/linuxkernel_20200308_5.jpeg)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"趣谈linux操作系统笔记","published":1,"updated":"2020-03-18T08:21:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss4w3001j54yn87l1045t","content":"<h2 id=\"核心原理篇\">核心原理篇</h2>\n<h3 id=\"综述\">综述</h3>\n<ul>\n<li><p>操作系统内核体系结构图<br />\n<img src=\"/images/linuxkernel_20200306.jpeg\" alt=\"p1\" /></p></li>\n<li><p>linux 命令图谱 <img src=\"/images/linuxkernel_20200306_1.jpeg\" alt=\"p2\" /></p></li>\n<li><p>系统调用图谱 <img src=\"/images/linuxkernel_20200306_2.jpeg\" alt=\"p3\" /></p></li>\n</ul>\n<h3 id=\"系统初始化\">系统初始化</h3>\n<h4 id=\"x86架构\">X86架构</h4>\n<ul>\n<li><p>计算机工作模式图<br />\n<img src=\"/images/linuxkernel_20200307_1.jpeg\" alt=\"p4\" /></p></li>\n<li><p>CPU组成<br />\n运算单元: 加法、位移<br />\n控制单元: CPU内部缓存和寄存器组<br />\n数据单元: 取指令， 根据指令取数据， 计算结果后存放数据</p></li>\n<li><p>X86架构<br />\n<img src=\"/images/linuxkernel_20200307_2.jpeg\" alt=\"p5\" /></p></li>\n<li><p>程序执行过程图<br />\n<img src=\"/images/linuxkernel_20200308_1.jpeg\" alt=\"p6\" /></p></li>\n<li><p>总线<br />\n地址总线: 位数决定寻址的范围<br />\n数据总线: 位数决定一次能拿多少数据</p></li>\n<li><p>8086 结构图:<br />\n<img src=\"/images/linuxkernel_20200308_3.jpeg\" alt=\"p7\" /></p></li>\n</ul>\n<p>寄存器:<br />\n8个16位通用寄存器，用于计算过程中暂存数据， AX、BX、CX、DX、SP、BP、SI、DI, 其中 AX、BX、CX、DX 可以分成两个 8 位的寄存器来使用，分别是 AH、AL、BH、BL、CH、CL、DH、DL<br />\n16位IP(Instruction Pointer Register), 指令指针寄存器，存放下一条指令在内存中的地址<br />\n4个16位段寄存器， CS(代码段寄存器)、DS(数据段的寄存器)、SS(栈寄存器)、ES</p>\n<p>实模式：<br />\nCS和DS中都存放这段的起始地址， IP中存放代码段偏移地址， 通用寄存器中存放数据段的偏移地址<br />\n8086的地址总线位20位，寻址方式：起始地址*16+偏移量， 每个段的最大寻址64k</p>\n<ul>\n<li>80386 寄存器:<br />\n8个32位通用寄存器， 低16位保留了16位和八位的使用方式， 高16位没有分的原因是不兼容之前的架构(8080和8086最大寻址分别是2<sup>16和2</sup>20, 通用寄存器保存地址的偏移量,高16位地址已经大于2^16)<br />\n32位指令寄存器EIP<br />\n4个16位段寄存器<br />\n<img src=\"/images/linuxkernel_20200308_4.jpeg\" alt=\"p8\" /></li>\n</ul>\n<p>保护模式： 段的起始地址存放在内存的某个地方，这个地方是一个表格，表格里面一项项是段描述符， 这里面才是段的起始地址， 段寄存器里面存放的是表格中的哪一项，即选择子。 CPU从段寄存器中找到表格中的选择子， 然后简介找到段起始地址， 为了更快速的拿到段起始地址， 段寄存器会从内存中拿到 CPU 的描述符高速缓存器中<br />\n<img src=\"/images/linuxkernel_20200308_5.jpeg\" alt=\"p9\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"核心原理篇\">核心原理篇</h2>\n<h3 id=\"综述\">综述</h3>\n<ul>\n<li><p>操作系统内核体系结构图<br />\n<img src=\"/images/linuxkernel_20200306.jpeg\" alt=\"p1\" /></p></li>\n<li><p>linux 命令图谱 <img src=\"/images/linuxkernel_20200306_1.jpeg\" alt=\"p2\" /></p></li>\n<li><p>系统调用图谱 <img src=\"/images/linuxkernel_20200306_2.jpeg\" alt=\"p3\" /></p></li>\n</ul>\n<h3 id=\"系统初始化\">系统初始化</h3>\n<h4 id=\"x86架构\">X86架构</h4>\n<ul>\n<li><p>计算机工作模式图<br />\n<img src=\"/images/linuxkernel_20200307_1.jpeg\" alt=\"p4\" /></p></li>\n<li><p>CPU组成<br />\n运算单元: 加法、位移<br />\n控制单元: CPU内部缓存和寄存器组<br />\n数据单元: 取指令， 根据指令取数据， 计算结果后存放数据</p></li>\n<li><p>X86架构<br />\n<img src=\"/images/linuxkernel_20200307_2.jpeg\" alt=\"p5\" /></p></li>\n<li><p>程序执行过程图<br />\n<img src=\"/images/linuxkernel_20200308_1.jpeg\" alt=\"p6\" /></p></li>\n<li><p>总线<br />\n地址总线: 位数决定寻址的范围<br />\n数据总线: 位数决定一次能拿多少数据</p></li>\n<li><p>8086 结构图:<br />\n<img src=\"/images/linuxkernel_20200308_3.jpeg\" alt=\"p7\" /></p></li>\n</ul>\n<p>寄存器:<br />\n8个16位通用寄存器，用于计算过程中暂存数据， AX、BX、CX、DX、SP、BP、SI、DI, 其中 AX、BX、CX、DX 可以分成两个 8 位的寄存器来使用，分别是 AH、AL、BH、BL、CH、CL、DH、DL<br />\n16位IP(Instruction Pointer Register), 指令指针寄存器，存放下一条指令在内存中的地址<br />\n4个16位段寄存器， CS(代码段寄存器)、DS(数据段的寄存器)、SS(栈寄存器)、ES</p>\n<p>实模式：<br />\nCS和DS中都存放这段的起始地址， IP中存放代码段偏移地址， 通用寄存器中存放数据段的偏移地址<br />\n8086的地址总线位20位，寻址方式：起始地址*16+偏移量， 每个段的最大寻址64k</p>\n<ul>\n<li>80386 寄存器:<br />\n8个32位通用寄存器， 低16位保留了16位和八位的使用方式， 高16位没有分的原因是不兼容之前的架构(8080和8086最大寻址分别是2<sup>16和2</sup>20, 通用寄存器保存地址的偏移量,高16位地址已经大于2^16)<br />\n32位指令寄存器EIP<br />\n4个16位段寄存器<br />\n<img src=\"/images/linuxkernel_20200308_4.jpeg\" alt=\"p8\" /></li>\n</ul>\n<p>保护模式： 段的起始地址存放在内存的某个地方，这个地方是一个表格，表格里面一项项是段描述符， 这里面才是段的起始地址， 段寄存器里面存放的是表格中的哪一项，即选择子。 CPU从段寄存器中找到表格中的选择子， 然后简介找到段起始地址， 为了更快速的拿到段起始地址， 段寄存器会从内存中拿到 CPU 的描述符高速缓存器中<br />\n<img src=\"/images/linuxkernel_20200308_5.jpeg\" alt=\"p9\" /></p>\n"},{"title":"cpp细节","date":"2020-01-08T11:59:12.000Z","_content":"\n## 移动构造函数中如果有拷贝动态内存要注意将指针赋空\n```cpp\nclass A{\npublic:\n    A() : m_ptr(new int(0)){std::cout << \"construct\" << std::endl;}\n    A(const A& a) : m_ptr(a.m_ptr){std::cout << \"copy construct\" << std::endl;}\n    A(A&& a) : m_ptr(a.m_ptr){a.m_ptr = nullptr; std::cout << \"move construct\" << std::endl;}\n    ~A(){delete m_ptr; std::cout << \"destruct\" << std::endl;}\npublic:\n    int* m_ptr;\n};\n```\n\n<!-- more -->\n## 重载决议\n```cpp\n#include <iostream>\n\nstruct foo{\nint a_;\ntemplate <typename T>\nfoo(T&& v) : a_{static_cast<int>(v)}\n{\n}\n\nfoo(const foo& rhs) : a_{rhs.a_}\n{\n}\n\noperator std::uint8_t(){return a_;}};\n\n\nint main()\n{\n    foo bar1{256}, bar2{bar1};\n\n    if(bar1.a_ == bar2.a_)\n        std::cout << \"hello!\" << std::endl;\n    return 0;\n}\n```\n这段代码中，编译器会选择会选择移动构造函数而不是拷贝构造，应为如果调用拷贝构造bar1会存在隐式转换.但是如果是默认的拷贝构造则会优先被调用\n[Template constructor and copy constructor](https://stackoverflow.com/questions/53902448/template-constructor-and-copy-constructor)\n\n\n## vector删除性能对比\n[vector_pop_back.cc](https://sourcegraph.com/github.com/colinblack/language/-/blob/c++/stl/vector/vector_pop_back.cc#L14)\n\n\n## vector 构造函数\nvector<inv> v(10)　构造一个size(不是capacity)为10的vector\n\n\n## 关联容器的构造函数\n如map set unordered_map 中 使用[]操作符，首先会调无参构造函数，插入元素正确的方式是使用insert, 但是这会调用两次拷贝构造，需使用std::move。使用[]操作符复制是调用的是拷贝操作符，使用insert会调拷贝构造\n```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <utility>  \n\nusing std::vector;\nstruct Item\n{\n    int i;\n    Item(int a): i(a)\n    {\n    }\n};\n\nstruct Demo\n{\n    int a_;\n    int b_;\n    vector<Item> v_;\n    Demo()\n    {\n        a_ = 0;    \n        b_ = 0;\n        std::cout << \"no param \" << std::endl;\n    }\n\n    Demo(int a, int b, vector<Item>& v)\n    {\n        a_ = a;    \n        b_ = b;\n        v_ = v;\n        std::cout << \"param \" << std::endl;\n    }\n    Demo(const Demo& obj)\n    {\n        a_ = obj.a_;    \n        b_ = obj.b_;\n        v_ = std::move(obj.v_);\n        std::cout << \"copy construct \" << std::endl;\n    }\n    Demo& operator= (const Demo& obj)\n    {\n        a_ = obj.a_;\n        b_ = obj.b_;\n        v_ = std::move(obj.v_);\n        std::cout << \"copy operator \" << std::endl;\n    }\n\n};\n\nint main()\n{\n    vector<Item> v;\n    v.push_back(Item(1));\n    std::unordered_map<unsigned, Demo> m;\n    m.insert({1, Demo(1, 2, v)});\n    m[1] = Demo(1, 2, v);\n    std::cout << m[1].a_ << \" \" << m[1].b_ << \" \" << m[1].v_.size() << \" \" << v.size() << std::endl;    \n    return 0;\n}\n\n```\n## C中的结构体\n```c\nfd_set rd;\nfd_set all;\nll = rd; //合法\nfd_set 是个结构体, 里面有一个整型数组， c++中则会调用拷贝操作符\n```\n\n## STL 中的类型\nSIZE_TYPE：不同平台下长度不一样， 64位下是8字节，unsigned log\n![size_type](/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png)\n\n这里返回值不能用unsigned去接， 否则找不到会返回-1, 实际find找不到只会返回sting::npos, 显然是类型溢出\n\n## 初始化列表 \n函数中返回变参的初始化列表    \n```cpp\nclass A{\n};\n\n\n//内置类型 \ntemplate <class... Args>\nstd::array<int, sizeof...(Args)>  make_A(Args... args){\n    return { args... };\n}\n\n//自定义类型\ntemplate <class... Args>\nstd::array<A, sizeof...(Args)>  make_A(Args... args){\n    return { (args, A())... };\n}\n\nint main(){\n    std::array<int, 3> a = make_A(1, 2, 3);\n    std::cout << a[0] << std::endl;\n    return 0;\n}\n\n```\n\n## 惯用法  \n### 命名构造器(Named Constructor)  \n解决构造函数较多时， 且函数之间差别细微时产生的歧义问题 \n```cpp\n\n//https://isocpp.org/wiki/faq/ctors#named-ctor-idiom\n#include <cmath>               // To get std::sin() and std::cos()\nclass Point {\npublic:\n  static Point rectangular(float x, float y);      // Rectangular coord's\n  static Point polar(float radius, float angle);   // Polar coordinates\n  // These static methods are the so-called \"named constructors\"\n  // ...\nprivate:\n  Point(float x, float y);     // Rectangular coordinates\n  float x_, y_;\n};\ninline Point::Point(float x, float y)\n  : x_(x), y_(y) { }\ninline Point Point::rectangular(float x, float y)\n{ return Point(x, y); }\ninline Point Point::polar(float radius, float angle)\n{ return Point(radius*std::cos(angle), radius*std::sin(angle)); }\n\n\n```\n\n## 宏  \n\n\"#\" 把一个符号直接转换为字符串\n```cpp\n    #define STRING(x) #x\n    const char *str = STRING( test_string ) //\"test_string\"\n```\n\n\"##\" 符号会连接两个符号，从而产生新的符号  \n```cpp\n   #define SIGN( x ) INT_##x\n   int SIGN( 1 ); 宏被展开后将成为：int INT_1;\n```\n\n__VA_ARGS__ 变参宏\n```cpp\n   #define LOG( format, ... ) printf( format, __VA_ARGS__ )\n   LOG( \"%s %d\", str, count );\n   //__VA_ARGS__是系统预定义宏，被自动替换为参数列表。\n```\n\n宏递归 \n```cpp\n   #define TEST( x ) ( x + TEST( x ) )\n   //为了防止无限制递归展开，语法规定，当一个宏遇到自己时，就停止展开\n   //当对TEST( 1 )进行展开时，展开过程中又发现了一个TEST，那么就将这个TEST当作一般的符号。TEST(1)\n   //最终被展开为：1 + TEST( 1) \n```\nprescan  \n当一个宏参数被放进宏体时，这个宏参数会首先被全部展开,当展开后的宏参数被放进宏体时，预处理器对新展开的宏体进行第二次扫描，并继续展开\n```cpp\n    // 因为ADDPARAM( 1 ) 是作为PARAM的宏参数，所以先将ADDPARAM( 1 )展开为INT_1，然后再将INT_1放进PARAM\n   #define PARAM( x ) x\n   #define ADDPARAM( x ) INT_##x\n   PARAM( ADDPARAM( 1 ) );\n```   \n\n例外情况是，如果PARAM宏里对宏参数使用了#或##，那么宏参数不会被展开\n```cpp\n   //将被展开为\"ADDPARAM( 1 )\"\n   #define PARAM( x ) #x\n   #define ADDPARAM( x ) INT_##x\n   PARAM( ADDPARAM( 1 ) );\n```\n\n打印出一个宏被展开后的样子  \n```cpp\n   //TO_STRING首先会将x全部展开(如果x也是一个宏的话)，然后再传给TO_STRING1转换为字符串，现在你可以这样\n   #define TO_STRING( x ) TO_STRING1( x )\n   #define TO_STRING1( x ) #x\n```  \n如果一个像函数的宏在使用时没有出现括号，那么预处理器只是将这个宏作为一般的符号处理(那就是不处理)\n\n## do...while(false)实现类似goto功能　　\n```cpp\n    do\n    {\n        if( A==false )\n            break;　　//跳出循环　\n        if( B==false )\n            break;\n        if( C==false )\n            break;\n        if( D==false )\n            break;\n        //实现功能代码\n    }while(false);\n\n//错误处理代码\n```\n## void * \n### delete void* \n```\n//使用delete　void* 仅仅释放内存而不执行析构，如果析构函数里释放内存则会存在内存泄露　\n//解决　\n//使用shared_ptr\nclass A{\npublic:\n    A(){\n       std::cout << \"A()\" << std::endl;\n    }\n    ~A(){\n       std::cout << \"~A()\" << std::endl;\n    }\n};\n\nvoid func(std::shared_ptr<void> var){\n}\n\nint main(){\n    func(std::shared_ptr<A>(new A));\n    return 0;\n}\n```\n[std::shared_ptr<void>的工作原理](https://www.cnblogs.com/imjustice/p/how_shared_ptr_void_works.html)\n\n\n## 模板\n* 模板实现写在源文件里链接时会找不到定义　\n\n## 判断类中是否存在指定的方法, 变量 \n[C++11模板:如何判断类中是否有指定名称的成员变量](https://cloud.tencent.com/developer/article/1433752)   \n[C++11 SFINEA规则_判断类是否存在某个成员函数](https://blog.csdn.net/qq_31175231/article/details/77479692)     \n[C++：如何判断类中是否存在特定的成员函数](https://blog.csdn.net/netyeaxi/article/details/83479646)     \n\n##　判断返回对象为空　\n[C++定义一个函数，返回值为一个对象，如何想办法返回一个逻辑上的空值](https://www.zhihu.com/question/51158804)\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/cpp/cpp细节.md","raw":"---\ntitle: cpp细节\ndate: 2020-01-08 19:59:12\ncategories:\n    - c++\n---\n\n## 移动构造函数中如果有拷贝动态内存要注意将指针赋空\n```cpp\nclass A{\npublic:\n    A() : m_ptr(new int(0)){std::cout << \"construct\" << std::endl;}\n    A(const A& a) : m_ptr(a.m_ptr){std::cout << \"copy construct\" << std::endl;}\n    A(A&& a) : m_ptr(a.m_ptr){a.m_ptr = nullptr; std::cout << \"move construct\" << std::endl;}\n    ~A(){delete m_ptr; std::cout << \"destruct\" << std::endl;}\npublic:\n    int* m_ptr;\n};\n```\n\n<!-- more -->\n## 重载决议\n```cpp\n#include <iostream>\n\nstruct foo{\nint a_;\ntemplate <typename T>\nfoo(T&& v) : a_{static_cast<int>(v)}\n{\n}\n\nfoo(const foo& rhs) : a_{rhs.a_}\n{\n}\n\noperator std::uint8_t(){return a_;}};\n\n\nint main()\n{\n    foo bar1{256}, bar2{bar1};\n\n    if(bar1.a_ == bar2.a_)\n        std::cout << \"hello!\" << std::endl;\n    return 0;\n}\n```\n这段代码中，编译器会选择会选择移动构造函数而不是拷贝构造，应为如果调用拷贝构造bar1会存在隐式转换.但是如果是默认的拷贝构造则会优先被调用\n[Template constructor and copy constructor](https://stackoverflow.com/questions/53902448/template-constructor-and-copy-constructor)\n\n\n## vector删除性能对比\n[vector_pop_back.cc](https://sourcegraph.com/github.com/colinblack/language/-/blob/c++/stl/vector/vector_pop_back.cc#L14)\n\n\n## vector 构造函数\nvector<inv> v(10)　构造一个size(不是capacity)为10的vector\n\n\n## 关联容器的构造函数\n如map set unordered_map 中 使用[]操作符，首先会调无参构造函数，插入元素正确的方式是使用insert, 但是这会调用两次拷贝构造，需使用std::move。使用[]操作符复制是调用的是拷贝操作符，使用insert会调拷贝构造\n```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <utility>  \n\nusing std::vector;\nstruct Item\n{\n    int i;\n    Item(int a): i(a)\n    {\n    }\n};\n\nstruct Demo\n{\n    int a_;\n    int b_;\n    vector<Item> v_;\n    Demo()\n    {\n        a_ = 0;    \n        b_ = 0;\n        std::cout << \"no param \" << std::endl;\n    }\n\n    Demo(int a, int b, vector<Item>& v)\n    {\n        a_ = a;    \n        b_ = b;\n        v_ = v;\n        std::cout << \"param \" << std::endl;\n    }\n    Demo(const Demo& obj)\n    {\n        a_ = obj.a_;    \n        b_ = obj.b_;\n        v_ = std::move(obj.v_);\n        std::cout << \"copy construct \" << std::endl;\n    }\n    Demo& operator= (const Demo& obj)\n    {\n        a_ = obj.a_;\n        b_ = obj.b_;\n        v_ = std::move(obj.v_);\n        std::cout << \"copy operator \" << std::endl;\n    }\n\n};\n\nint main()\n{\n    vector<Item> v;\n    v.push_back(Item(1));\n    std::unordered_map<unsigned, Demo> m;\n    m.insert({1, Demo(1, 2, v)});\n    m[1] = Demo(1, 2, v);\n    std::cout << m[1].a_ << \" \" << m[1].b_ << \" \" << m[1].v_.size() << \" \" << v.size() << std::endl;    \n    return 0;\n}\n\n```\n## C中的结构体\n```c\nfd_set rd;\nfd_set all;\nll = rd; //合法\nfd_set 是个结构体, 里面有一个整型数组， c++中则会调用拷贝操作符\n```\n\n## STL 中的类型\nSIZE_TYPE：不同平台下长度不一样， 64位下是8字节，unsigned log\n![size_type](/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png)\n\n这里返回值不能用unsigned去接， 否则找不到会返回-1, 实际find找不到只会返回sting::npos, 显然是类型溢出\n\n## 初始化列表 \n函数中返回变参的初始化列表    \n```cpp\nclass A{\n};\n\n\n//内置类型 \ntemplate <class... Args>\nstd::array<int, sizeof...(Args)>  make_A(Args... args){\n    return { args... };\n}\n\n//自定义类型\ntemplate <class... Args>\nstd::array<A, sizeof...(Args)>  make_A(Args... args){\n    return { (args, A())... };\n}\n\nint main(){\n    std::array<int, 3> a = make_A(1, 2, 3);\n    std::cout << a[0] << std::endl;\n    return 0;\n}\n\n```\n\n## 惯用法  \n### 命名构造器(Named Constructor)  \n解决构造函数较多时， 且函数之间差别细微时产生的歧义问题 \n```cpp\n\n//https://isocpp.org/wiki/faq/ctors#named-ctor-idiom\n#include <cmath>               // To get std::sin() and std::cos()\nclass Point {\npublic:\n  static Point rectangular(float x, float y);      // Rectangular coord's\n  static Point polar(float radius, float angle);   // Polar coordinates\n  // These static methods are the so-called \"named constructors\"\n  // ...\nprivate:\n  Point(float x, float y);     // Rectangular coordinates\n  float x_, y_;\n};\ninline Point::Point(float x, float y)\n  : x_(x), y_(y) { }\ninline Point Point::rectangular(float x, float y)\n{ return Point(x, y); }\ninline Point Point::polar(float radius, float angle)\n{ return Point(radius*std::cos(angle), radius*std::sin(angle)); }\n\n\n```\n\n## 宏  \n\n\"#\" 把一个符号直接转换为字符串\n```cpp\n    #define STRING(x) #x\n    const char *str = STRING( test_string ) //\"test_string\"\n```\n\n\"##\" 符号会连接两个符号，从而产生新的符号  \n```cpp\n   #define SIGN( x ) INT_##x\n   int SIGN( 1 ); 宏被展开后将成为：int INT_1;\n```\n\n__VA_ARGS__ 变参宏\n```cpp\n   #define LOG( format, ... ) printf( format, __VA_ARGS__ )\n   LOG( \"%s %d\", str, count );\n   //__VA_ARGS__是系统预定义宏，被自动替换为参数列表。\n```\n\n宏递归 \n```cpp\n   #define TEST( x ) ( x + TEST( x ) )\n   //为了防止无限制递归展开，语法规定，当一个宏遇到自己时，就停止展开\n   //当对TEST( 1 )进行展开时，展开过程中又发现了一个TEST，那么就将这个TEST当作一般的符号。TEST(1)\n   //最终被展开为：1 + TEST( 1) \n```\nprescan  \n当一个宏参数被放进宏体时，这个宏参数会首先被全部展开,当展开后的宏参数被放进宏体时，预处理器对新展开的宏体进行第二次扫描，并继续展开\n```cpp\n    // 因为ADDPARAM( 1 ) 是作为PARAM的宏参数，所以先将ADDPARAM( 1 )展开为INT_1，然后再将INT_1放进PARAM\n   #define PARAM( x ) x\n   #define ADDPARAM( x ) INT_##x\n   PARAM( ADDPARAM( 1 ) );\n```   \n\n例外情况是，如果PARAM宏里对宏参数使用了#或##，那么宏参数不会被展开\n```cpp\n   //将被展开为\"ADDPARAM( 1 )\"\n   #define PARAM( x ) #x\n   #define ADDPARAM( x ) INT_##x\n   PARAM( ADDPARAM( 1 ) );\n```\n\n打印出一个宏被展开后的样子  \n```cpp\n   //TO_STRING首先会将x全部展开(如果x也是一个宏的话)，然后再传给TO_STRING1转换为字符串，现在你可以这样\n   #define TO_STRING( x ) TO_STRING1( x )\n   #define TO_STRING1( x ) #x\n```  \n如果一个像函数的宏在使用时没有出现括号，那么预处理器只是将这个宏作为一般的符号处理(那就是不处理)\n\n## do...while(false)实现类似goto功能　　\n```cpp\n    do\n    {\n        if( A==false )\n            break;　　//跳出循环　\n        if( B==false )\n            break;\n        if( C==false )\n            break;\n        if( D==false )\n            break;\n        //实现功能代码\n    }while(false);\n\n//错误处理代码\n```\n## void * \n### delete void* \n```\n//使用delete　void* 仅仅释放内存而不执行析构，如果析构函数里释放内存则会存在内存泄露　\n//解决　\n//使用shared_ptr\nclass A{\npublic:\n    A(){\n       std::cout << \"A()\" << std::endl;\n    }\n    ~A(){\n       std::cout << \"~A()\" << std::endl;\n    }\n};\n\nvoid func(std::shared_ptr<void> var){\n}\n\nint main(){\n    func(std::shared_ptr<A>(new A));\n    return 0;\n}\n```\n[std::shared_ptr<void>的工作原理](https://www.cnblogs.com/imjustice/p/how_shared_ptr_void_works.html)\n\n\n## 模板\n* 模板实现写在源文件里链接时会找不到定义　\n\n## 判断类中是否存在指定的方法, 变量 \n[C++11模板:如何判断类中是否有指定名称的成员变量](https://cloud.tencent.com/developer/article/1433752)   \n[C++11 SFINEA规则_判断类是否存在某个成员函数](https://blog.csdn.net/qq_31175231/article/details/77479692)     \n[C++：如何判断类中是否存在特定的成员函数](https://blog.csdn.net/netyeaxi/article/details/83479646)     \n\n##　判断返回对象为空　\n[C++定义一个函数，返回值为一个对象，如何想办法返回一个逻辑上的空值](https://www.zhihu.com/question/51158804)\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"cpp/cpp细节","published":1,"updated":"2020-09-12T06:55:53.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss51k002554ynhl8tbecv","content":"<h2 id=\"移动构造函数中如果有拷贝动态内存要注意将指针赋空\">移动构造函数中如果有拷贝动态内存要注意将指针赋空</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A() : m_ptr(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">0</span>))&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"construct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    A(<span class=\"keyword\">const</span> A&amp; a) : m_ptr(a.m_ptr)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"copy construct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    A(A&amp;&amp; a) : m_ptr(a.m_ptr)&#123;a.m_ptr = <span class=\"literal\">nullptr</span>; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"move construct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    ~A()&#123;<span class=\"keyword\">delete</span> m_ptr; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"destruct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* m_ptr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"重载决议\">重载决议</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a_;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">foo(T&amp;&amp; v) : a_&#123;<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(v)&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"keyword\">const</span> foo&amp; rhs) : a_&#123;rhs.a_&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">operator</span> <span class=\"built_in\">std</span>::<span class=\"keyword\">uint8_t</span>()&#123;<span class=\"keyword\">return</span> a_;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    foo bar1&#123;<span class=\"number\">256</span>&#125;, bar2&#123;bar1&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bar1.a_ == bar2.a_)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码中，编译器会选择会选择移动构造函数而不是拷贝构造，应为如果调用拷贝构造bar1会存在隐式转换.但是如果是默认的拷贝构造则会优先被调用 <a href=\"https://stackoverflow.com/questions/53902448/template-constructor-and-copy-constructor\" target=\"_blank\" rel=\"noopener\">Template constructor and copy constructor</a></p>\n<h2 id=\"vector删除性能对比\">vector删除性能对比</h2>\n<p><a href=\"https://sourcegraph.com/github.com/colinblack/language/-/blob/c++/stl/vector/vector_pop_back.cc#L14\" target=\"_blank\" rel=\"noopener\">vector_pop_back.cc</a></p>\n<h2 id=\"vector-构造函数\">vector 构造函数</h2>\n<p>vector<inv> v(10)　构造一个size(不是capacity)为10的vector</p>\n<h2 id=\"关联容器的构造函数\">关联容器的构造函数</h2>\n<p>如map set unordered_map 中 使用[]操作符，首先会调无参构造函数，插入元素正确的方式是使用insert, 但是这会调用两次拷贝构造，需使用std::move。使用[]操作符复制是调用的是拷贝操作符，使用insert会调拷贝构造 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;  </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    Item(<span class=\"keyword\">int</span> a): i(a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Demo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a_;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b_;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Item&gt; v_;</span><br><span class=\"line\">    Demo()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = <span class=\"number\">0</span>;    </span><br><span class=\"line\">        b_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"no param \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Demo(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"built_in\">vector</span>&lt;Item&gt;&amp; v)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = a;    </span><br><span class=\"line\">        b_ = b;</span><br><span class=\"line\">        v_ = v;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"param \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Demo(<span class=\"keyword\">const</span> Demo&amp; obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = obj.a_;    </span><br><span class=\"line\">        b_ = obj.b_;</span><br><span class=\"line\">        v_ = <span class=\"built_in\">std</span>::move(obj.v_);</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"copy construct \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Demo&amp; <span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> Demo&amp; obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = obj.a_;</span><br><span class=\"line\">        b_ = obj.b_;</span><br><span class=\"line\">        v_ = <span class=\"built_in\">std</span>::move(obj.v_);</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"copy operator \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Item&gt; v;</span><br><span class=\"line\">    v.push_back(Item(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">unsigned</span>, Demo&gt; m;</span><br><span class=\"line\">    m.insert(&#123;<span class=\"number\">1</span>, Demo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, v)&#125;);</span><br><span class=\"line\">    m[<span class=\"number\">1</span>] = Demo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, v);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; m[<span class=\"number\">1</span>].a_ &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; m[<span class=\"number\">1</span>].b_ &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; m[<span class=\"number\">1</span>].v_.size() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; v.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> ## C中的结构体 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd_set rd;</span><br><span class=\"line\">fd_set all;</span><br><span class=\"line\">ll = rd; <span class=\"comment\">//合法</span></span><br><span class=\"line\">fd_set 是个结构体, 里面有一个整型数组， c++中则会调用拷贝操作符</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"stl-中的类型\">STL 中的类型</h2>\n<p>SIZE_TYPE：不同平台下长度不一样， 64位下是8字节，unsigned log <img src=\"/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png\" alt=\"size_type\" /></p>\n<p>这里返回值不能用unsigned去接， 否则找不到会返回-1, 实际find找不到只会返回sting::npos, 显然是类型溢出</p>\n<h2 id=\"初始化列表\">初始化列表</h2>\n<p>函数中返回变参的初始化列表<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内置类型 </span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">std</span>:</span>:<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">sizeof</span>...(Args)&gt;  make_A(Args... args)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; args... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义类型</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">std</span>:</span>:<span class=\"built_in\">array</span>&lt;A, <span class=\"keyword\">sizeof</span>...(Args)&gt;  make_A(Args... args)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; (args, A())... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 3&gt; a = make_A(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"惯用法\">惯用法</h2>\n<h3 id=\"命名构造器named-constructor\">命名构造器(Named Constructor)</h3>\n<p>解决构造函数较多时， 且函数之间差别细微时产生的歧义问题 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//https://isocpp.org/wiki/faq/ctors#named-ctor-idiom</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;               // To get std::sin() and std::cos()</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> Point <span class=\"title\">rectangular</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)</span></span>;      <span class=\"comment\">// Rectangular coord's</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> Point <span class=\"title\">polar</span><span class=\"params\">(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle)</span></span>;   <span class=\"comment\">// Polar coordinates</span></span><br><span class=\"line\">  <span class=\"comment\">// These static methods are the so-called \"named constructors\"</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  Point(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y);     <span class=\"comment\">// Rectangular coordinates</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> x_, y_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point::Point(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)</span><br><span class=\"line\">  : x_(x), y_(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point Point::rectangular(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)</span><br><span class=\"line\">&#123; <span class=\"keyword\">return</span> Point(x, y); &#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point Point::polar(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle)</span><br><span class=\"line\">&#123; <span class=\"keyword\">return</span> Point(radius*<span class=\"built_in\">std</span>::<span class=\"built_in\">cos</span>(angle), radius*<span class=\"built_in\">std</span>::<span class=\"built_in\">sin</span>(angle)); &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"宏\">宏</h2>\n<p>\"#\" 把一个符号直接转换为字符串 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STRING(x) #x</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str = STRING( test_string ) <span class=\"comment\">//\"test_string\"</span></span><br></pre></td></tr></table></figure></p>\n<p>\"##\" 符号会连接两个符号，从而产生新的符号<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIGN( x ) INT_##x</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SIGN</span><span class=\"params\">( <span class=\"number\">1</span> )</span></span>; 宏被展开后将成为：<span class=\"keyword\">int</span> INT_1;</span><br></pre></td></tr></table></figure></p>\n<p><strong>VA_ARGS</strong> 变参宏 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG( format, ... ) printf( format, __VA_ARGS__ )</span></span><br><span class=\"line\">LOG( <span class=\"string\">\"%s %d\"</span>, str, count );</span><br><span class=\"line\"><span class=\"comment\">//__VA_ARGS__是系统预定义宏，被自动替换为参数列表。</span></span><br></pre></td></tr></table></figure></p>\n<p>宏递归 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TEST( x ) ( x + TEST( x ) )</span></span><br><span class=\"line\"><span class=\"comment\">//为了防止无限制递归展开，语法规定，当一个宏遇到自己时，就停止展开</span></span><br><span class=\"line\"><span class=\"comment\">//当对TEST( 1 )进行展开时，展开过程中又发现了一个TEST，那么就将这个TEST当作一般的符号。TEST(1)</span></span><br><span class=\"line\"><span class=\"comment\">//最终被展开为：1 + TEST( 1)</span></span><br></pre></td></tr></table></figure> prescan<br />\n当一个宏参数被放进宏体时，这个宏参数会首先被全部展开,当展开后的宏参数被放进宏体时，预处理器对新展开的宏体进行第二次扫描，并继续展开 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 因为ADDPARAM( 1 ) 是作为PARAM的宏参数，所以先将ADDPARAM( 1 )展开为INT_1，然后再将INT_1放进PARAM</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> PARAM( x ) x</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADDPARAM( x ) INT_##x</span></span><br><span class=\"line\">   PARAM( ADDPARAM( <span class=\"number\">1</span> ) );</span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">例外情况是，如果PARAM宏里对宏参数使用了#或##，那么宏参数不会被展开</span><br><span class=\"line\">```cpp</span><br><span class=\"line\">   <span class=\"comment\">//将被展开为\"ADDPARAM( 1 )\"</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> PARAM( x ) #x</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADDPARAM( x ) INT_##x</span></span><br><span class=\"line\">   PARAM( ADDPARAM( <span class=\"number\">1</span> ) );</span><br></pre></td></tr></table></figure></p>\n<p>打印出一个宏被展开后的样子<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//TO_STRING首先会将x全部展开(如果x也是一个宏的话)，然后再传给TO_STRING1转换为字符串，现在你可以这样</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING( x ) TO_STRING1( x )</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING1( x ) #x</span></span><br><span class=\"line\">```  </span><br><span class=\"line\">如果一个像函数的宏在使用时没有出现括号，那么预处理器只是将这个宏作为一般的符号处理(那就是不处理)</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"meta\"># do...while(false)实现类似goto功能　　</span></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( A==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;　　<span class=\"comment\">//跳出循环　</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( B==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( C==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( D==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//实现功能代码</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误处理代码</span></span><br></pre></td></tr></table></figure> ## void * ### delete void* <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;使用delete　void* 仅仅释放内存而不执行析构，如果析构函数里释放内存则会存在内存泄露　</span><br><span class=\"line\">&#x2F;&#x2F;解决　</span><br><span class=\"line\">&#x2F;&#x2F;使用shared_ptr</span><br><span class=\"line\">class A&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    A()&#123;</span><br><span class=\"line\">       std::cout &lt;&lt; &quot;A()&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~A()&#123;</span><br><span class=\"line\">       std::cout &lt;&lt; &quot;~A()&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void func(std::shared_ptr&lt;void&gt; var)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    func(std::shared_ptr&lt;A&gt;(new A));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <a href=\"https://www.cnblogs.com/imjustice/p/how_shared_ptr_void_works.html\" target=\"_blank\" rel=\"noopener\">std::shared_ptr<void>的工作原理</a></p>\n<h2 id=\"模板\">模板</h2>\n<ul>\n<li>模板实现写在源文件里链接时会找不到定义　</li>\n</ul>\n<h2 id=\"判断类中是否存在指定的方法-变量\">判断类中是否存在指定的方法, 变量</h2>\n<p><a href=\"https://cloud.tencent.com/developer/article/1433752\" target=\"_blank\" rel=\"noopener\">C++11模板:如何判断类中是否有指定名称的成员变量</a><br />\n<a href=\"https://blog.csdn.net/qq_31175231/article/details/77479692\" target=\"_blank\" rel=\"noopener\">C++11 SFINEA规则_判断类是否存在某个成员函数</a><br />\n<a href=\"https://blog.csdn.net/netyeaxi/article/details/83479646\" target=\"_blank\" rel=\"noopener\">C++：如何判断类中是否存在特定的成员函数</a></p>\n<p>##　判断返回对象为空　 <a href=\"https://www.zhihu.com/question/51158804\" target=\"_blank\" rel=\"noopener\">C++定义一个函数，返回值为一个对象，如何想办法返回一个逻辑上的空值</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"移动构造函数中如果有拷贝动态内存要注意将指针赋空\">移动构造函数中如果有拷贝动态内存要注意将指针赋空</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A() : m_ptr(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">0</span>))&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"construct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    A(<span class=\"keyword\">const</span> A&amp; a) : m_ptr(a.m_ptr)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"copy construct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    A(A&amp;&amp; a) : m_ptr(a.m_ptr)&#123;a.m_ptr = <span class=\"literal\">nullptr</span>; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"move construct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    ~A()&#123;<span class=\"keyword\">delete</span> m_ptr; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"destruct\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* m_ptr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"重载决议\">重载决议</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a_;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">foo(T&amp;&amp; v) : a_&#123;<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(v)&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"keyword\">const</span> foo&amp; rhs) : a_&#123;rhs.a_&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">operator</span> <span class=\"built_in\">std</span>::<span class=\"keyword\">uint8_t</span>()&#123;<span class=\"keyword\">return</span> a_;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    foo bar1&#123;<span class=\"number\">256</span>&#125;, bar2&#123;bar1&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bar1.a_ == bar2.a_)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码中，编译器会选择会选择移动构造函数而不是拷贝构造，应为如果调用拷贝构造bar1会存在隐式转换.但是如果是默认的拷贝构造则会优先被调用 <a href=\"https://stackoverflow.com/questions/53902448/template-constructor-and-copy-constructor\" target=\"_blank\" rel=\"noopener\">Template constructor and copy constructor</a></p>\n<h2 id=\"vector删除性能对比\">vector删除性能对比</h2>\n<p><a href=\"https://sourcegraph.com/github.com/colinblack/language/-/blob/c++/stl/vector/vector_pop_back.cc#L14\" target=\"_blank\" rel=\"noopener\">vector_pop_back.cc</a></p>\n<h2 id=\"vector-构造函数\">vector 构造函数</h2>\n<p>vector<inv> v(10)　构造一个size(不是capacity)为10的vector</p>\n<h2 id=\"关联容器的构造函数\">关联容器的构造函数</h2>\n<p>如map set unordered_map 中 使用[]操作符，首先会调无参构造函数，插入元素正确的方式是使用insert, 但是这会调用两次拷贝构造，需使用std::move。使用[]操作符复制是调用的是拷贝操作符，使用insert会调拷贝构造 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;  </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    Item(<span class=\"keyword\">int</span> a): i(a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Demo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a_;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b_;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Item&gt; v_;</span><br><span class=\"line\">    Demo()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = <span class=\"number\">0</span>;    </span><br><span class=\"line\">        b_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"no param \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Demo(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"built_in\">vector</span>&lt;Item&gt;&amp; v)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = a;    </span><br><span class=\"line\">        b_ = b;</span><br><span class=\"line\">        v_ = v;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"param \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Demo(<span class=\"keyword\">const</span> Demo&amp; obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = obj.a_;    </span><br><span class=\"line\">        b_ = obj.b_;</span><br><span class=\"line\">        v_ = <span class=\"built_in\">std</span>::move(obj.v_);</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"copy construct \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Demo&amp; <span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> Demo&amp; obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a_ = obj.a_;</span><br><span class=\"line\">        b_ = obj.b_;</span><br><span class=\"line\">        v_ = <span class=\"built_in\">std</span>::move(obj.v_);</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"copy operator \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Item&gt; v;</span><br><span class=\"line\">    v.push_back(Item(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">unsigned</span>, Demo&gt; m;</span><br><span class=\"line\">    m.insert(&#123;<span class=\"number\">1</span>, Demo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, v)&#125;);</span><br><span class=\"line\">    m[<span class=\"number\">1</span>] = Demo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, v);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; m[<span class=\"number\">1</span>].a_ &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; m[<span class=\"number\">1</span>].b_ &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; m[<span class=\"number\">1</span>].v_.size() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; v.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> ## C中的结构体 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd_set rd;</span><br><span class=\"line\">fd_set all;</span><br><span class=\"line\">ll = rd; <span class=\"comment\">//合法</span></span><br><span class=\"line\">fd_set 是个结构体, 里面有一个整型数组， c++中则会调用拷贝操作符</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"stl-中的类型\">STL 中的类型</h2>\n<p>SIZE_TYPE：不同平台下长度不一样， 64位下是8字节，unsigned log <img src=\"/images/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png\" alt=\"size_type\" /></p>\n<p>这里返回值不能用unsigned去接， 否则找不到会返回-1, 实际find找不到只会返回sting::npos, 显然是类型溢出</p>\n<h2 id=\"初始化列表\">初始化列表</h2>\n<p>函数中返回变参的初始化列表<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内置类型 </span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">std</span>:</span>:<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">sizeof</span>...(Args)&gt;  make_A(Args... args)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; args... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义类型</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">std</span>:</span>:<span class=\"built_in\">array</span>&lt;A, <span class=\"keyword\">sizeof</span>...(Args)&gt;  make_A(Args... args)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; (args, A())... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 3&gt; a = make_A(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"惯用法\">惯用法</h2>\n<h3 id=\"命名构造器named-constructor\">命名构造器(Named Constructor)</h3>\n<p>解决构造函数较多时， 且函数之间差别细微时产生的歧义问题 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//https://isocpp.org/wiki/faq/ctors#named-ctor-idiom</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;               // To get std::sin() and std::cos()</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> Point <span class=\"title\">rectangular</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)</span></span>;      <span class=\"comment\">// Rectangular coord's</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> Point <span class=\"title\">polar</span><span class=\"params\">(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle)</span></span>;   <span class=\"comment\">// Polar coordinates</span></span><br><span class=\"line\">  <span class=\"comment\">// These static methods are the so-called \"named constructors\"</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  Point(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y);     <span class=\"comment\">// Rectangular coordinates</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> x_, y_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point::Point(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)</span><br><span class=\"line\">  : x_(x), y_(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point Point::rectangular(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)</span><br><span class=\"line\">&#123; <span class=\"keyword\">return</span> Point(x, y); &#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Point Point::polar(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle)</span><br><span class=\"line\">&#123; <span class=\"keyword\">return</span> Point(radius*<span class=\"built_in\">std</span>::<span class=\"built_in\">cos</span>(angle), radius*<span class=\"built_in\">std</span>::<span class=\"built_in\">sin</span>(angle)); &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"宏\">宏</h2>\n<p>\"#\" 把一个符号直接转换为字符串 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STRING(x) #x</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str = STRING( test_string ) <span class=\"comment\">//\"test_string\"</span></span><br></pre></td></tr></table></figure></p>\n<p>\"##\" 符号会连接两个符号，从而产生新的符号<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIGN( x ) INT_##x</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SIGN</span><span class=\"params\">( <span class=\"number\">1</span> )</span></span>; 宏被展开后将成为：<span class=\"keyword\">int</span> INT_1;</span><br></pre></td></tr></table></figure></p>\n<p><strong>VA_ARGS</strong> 变参宏 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG( format, ... ) printf( format, __VA_ARGS__ )</span></span><br><span class=\"line\">LOG( <span class=\"string\">\"%s %d\"</span>, str, count );</span><br><span class=\"line\"><span class=\"comment\">//__VA_ARGS__是系统预定义宏，被自动替换为参数列表。</span></span><br></pre></td></tr></table></figure></p>\n<p>宏递归 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TEST( x ) ( x + TEST( x ) )</span></span><br><span class=\"line\"><span class=\"comment\">//为了防止无限制递归展开，语法规定，当一个宏遇到自己时，就停止展开</span></span><br><span class=\"line\"><span class=\"comment\">//当对TEST( 1 )进行展开时，展开过程中又发现了一个TEST，那么就将这个TEST当作一般的符号。TEST(1)</span></span><br><span class=\"line\"><span class=\"comment\">//最终被展开为：1 + TEST( 1)</span></span><br></pre></td></tr></table></figure> prescan<br />\n当一个宏参数被放进宏体时，这个宏参数会首先被全部展开,当展开后的宏参数被放进宏体时，预处理器对新展开的宏体进行第二次扫描，并继续展开 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 因为ADDPARAM( 1 ) 是作为PARAM的宏参数，所以先将ADDPARAM( 1 )展开为INT_1，然后再将INT_1放进PARAM</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> PARAM( x ) x</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADDPARAM( x ) INT_##x</span></span><br><span class=\"line\">   PARAM( ADDPARAM( <span class=\"number\">1</span> ) );</span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">例外情况是，如果PARAM宏里对宏参数使用了#或##，那么宏参数不会被展开</span><br><span class=\"line\">```cpp</span><br><span class=\"line\">   <span class=\"comment\">//将被展开为\"ADDPARAM( 1 )\"</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> PARAM( x ) #x</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADDPARAM( x ) INT_##x</span></span><br><span class=\"line\">   PARAM( ADDPARAM( <span class=\"number\">1</span> ) );</span><br></pre></td></tr></table></figure></p>\n<p>打印出一个宏被展开后的样子<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//TO_STRING首先会将x全部展开(如果x也是一个宏的话)，然后再传给TO_STRING1转换为字符串，现在你可以这样</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING( x ) TO_STRING1( x )</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> TO_STRING1( x ) #x</span></span><br><span class=\"line\">```  </span><br><span class=\"line\">如果一个像函数的宏在使用时没有出现括号，那么预处理器只是将这个宏作为一般的符号处理(那就是不处理)</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"meta\"># do...while(false)实现类似goto功能　　</span></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( A==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;　　<span class=\"comment\">//跳出循环　</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( B==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( C==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( D==<span class=\"literal\">false</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//实现功能代码</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误处理代码</span></span><br></pre></td></tr></table></figure> ## void * ### delete void* <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;使用delete　void* 仅仅释放内存而不执行析构，如果析构函数里释放内存则会存在内存泄露　</span><br><span class=\"line\">&#x2F;&#x2F;解决　</span><br><span class=\"line\">&#x2F;&#x2F;使用shared_ptr</span><br><span class=\"line\">class A&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    A()&#123;</span><br><span class=\"line\">       std::cout &lt;&lt; &quot;A()&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~A()&#123;</span><br><span class=\"line\">       std::cout &lt;&lt; &quot;~A()&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void func(std::shared_ptr&lt;void&gt; var)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    func(std::shared_ptr&lt;A&gt;(new A));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <a href=\"https://www.cnblogs.com/imjustice/p/how_shared_ptr_void_works.html\" target=\"_blank\" rel=\"noopener\">std::shared_ptr<void>的工作原理</a></p>\n<h2 id=\"模板\">模板</h2>\n<ul>\n<li>模板实现写在源文件里链接时会找不到定义　</li>\n</ul>\n<h2 id=\"判断类中是否存在指定的方法-变量\">判断类中是否存在指定的方法, 变量</h2>\n<p><a href=\"https://cloud.tencent.com/developer/article/1433752\" target=\"_blank\" rel=\"noopener\">C++11模板:如何判断类中是否有指定名称的成员变量</a><br />\n<a href=\"https://blog.csdn.net/qq_31175231/article/details/77479692\" target=\"_blank\" rel=\"noopener\">C++11 SFINEA规则_判断类是否存在某个成员函数</a><br />\n<a href=\"https://blog.csdn.net/netyeaxi/article/details/83479646\" target=\"_blank\" rel=\"noopener\">C++：如何判断类中是否存在特定的成员函数</a></p>\n<p>##　判断返回对象为空　 <a href=\"https://www.zhihu.com/question/51158804\" target=\"_blank\" rel=\"noopener\">C++定义一个函数，返回值为一个对象，如何想办法返回一个逻辑上的空值</a></p>"},{"title":"patchelf","date":"2020-03-26T13:09:29.000Z","_content":"\n\n<!-- more -->\n## 简介   \nPatchELF 是一个用来修改elf格式的动态库和可执行程序的小工具，可以修改动态链接库的库名字，以及链接库的rpath。  \n\n## 安装   \nwget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz\ntar -zxvf patchelf-0.10.tar.gz\ncd patchelf-0.10\n./configure --prefix=/usr/local\nmake && make install\n\n## 使用   \n###  修改动态库的rpath   \nrpath全称是run-time search path。Linux下所有elf格式的文件都包含它，特别是可执行文件。它规定了可执行文件在寻找.so文件时的第一优先位置. linux下在链接共享库的时候可以通过rpath选项来指定运行时共享库加载路径。通过这个选项指定的路径会写到ELF文件dynamic段的RPATH里, 运行时链接器会在此路径下搜索ELF文件所依赖的共享库   \n\n编译代码时如果不指定所依赖动态库的路径很可能会编译报错  \n有如下解决方法:\n* 将所依赖的动态库路径添加到LD_LIBRARY_PATH环境变量中\n* 链接时直接将搜索路径写到rpath中，如:\n  gcc -L. -larith main.c -Wl,-rpath=依赖动态库所在路径 -o main \n  readelf -d main | grep PATH   //查看rpath\n  如果我们拿到的时已经编译好的可执行文件，就不能像方法2一样指定rpath,\n  这时可以使用pathelf, 它可以修改elf文件，如:\n  patchelf  --set-rpath 依赖动态库路径 main 或\n  patchelf  --set-rpath '$ORIGIN/lib' main //ORIGIN会在运行时解析成程序所在路径\n* ldd main //查看可执行程序依赖动态库\n\n--set-rpath 实际上是修改runpath, 关于rpath和runpath的区别，前者不会覆盖LD_LIBARAY_PATH, 后者会推荐使用后者\n\n--force-rpath pathelf的默认动作是修改runpath, 如果要修改rpath就要加上该字段\n\n```\npatchelf [--force-rpath] --set-rpath \"<desired-rpath>\" <path-to-elf>\n\n```\n<desired-path> 是用逗号分隔的目录列表，例如： /my/libs:/my/other/libs   \n如果指定--force-rpath，则设置RPATH，否则设置RUNPATH    \n\n\n### 修改动态库的名称\n如果有这样的场景: 某一个库依赖了一个第三库库的版本1，另外一个库依赖了同样的这个第三库的版本2，两个库的名字是一样的，程序运行时两个动态库都要加载，但是加载的时候由于第三库版本不一致导致程序运行过程中崩溃。这种情况下就可以通关patchelf修改其中一个的依赖库的名字，从而达到同时加载不同版本的动态库的效果，解决运行中的崩溃问题。\n相关命令:\npatchelf --print-needed test.so //查看依赖动态库，假设test.so依赖a.so\npatchelf --replace-needed a.so b.so test.so //将a.so改成b.so\n\n### 删除rpath中未使用的路径\n    patchelf --shrink-rpath 可执行文件\n    patchelf --remove-rpath <path-to-elf> //同时删除RPATH和RUNPATH   \n\n### 修改动态链接器(dynamic linker)\n在实际运行程序时，经常会遇到一个问题，电脑上安装的glibc版本不符合要求，由于glibc是最底层的库，不可能重新编译glibc，这样会导致系统崩溃。两种方法修改：\n有代码的情况下，gcc main.c -o main - -Wl --dynamic-linker 动态链接库路径\n二进制文件情况下，patchelf --set-interpreter 动态链接库路径 可执行文件\n\n\n## 兼容性 \nPatchELF已在i386-linux， x86_64-linux和powerpc-linux上进行了测试。它能在所有32位或64位，大端或小端   Linux平台上运行。稍作修改，它也可以在其他ELF平台上运行   \n\n关于动态库的搜索：\nhttps://blog.csdn.net/FoxBryant/article/details/53389804\nhttps://blog.csdn.net/dbzhang800/article/details/6918413#commentBox\nhttps://en.wikipedia.org/wiki/Rpath\n\n\n                                                                                                                             https://nixos.org/patchelf.html\n                                                                                                                              https://www.dazhuanlan.com/2019/09/24/5d89371175726/\n                                                                                                                             https://blog.csdn.net/force_eagle/article/details/48263365\n                                                                                                                             https://www.jianshu.com/p/505a32ccdc91\n                                                                                                                             http://shibing.github.io/2016/08/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8Erpath/\n                                                                                                                             https://blog.csdn.net/farmwang/article/details/73195799                                                                                                                     https://cqlin1995.github.io/2018/06/26/%E8%BF%90%E8%A1%8C%E4%B8%8D%E5%90%8Cglibc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%87%E4%BB%B6/\n\nORIGIN\nhttps://medium.com/@nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98","source":"_posts/工具/patchelf.md","raw":"---\ntitle: patchelf\ndate: 2020-03-26 21:09:29\ntags:\ncategories:\n    - tools\n---\n\n\n<!-- more -->\n## 简介   \nPatchELF 是一个用来修改elf格式的动态库和可执行程序的小工具，可以修改动态链接库的库名字，以及链接库的rpath。  \n\n## 安装   \nwget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz\ntar -zxvf patchelf-0.10.tar.gz\ncd patchelf-0.10\n./configure --prefix=/usr/local\nmake && make install\n\n## 使用   \n###  修改动态库的rpath   \nrpath全称是run-time search path。Linux下所有elf格式的文件都包含它，特别是可执行文件。它规定了可执行文件在寻找.so文件时的第一优先位置. linux下在链接共享库的时候可以通过rpath选项来指定运行时共享库加载路径。通过这个选项指定的路径会写到ELF文件dynamic段的RPATH里, 运行时链接器会在此路径下搜索ELF文件所依赖的共享库   \n\n编译代码时如果不指定所依赖动态库的路径很可能会编译报错  \n有如下解决方法:\n* 将所依赖的动态库路径添加到LD_LIBRARY_PATH环境变量中\n* 链接时直接将搜索路径写到rpath中，如:\n  gcc -L. -larith main.c -Wl,-rpath=依赖动态库所在路径 -o main \n  readelf -d main | grep PATH   //查看rpath\n  如果我们拿到的时已经编译好的可执行文件，就不能像方法2一样指定rpath,\n  这时可以使用pathelf, 它可以修改elf文件，如:\n  patchelf  --set-rpath 依赖动态库路径 main 或\n  patchelf  --set-rpath '$ORIGIN/lib' main //ORIGIN会在运行时解析成程序所在路径\n* ldd main //查看可执行程序依赖动态库\n\n--set-rpath 实际上是修改runpath, 关于rpath和runpath的区别，前者不会覆盖LD_LIBARAY_PATH, 后者会推荐使用后者\n\n--force-rpath pathelf的默认动作是修改runpath, 如果要修改rpath就要加上该字段\n\n```\npatchelf [--force-rpath] --set-rpath \"<desired-rpath>\" <path-to-elf>\n\n```\n<desired-path> 是用逗号分隔的目录列表，例如： /my/libs:/my/other/libs   \n如果指定--force-rpath，则设置RPATH，否则设置RUNPATH    \n\n\n### 修改动态库的名称\n如果有这样的场景: 某一个库依赖了一个第三库库的版本1，另外一个库依赖了同样的这个第三库的版本2，两个库的名字是一样的，程序运行时两个动态库都要加载，但是加载的时候由于第三库版本不一致导致程序运行过程中崩溃。这种情况下就可以通关patchelf修改其中一个的依赖库的名字，从而达到同时加载不同版本的动态库的效果，解决运行中的崩溃问题。\n相关命令:\npatchelf --print-needed test.so //查看依赖动态库，假设test.so依赖a.so\npatchelf --replace-needed a.so b.so test.so //将a.so改成b.so\n\n### 删除rpath中未使用的路径\n    patchelf --shrink-rpath 可执行文件\n    patchelf --remove-rpath <path-to-elf> //同时删除RPATH和RUNPATH   \n\n### 修改动态链接器(dynamic linker)\n在实际运行程序时，经常会遇到一个问题，电脑上安装的glibc版本不符合要求，由于glibc是最底层的库，不可能重新编译glibc，这样会导致系统崩溃。两种方法修改：\n有代码的情况下，gcc main.c -o main - -Wl --dynamic-linker 动态链接库路径\n二进制文件情况下，patchelf --set-interpreter 动态链接库路径 可执行文件\n\n\n## 兼容性 \nPatchELF已在i386-linux， x86_64-linux和powerpc-linux上进行了测试。它能在所有32位或64位，大端或小端   Linux平台上运行。稍作修改，它也可以在其他ELF平台上运行   \n\n关于动态库的搜索：\nhttps://blog.csdn.net/FoxBryant/article/details/53389804\nhttps://blog.csdn.net/dbzhang800/article/details/6918413#commentBox\nhttps://en.wikipedia.org/wiki/Rpath\n\n\n                                                                                                                             https://nixos.org/patchelf.html\n                                                                                                                              https://www.dazhuanlan.com/2019/09/24/5d89371175726/\n                                                                                                                             https://blog.csdn.net/force_eagle/article/details/48263365\n                                                                                                                             https://www.jianshu.com/p/505a32ccdc91\n                                                                                                                             http://shibing.github.io/2016/08/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8Erpath/\n                                                                                                                             https://blog.csdn.net/farmwang/article/details/73195799                                                                                                                     https://cqlin1995.github.io/2018/06/26/%E8%BF%90%E8%A1%8C%E4%B8%8D%E5%90%8Cglibc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%87%E4%BB%B6/\n\nORIGIN\nhttps://medium.com/@nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98","slug":"工具/patchelf","published":1,"updated":"2020-03-26T13:25:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss51l002654yn83p7ac7j","content":"<a id=\"more\"></a>\n<h2 id=\"简介\">简介</h2>\n<p>PatchELF 是一个用来修改elf格式的动态库和可执行程序的小工具，可以修改动态链接库的库名字，以及链接库的rpath。</p>\n<h2 id=\"安装\">安装</h2>\n<p>wget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz tar -zxvf patchelf-0.10.tar.gz cd patchelf-0.10 ./configure --prefix=/usr/local make &amp;&amp; make install</p>\n<h2 id=\"使用\">使用</h2>\n<h3 id=\"修改动态库的rpath\">修改动态库的rpath</h3>\n<p>rpath全称是run-time search path。Linux下所有elf格式的文件都包含它，特别是可执行文件。它规定了可执行文件在寻找.so文件时的第一优先位置. linux下在链接共享库的时候可以通过rpath选项来指定运行时共享库加载路径。通过这个选项指定的路径会写到ELF文件dynamic段的RPATH里, 运行时链接器会在此路径下搜索ELF文件所依赖的共享库</p>\n<p>编译代码时如果不指定所依赖动态库的路径很可能会编译报错<br />\n有如下解决方法: * 将所依赖的动态库路径添加到LD_LIBRARY_PATH环境变量中 * 链接时直接将搜索路径写到rpath中，如: gcc -L. -larith main.c -Wl,-rpath=依赖动态库所在路径 -o main readelf -d main | grep PATH //查看rpath 如果我们拿到的时已经编译好的可执行文件，就不能像方法2一样指定rpath, 这时可以使用pathelf, 它可以修改elf文件，如: patchelf --set-rpath 依赖动态库路径 main 或 patchelf --set-rpath '$ORIGIN/lib' main //ORIGIN会在运行时解析成程序所在路径 * ldd main //查看可执行程序依赖动态库</p>\n<p>--set-rpath 实际上是修改runpath, 关于rpath和runpath的区别，前者不会覆盖LD_LIBARAY_PATH, 后者会推荐使用后者</p>\n<p>--force-rpath pathelf的默认动作是修改runpath, 如果要修改rpath就要加上该字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">patchelf [--force-rpath] --set-rpath &quot;&lt;desired-rpath&gt;&quot; &lt;path-to-elf&gt;</span><br></pre></td></tr></table></figure>\n<p><desired-path> 是用逗号分隔的目录列表，例如： /my/libs:/my/other/libs<br />\n如果指定--force-rpath，则设置RPATH，否则设置RUNPATH</p>\n<h3 id=\"修改动态库的名称\">修改动态库的名称</h3>\n<p>如果有这样的场景: 某一个库依赖了一个第三库库的版本1，另外一个库依赖了同样的这个第三库的版本2，两个库的名字是一样的，程序运行时两个动态库都要加载，但是加载的时候由于第三库版本不一致导致程序运行过程中崩溃。这种情况下就可以通关patchelf修改其中一个的依赖库的名字，从而达到同时加载不同版本的动态库的效果，解决运行中的崩溃问题。 相关命令: patchelf --print-needed test.so //查看依赖动态库，假设test.so依赖a.so patchelf --replace-needed a.so b.so test.so //将a.so改成b.so</p>\n<h3 id=\"删除rpath中未使用的路径\">删除rpath中未使用的路径</h3>\n<pre><code>patchelf --shrink-rpath 可执行文件\npatchelf --remove-rpath &lt;path-to-elf&gt; //同时删除RPATH和RUNPATH   </code></pre>\n<h3 id=\"修改动态链接器dynamic-linker\">修改动态链接器(dynamic linker)</h3>\n<p>在实际运行程序时，经常会遇到一个问题，电脑上安装的glibc版本不符合要求，由于glibc是最底层的库，不可能重新编译glibc，这样会导致系统崩溃。两种方法修改： 有代码的情况下，gcc main.c -o main - -Wl --dynamic-linker 动态链接库路径 二进制文件情况下，patchelf --set-interpreter 动态链接库路径 可执行文件</p>\n<h2 id=\"兼容性\">兼容性</h2>\n<p>PatchELF已在i386-linux， x86_64-linux和powerpc-linux上进行了测试。它能在所有32位或64位，大端或小端 Linux平台上运行。稍作修改，它也可以在其他ELF平台上运行</p>\n<p>关于动态库的搜索： https://blog.csdn.net/FoxBryant/article/details/53389804 https://blog.csdn.net/dbzhang800/article/details/6918413#commentBox https://en.wikipedia.org/wiki/Rpath</p>\n<pre><code>                                                                                                                         https://nixos.org/patchelf.html\n                                                                                                                          https://www.dazhuanlan.com/2019/09/24/5d89371175726/\n                                                                                                                         https://blog.csdn.net/force_eagle/article/details/48263365\n                                                                                                                         https://www.jianshu.com/p/505a32ccdc91\n                                                                                                                         http://shibing.github.io/2016/08/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8Erpath/\n                                                                                                                         https://blog.csdn.net/farmwang/article/details/73195799                                                                                                                     https://cqlin1995.github.io/2018/06/26/%E8%BF%90%E8%A1%8C%E4%B8%8D%E5%90%8Cglibc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%87%E4%BB%B6/</code></pre>\n<p>ORIGIN https://medium.com/<span class=\"citation\" data-cites=\"nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98\">@nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98</span></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\">简介</h2>\n<p>PatchELF 是一个用来修改elf格式的动态库和可执行程序的小工具，可以修改动态链接库的库名字，以及链接库的rpath。</p>\n<h2 id=\"安装\">安装</h2>\n<p>wget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz tar -zxvf patchelf-0.10.tar.gz cd patchelf-0.10 ./configure --prefix=/usr/local make &amp;&amp; make install</p>\n<h2 id=\"使用\">使用</h2>\n<h3 id=\"修改动态库的rpath\">修改动态库的rpath</h3>\n<p>rpath全称是run-time search path。Linux下所有elf格式的文件都包含它，特别是可执行文件。它规定了可执行文件在寻找.so文件时的第一优先位置. linux下在链接共享库的时候可以通过rpath选项来指定运行时共享库加载路径。通过这个选项指定的路径会写到ELF文件dynamic段的RPATH里, 运行时链接器会在此路径下搜索ELF文件所依赖的共享库</p>\n<p>编译代码时如果不指定所依赖动态库的路径很可能会编译报错<br />\n有如下解决方法: * 将所依赖的动态库路径添加到LD_LIBRARY_PATH环境变量中 * 链接时直接将搜索路径写到rpath中，如: gcc -L. -larith main.c -Wl,-rpath=依赖动态库所在路径 -o main readelf -d main | grep PATH //查看rpath 如果我们拿到的时已经编译好的可执行文件，就不能像方法2一样指定rpath, 这时可以使用pathelf, 它可以修改elf文件，如: patchelf --set-rpath 依赖动态库路径 main 或 patchelf --set-rpath '$ORIGIN/lib' main //ORIGIN会在运行时解析成程序所在路径 * ldd main //查看可执行程序依赖动态库</p>\n<p>--set-rpath 实际上是修改runpath, 关于rpath和runpath的区别，前者不会覆盖LD_LIBARAY_PATH, 后者会推荐使用后者</p>\n<p>--force-rpath pathelf的默认动作是修改runpath, 如果要修改rpath就要加上该字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">patchelf [--force-rpath] --set-rpath &quot;&lt;desired-rpath&gt;&quot; &lt;path-to-elf&gt;</span><br></pre></td></tr></table></figure>\n<p><desired-path> 是用逗号分隔的目录列表，例如： /my/libs:/my/other/libs<br />\n如果指定--force-rpath，则设置RPATH，否则设置RUNPATH</p>\n<h3 id=\"修改动态库的名称\">修改动态库的名称</h3>\n<p>如果有这样的场景: 某一个库依赖了一个第三库库的版本1，另外一个库依赖了同样的这个第三库的版本2，两个库的名字是一样的，程序运行时两个动态库都要加载，但是加载的时候由于第三库版本不一致导致程序运行过程中崩溃。这种情况下就可以通关patchelf修改其中一个的依赖库的名字，从而达到同时加载不同版本的动态库的效果，解决运行中的崩溃问题。 相关命令: patchelf --print-needed test.so //查看依赖动态库，假设test.so依赖a.so patchelf --replace-needed a.so b.so test.so //将a.so改成b.so</p>\n<h3 id=\"删除rpath中未使用的路径\">删除rpath中未使用的路径</h3>\n<pre><code>patchelf --shrink-rpath 可执行文件\npatchelf --remove-rpath &lt;path-to-elf&gt; //同时删除RPATH和RUNPATH   </code></pre>\n<h3 id=\"修改动态链接器dynamic-linker\">修改动态链接器(dynamic linker)</h3>\n<p>在实际运行程序时，经常会遇到一个问题，电脑上安装的glibc版本不符合要求，由于glibc是最底层的库，不可能重新编译glibc，这样会导致系统崩溃。两种方法修改： 有代码的情况下，gcc main.c -o main - -Wl --dynamic-linker 动态链接库路径 二进制文件情况下，patchelf --set-interpreter 动态链接库路径 可执行文件</p>\n<h2 id=\"兼容性\">兼容性</h2>\n<p>PatchELF已在i386-linux， x86_64-linux和powerpc-linux上进行了测试。它能在所有32位或64位，大端或小端 Linux平台上运行。稍作修改，它也可以在其他ELF平台上运行</p>\n<p>关于动态库的搜索： https://blog.csdn.net/FoxBryant/article/details/53389804 https://blog.csdn.net/dbzhang800/article/details/6918413#commentBox https://en.wikipedia.org/wiki/Rpath</p>\n<pre><code>                                                                                                                         https://nixos.org/patchelf.html\n                                                                                                                          https://www.dazhuanlan.com/2019/09/24/5d89371175726/\n                                                                                                                         https://blog.csdn.net/force_eagle/article/details/48263365\n                                                                                                                         https://www.jianshu.com/p/505a32ccdc91\n                                                                                                                         http://shibing.github.io/2016/08/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8Erpath/\n                                                                                                                         https://blog.csdn.net/farmwang/article/details/73195799                                                                                                                     https://cqlin1995.github.io/2018/06/26/%E8%BF%90%E8%A1%8C%E4%B8%8D%E5%90%8Cglibc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%87%E4%BB%B6/</code></pre>\n<p>ORIGIN https://medium.com/<span class=\"citation\" data-cites=\"nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98\">@nehckl0/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98</span></p>"},{"title":"tcp-ip面试","date":"2020-02-16T05:31:11.000Z","_content":"## TCP和UDP的区别  \ntcp连接是永久的只要没断开  \ntcp连接是指tcp协议栈维护的状态  \ntcp 流式协议，数据是有序的。面向连接可靠，慢，开销大，容易受攻击  \nudp 数据报协议，数据不保证有序。不需要连接， 不可靠，快，开销小\n\n<!-- more -->  \n## 三次握手与四次挥手  \n三次握手：  \n &nbsp;&nbsp;&nbsp;1.客户端发起连接请求，SYN=1，seq=y, 客户端进入SYN_SENT状态  \n &nbsp;&nbsp;&nbsp;2.服务端收到连接，SYN=1,ack=y+1, seq=q, 服务端进入SYN_RCVD状态  \n &nbsp;&nbsp;&nbsp;3.客户端收到服务端的回应, ACK=1，ack=q+1, 客户端进入ESTABLISHED，服务端收到后也进入ESTABLISHED   \n\n四次挥手：  \n &nbsp;&nbsp;&nbsp;&nbsp;主动关闭：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.主动关闭方close FIN=1, 进入FIN_WAIT_1状态  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.被动关闭方收到请求, 发送 ACK=1确认后进入CLOSE_WAIT状态，主动关闭方收到后进入FIN_WAIT_2  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.被动关闭close 发送FIN=1, 进入LAST_ACK状态  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.主动关闭方收到后，发送ACK=1，进入TIME_WAIT状态  \n &nbsp;&nbsp;&nbsp;&nbsp;同时关闭：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;双方发送ACK后进入CLOSING，不会有FIN_WAIT_2,LAST_ACK, CLOSEWAIT    \n\n序号：  \n &nbsp;&nbsp;&nbsp;每个字节的数据都有自己的序号，对端接收的数据是乱序时用来确定顺序  \n\nISN:      \n &nbsp;&nbsp;&nbsp;三次握手第一个连接时的序列号     \n \n判断syn flood攻击：  \n```  \n    netstat -nap | grep SYN_RECV        \n```  \n\n防止Syn Flood方法：  \n &nbsp;&nbsp;&nbsp;1.清除所有的半连接  \n &nbsp;&nbsp;&nbsp;2.syn cookie(sysctl.conf tcp_syncookies选项)  \n\n半关闭状态：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动关闭端发送FIN，被动关闭端回ACK后  \n \n三次握手中握手包丢了会怎么样    \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在第三次握手中丢包，服务端会有一个定时器，负责重发，会重发5次，第一次1s，以后时间在上次基础上翻倍，如果客户端还是回ack服务端会发rst  \n\n\n## 三次握手，四次挥手的原因  \n三次握手:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.服务端的seq(序号)和ack(确认号)是一起发给客户端的  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.客户端如果不发ack包， 服务端一直会超时重传（防止syn flood攻击）  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.三次握手的本质是为了确认连接双方的初始序列号  \n四次挥手：            \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.ACK 和 FIN 是分开的  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.TCP是全双工协议，一端可读可写，半关闭只关闭了写端，还可以读数据  \n\n## TIME_WAIT状态是什么，为什么会有，那一方会有  \ntime_wait:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动关闭的一端发出ACK包后进入的状态，等待2MSL时间后进入CLOSE状态  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动发送 RST段的一方，不会进入TIME_WAIT 状态   \n原因:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.保证TCP全双工通信可靠性  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果有TIME_WAIT，对端没收到ACK包会重发FIN包，在2MSL内会重发ACK包  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果没有TIME_WAIT，主动关闭方直接进入CLOSE状态，收到FIN包时会返回RST错误(ECONNRESET)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果主动关闭方挂掉，对端会一直重发FIN，知道重置连接  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 保证建立新连接时，旧连接重传的包在网络中小时而不影响新连接  \nTIME_WAIT引发的问题:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进程退出后，端口不能再次绑定(解决:SO_REUSEADDR)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.出现大量的TIME_WAIT  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般在高并发短连接，服务器主动关闭socket, 出现大量TIME_WAIT，导致部分用户连不上  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决办法：修改内核相关参数(/etc/sysctl.conf, 重用与快速回收)       \n\n\n## TCP相关操作  \n查看系统支持端口号范围：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /proc/sys/net/ipv4/ip_local_port_range  \n扩大可用端口范围:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo 15000 65000 > /proc/sys/net/ipv4/ip_local_port_range  \n查看tcp连接默认的timeout时长:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /proc/sys/net/ipv4/tcp_fin_timeout  \n缩短timeout的时间:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout  \n统计tcp各个状态数:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;netstat -ant|awk '/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}'  \n知名服务器端口定义：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/etc/services  \n\n## TCP头部  \n固定20 + 可选项40 = 最大60  \nmss在可选项中  \nmss和MTU：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mss: 最大报文段长度，tcp能发的数据长度，只在三次握手的第一次握手发送给对端（一般1460）  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtu: 最大传输单元， 网卡一次发送数据的大小（一般是1500）  \n修改mss iptable  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看mtu netstat -i  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改mtu vim /etc/network/interfaces /etc/init.d/networking restart  \nPUSH:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送方最后发送的TCP段将会被标记为push  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接收方收到push标志到段，将接收缓冲区的内容拷贝到应用进程  \n\nURG与紧急指针:  \n紧急指针只在URG=1的时候有用  \n紧急指针实际是序列号的偏移量  \nTCP只支持一个字节的紧急数据  \n紧急数据及linux中的带外数据（MSG_OOB）  \n可以在select设置exceptfds，在epoll中EPOLLPRI监听  \nseq:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决乱序  \nack:   \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决丢包  \nwindow:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;流控  \ntcpflag:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tcp状态机  \ntcp头中的窗口是指真个滑动窗口大小吗？  \n\n\n## 流量控制  \n延时ack：  \n &nbsp;&nbsp;&nbsp;接收数据的一方会根据需要延时发送ack(linux 中动态调节算法在快速ack和延时ack中切换)  \n &nbsp;&nbsp;&nbsp;一般情况下：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.当接收方有数据发送，ack会和数据一起发送  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.如果没有数据会延时200ms，在这期间有数据会和数据一起发送，如果过了时间没有数据，ack会被发送  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.如果延时期间又有第二个数据到来会立即发送ack  \n &nbsp;&nbsp;&nbsp;优点：减少了发送的分段，提高了网络利用率，节省带宽  \n &nbsp;&nbsp;&nbsp;缺点：增大网络延迟  \n &nbsp;&nbsp;&nbsp;关闭延时发送：TCP_QUICKACK  \n &nbsp;&nbsp;&nbsp;注意：每次recv后要重新设置  \nnagle算法:  \n &nbsp;&nbsp;&nbsp;发送数据的一方会累积数据直到接收方发来ack包后才将数据一起发送出去（最多累积到一个mss的大小），为了尽可能的发送大块数据  \n &nbsp;&nbsp;&nbsp;优点：提高了吞吐量  \n &nbsp;&nbsp;&nbsp;缺点：增大网络延时  \n &nbsp;&nbsp;&nbsp;nagle和延时确认都是为了减少小包   \n   \n滑动窗口:  \n &nbsp;&nbsp;&nbsp;目的为了做流量控制，防止对方发送过快导致缓冲区被塞满, 在tcp头的窗口字段确定其大小  \n &nbsp;&nbsp;&nbsp;持续定时器：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当对端窗口为0是，为防止本端死等，会定时发送长度为1的探测报文段（时间层指数增长）  \n &nbsp;&nbsp;&nbsp;问题：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;糊涂窗口综合征：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;滑动窗口变小导致发送的数据量表小，久之导致网络传输效率变低  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决方法:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nagle算法  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clark算法和延时ACK  \n\n## 拥塞控制  \n网络拥塞:  \n &nbsp;&nbsp;&nbsp;路由器等网络设备来不及处理高数率到来的流量出现的丢包现象  \n &nbsp;&nbsp;&nbsp;判断：1.ack超时 2.连续收到同样的ack  \n\n慢启动：  \n &nbsp;&nbsp;&nbsp;tcp会将大的数据分成若干小的分组，分为若干次发送，而不是一次全部发出去  \n &nbsp;&nbsp;&nbsp;cwdn按照两倍大小增加，大于慢启动门限是进入拥塞避免算法（指数增长）  \n &nbsp;&nbsp;&nbsp;拥塞窗口（cwdn）  \n &nbsp;&nbsp;&nbsp;慢启动门限（ssthresh）  \n\n拥塞避免算法  \n &nbsp;&nbsp;&nbsp;cwdn 每次大小加1（线性增长）, 出现拥塞时cwdn和ssthresh被重置（一般ssthresh=cwdn/2, cwdn=1）， 然后进入慢启动算法  \n &nbsp;&nbsp;&nbsp;加法增大，乘法减小  \n\n快重传：  \n &nbsp;&nbsp;&nbsp;接收方收到一个失序的报文段， 会不断重发相同的ACK（没收到包的序号）  \n &nbsp;&nbsp;&nbsp;发送方连续收到三个相同的Ack, 会立即发送对方Ack的包  \n &nbsp;&nbsp;&nbsp;解决了超时的问题， 但是没有解决重传哪些包的问题（需要sack算法）                            \n\n快恢复：  \n &nbsp;&nbsp;&nbsp;出现超时重传或快重传（连续三个重复的ACK包)时:  \n &nbsp;&nbsp;&nbsp;ssthresh &nbsp;= cwdn/2  \n &nbsp;&nbsp;&nbsp;cwdn = ssthresh  \n\n## 重传机制  \n快速重传与超时重传  \n超时重传:  \n &nbsp;&nbsp;&nbsp;RTO:(超时重传时间，发送方发出一个包，会启动定时器，定时器超时未收到包，则会重发，这个时间成为重传超时)， 由RTT（数据往返时间）根据公式计算出  \n &nbsp;&nbsp;&nbsp;RTO时间指数方式增加  \n &nbsp;&nbsp;&nbsp;定时器超时后，在滑动窗口内没有收到ACK的包都会重传（sack算法）  \n设置重发次数：  \n &nbsp;&nbsp;&nbsp;/proc/sys/net/ipv4/tcp_retries1  \n &nbsp;&nbsp;&nbsp;/proc/sys/net/ipv4/tcp_retries2  \n\n## 保活机制  \n保活定时器  \n服务端探测死连机制（探测客户端宕机或重启, &nbsp;如果是主动关闭连接）  \n缺点：无法识别客户端宕机和还是报文不可达  \n设置：SO_KEEPALIVE  \n\n## 数据在不同层的叫法  \n数据链路层 帧  \n网络层 包（tcp）, 报（udp）  \n传输层 段  \n\n## arp是什么，实现，怎么找到MAC, arp欺骗  \n利用arp缓存中ip与mac的映射，如果有对方mac可以直接通信，没有发给rap广播， 当对方收到后会将自己的MAC填到包里面返回  \n同时将发送方的ip和mac映射放在arp缓存中  \narp欺骗: 主要方式是中间人攻击，达到获取通信双方数据又不被发现的效果  \n预防：使用arp网关  \n\n\n## TCP粘包处理  \n利用包体长度，bodylen  \n &nbsp;&nbsp;&nbsp;1. 如果缓冲区里面的消息长度小于消息头长度，不处理  \n &nbsp;&nbsp;&nbsp;2. 如果缓冲区长度大于等于bodylen + headlen, 处理  \n\n\n## HTTP 请求的过程  \n建立TCP连接->发送请求行->发送请求头->（到达服务器）发送状态行->发送响应头->发送响应数据->断TCP连接  \n\n\n\n\n参考：  \n[TCP的TIME_WAIT快速回收与重用](https://blog.csdn.net/dog250/article/details/13760985)  \n[解决TIME_WAIT过多造成的问题](https://www.cnblogs.com/dadonggg/p/8778318.html)  \n[TCP/IP TIME_WAIT状态原理](https://elf8848.iteye.com/blog/1739571)  \n[tcp状态介绍最详细--没有之一](https://blog.csdn.net/wuji0447/article/details/78356875)  \n[“三次握手，四次挥手”你真的懂吗？](https://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&mid=2666543559&idx=1&sn=83cf0e9367511d6b311909a5b3dfc81e&chksm=80dcfd6cb7ab747af19259cce70621b269c5fae25582af7c57f5be904bc18e216625cf6f4157&mpshare=1&scene=24&srcid=0110n9eggIf8eEIoZnl2Loe5&key=02793bf78abe30c4c571e7a6695d4645e0c3637a779c7915ba755677395083d39ee60f9a9d204e28b6d06d279fff9d0a25171eac0cb3e8f126cf46a027d6459f015c13308729af2f9d27c88c38e270c4&ascene=14&uin=ODI0NTI3MTg0&devicetype=Windows+7&version=62060728&lang=zh_CN&pass_ticket=wXb/sgBYyv1S7izs0CuJXuDgNxtBHPyjdhjnyZMw7twBDQnbBA0IyQV1EnfMvwsI)  \n[TCP-IP详解：Delay ACK](https://blog.csdn.net/wdscq1234/article/details/52430382)  \n[TCP Nagle算法&&延迟确认机制](https://my.oschina.net/xinxingegeya/blog/485643)  \n[TCP中的Nagle算法](https://blog.csdn.net/ce123_zhouwei/article/details/9050797)  \n[TCP-IP详解：滑动窗口（Sliding Window)](https://blog.csdn.net/wdscq1234/article/details/52444277)  \n[TCP协议的滑动窗口具体是怎样控制流量的](https://www.zhihu.com/question/32255109)  \n[TCP带外数据（URG，MSG_OOB](https://blog.csdn.net/ordeder/article/details/43243425)  \n[带外数据和TCP紧急指针](https://blog.csdn.net/gbasp2008/article/details/47666421)  \n[TCP紧急数据](https://blog.csdn.net/u012122743/article/details/46484675)  \n[TCP-IP详解：超时重传机制](https://blog.csdn.net/wdscq1234/article/details/52476231)  \n[TCP-IP详解：SACK选项（Selective Acknowledgment）](https://blog.csdn.net/wdscq1234/article/details/52503315)  \n[27-TCP 协议（快重传与快恢复）](https://blog.csdn.net/q1007729991/article/details/70185266)  \n[聊一聊重传次数](https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/)  \n[TCP/IP重传超时--RTO](http://www.orczhou.com/index.php/2011/10/tcpip-protocol-start-rto/)  \n[0-Linux 网络编程修炼指南——内功心法](https://blog.csdn.net/q1007729991/article/details/69091877)  \n[TCP 的那些事儿（上）](https://coolshell.cn/articles/11564.html)  \n[从TCP三次握手说起--浅析TCP协议中的疑难杂症（1)](https://zhuanlan.zhihu.com/p/25569676)  \n[从TCP三次握手说起--浅析TCP协议中的疑难杂症（2）](https://zhuanlan.zhihu.com/p/25596865)  \n[中间人攻击——ARP欺骗的原理、实战及防御](http://netsecurity.51cto.com/art/201303/386031.htm)  \n[ARP欺骗的两种方式](https://blog.csdn.net/qq_37969433/article/details/79587026)  \n[浅析TCP之头部可选项](https://blog.csdn.net/Mary19920410/article/details/72857764)  \n[TCP报文格式详解](https://blog.csdn.net/mary19920410/article/details/58030147)  \n[TCP和UDP的优缺点及区别](https://www.cnblogs.com/xiaomayizoe/p/5258754.html)  \n[muduo库chat server对TCP粘包问题的处理](https://blog.csdn.net/freeelinux/article/details/53823731)  \n[TCP分包方法 && 粘包处理策略](https://blog.csdn.net/yusiguyuan/article/details/17270679)  \n[Linux 网络编程——TCP 粘包及其解决方案](https://blog.csdn.net/lu_embedded/article/details/77430050)  \n[HTTP面试题都在这里](https://juejin.im/post/5a8102e0f265da4e710f5910)  \n[HTTP是一个无状态的协议。这句话里的无状态是什么意思](https://www.zhihu.com/question/23202402)  \n[服务端是如何主动推送信息到客户端的？](https://www.zhihu.com/question/24938934)  \n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)  \n[程序员过关斩将--面试官再问你Http请求过程，怼回去！](https://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&mid=2247484323&idx=1&sn=5513334623b73352034a828badfe985d&chksm=972afa86a05d7390fe96222718fd9ce6c21fe700af7e7f9396449815a5323e7315d96681bcac&scene=0&xtrack=1&key=a539a6045067ac190e5c71cc4876a35ec2cab39ecc57c3618a3c22861a71c8bfa13cb8c4e1190e7ca56b6fa54c00b894874dabfdb24eb7aa3f45382bd07dd271a25982549dfd70f959b71db7aeb5d371&ascene=14&uin=ODI0NTI3MTg0&devicetype=Windows+7&version=62060739&lang=zh_CN&pass_ticket=UG6jIZiPy0h82EWKj8fu5ZN0dIyjwygUpMCiLLSskgXdEE9mhfeXBtYPbOR2lLEE)  \n\n\n\n\n\n\n","source":"_posts/面试/tcp-ip面试.md","raw":"---\ntitle: tcp-ip面试\ndate: 2020-02-16 13:31:11\ncategories:\n    - 协议 \ntags:\n    - 面试\n---\n## TCP和UDP的区别  \ntcp连接是永久的只要没断开  \ntcp连接是指tcp协议栈维护的状态  \ntcp 流式协议，数据是有序的。面向连接可靠，慢，开销大，容易受攻击  \nudp 数据报协议，数据不保证有序。不需要连接， 不可靠，快，开销小\n\n<!-- more -->  \n## 三次握手与四次挥手  \n三次握手：  \n &nbsp;&nbsp;&nbsp;1.客户端发起连接请求，SYN=1，seq=y, 客户端进入SYN_SENT状态  \n &nbsp;&nbsp;&nbsp;2.服务端收到连接，SYN=1,ack=y+1, seq=q, 服务端进入SYN_RCVD状态  \n &nbsp;&nbsp;&nbsp;3.客户端收到服务端的回应, ACK=1，ack=q+1, 客户端进入ESTABLISHED，服务端收到后也进入ESTABLISHED   \n\n四次挥手：  \n &nbsp;&nbsp;&nbsp;&nbsp;主动关闭：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.主动关闭方close FIN=1, 进入FIN_WAIT_1状态  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.被动关闭方收到请求, 发送 ACK=1确认后进入CLOSE_WAIT状态，主动关闭方收到后进入FIN_WAIT_2  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.被动关闭close 发送FIN=1, 进入LAST_ACK状态  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.主动关闭方收到后，发送ACK=1，进入TIME_WAIT状态  \n &nbsp;&nbsp;&nbsp;&nbsp;同时关闭：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;双方发送ACK后进入CLOSING，不会有FIN_WAIT_2,LAST_ACK, CLOSEWAIT    \n\n序号：  \n &nbsp;&nbsp;&nbsp;每个字节的数据都有自己的序号，对端接收的数据是乱序时用来确定顺序  \n\nISN:      \n &nbsp;&nbsp;&nbsp;三次握手第一个连接时的序列号     \n \n判断syn flood攻击：  \n```  \n    netstat -nap | grep SYN_RECV        \n```  \n\n防止Syn Flood方法：  \n &nbsp;&nbsp;&nbsp;1.清除所有的半连接  \n &nbsp;&nbsp;&nbsp;2.syn cookie(sysctl.conf tcp_syncookies选项)  \n\n半关闭状态：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动关闭端发送FIN，被动关闭端回ACK后  \n \n三次握手中握手包丢了会怎么样    \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在第三次握手中丢包，服务端会有一个定时器，负责重发，会重发5次，第一次1s，以后时间在上次基础上翻倍，如果客户端还是回ack服务端会发rst  \n\n\n## 三次握手，四次挥手的原因  \n三次握手:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.服务端的seq(序号)和ack(确认号)是一起发给客户端的  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.客户端如果不发ack包， 服务端一直会超时重传（防止syn flood攻击）  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.三次握手的本质是为了确认连接双方的初始序列号  \n四次挥手：            \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.ACK 和 FIN 是分开的  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.TCP是全双工协议，一端可读可写，半关闭只关闭了写端，还可以读数据  \n\n## TIME_WAIT状态是什么，为什么会有，那一方会有  \ntime_wait:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动关闭的一端发出ACK包后进入的状态，等待2MSL时间后进入CLOSE状态  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主动发送 RST段的一方，不会进入TIME_WAIT 状态   \n原因:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.保证TCP全双工通信可靠性  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果有TIME_WAIT，对端没收到ACK包会重发FIN包，在2MSL内会重发ACK包  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果没有TIME_WAIT，主动关闭方直接进入CLOSE状态，收到FIN包时会返回RST错误(ECONNRESET)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果主动关闭方挂掉，对端会一直重发FIN，知道重置连接  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 保证建立新连接时，旧连接重传的包在网络中小时而不影响新连接  \nTIME_WAIT引发的问题:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进程退出后，端口不能再次绑定(解决:SO_REUSEADDR)  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.出现大量的TIME_WAIT  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般在高并发短连接，服务器主动关闭socket, 出现大量TIME_WAIT，导致部分用户连不上  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决办法：修改内核相关参数(/etc/sysctl.conf, 重用与快速回收)       \n\n\n## TCP相关操作  \n查看系统支持端口号范围：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /proc/sys/net/ipv4/ip_local_port_range  \n扩大可用端口范围:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo 15000 65000 > /proc/sys/net/ipv4/ip_local_port_range  \n查看tcp连接默认的timeout时长:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /proc/sys/net/ipv4/tcp_fin_timeout  \n缩短timeout的时间:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout  \n统计tcp各个状态数:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;netstat -ant|awk '/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}'  \n知名服务器端口定义：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/etc/services  \n\n## TCP头部  \n固定20 + 可选项40 = 最大60  \nmss在可选项中  \nmss和MTU：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mss: 最大报文段长度，tcp能发的数据长度，只在三次握手的第一次握手发送给对端（一般1460）  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtu: 最大传输单元， 网卡一次发送数据的大小（一般是1500）  \n修改mss iptable  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看mtu netstat -i  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改mtu vim /etc/network/interfaces /etc/init.d/networking restart  \nPUSH:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送方最后发送的TCP段将会被标记为push  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接收方收到push标志到段，将接收缓冲区的内容拷贝到应用进程  \n\nURG与紧急指针:  \n紧急指针只在URG=1的时候有用  \n紧急指针实际是序列号的偏移量  \nTCP只支持一个字节的紧急数据  \n紧急数据及linux中的带外数据（MSG_OOB）  \n可以在select设置exceptfds，在epoll中EPOLLPRI监听  \nseq:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决乱序  \nack:   \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决丢包  \nwindow:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;流控  \ntcpflag:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tcp状态机  \ntcp头中的窗口是指真个滑动窗口大小吗？  \n\n\n## 流量控制  \n延时ack：  \n &nbsp;&nbsp;&nbsp;接收数据的一方会根据需要延时发送ack(linux 中动态调节算法在快速ack和延时ack中切换)  \n &nbsp;&nbsp;&nbsp;一般情况下：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.当接收方有数据发送，ack会和数据一起发送  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.如果没有数据会延时200ms，在这期间有数据会和数据一起发送，如果过了时间没有数据，ack会被发送  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.如果延时期间又有第二个数据到来会立即发送ack  \n &nbsp;&nbsp;&nbsp;优点：减少了发送的分段，提高了网络利用率，节省带宽  \n &nbsp;&nbsp;&nbsp;缺点：增大网络延迟  \n &nbsp;&nbsp;&nbsp;关闭延时发送：TCP_QUICKACK  \n &nbsp;&nbsp;&nbsp;注意：每次recv后要重新设置  \nnagle算法:  \n &nbsp;&nbsp;&nbsp;发送数据的一方会累积数据直到接收方发来ack包后才将数据一起发送出去（最多累积到一个mss的大小），为了尽可能的发送大块数据  \n &nbsp;&nbsp;&nbsp;优点：提高了吞吐量  \n &nbsp;&nbsp;&nbsp;缺点：增大网络延时  \n &nbsp;&nbsp;&nbsp;nagle和延时确认都是为了减少小包   \n   \n滑动窗口:  \n &nbsp;&nbsp;&nbsp;目的为了做流量控制，防止对方发送过快导致缓冲区被塞满, 在tcp头的窗口字段确定其大小  \n &nbsp;&nbsp;&nbsp;持续定时器：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当对端窗口为0是，为防止本端死等，会定时发送长度为1的探测报文段（时间层指数增长）  \n &nbsp;&nbsp;&nbsp;问题：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;糊涂窗口综合征：  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;滑动窗口变小导致发送的数据量表小，久之导致网络传输效率变低  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决方法:  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nagle算法  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clark算法和延时ACK  \n\n## 拥塞控制  \n网络拥塞:  \n &nbsp;&nbsp;&nbsp;路由器等网络设备来不及处理高数率到来的流量出现的丢包现象  \n &nbsp;&nbsp;&nbsp;判断：1.ack超时 2.连续收到同样的ack  \n\n慢启动：  \n &nbsp;&nbsp;&nbsp;tcp会将大的数据分成若干小的分组，分为若干次发送，而不是一次全部发出去  \n &nbsp;&nbsp;&nbsp;cwdn按照两倍大小增加，大于慢启动门限是进入拥塞避免算法（指数增长）  \n &nbsp;&nbsp;&nbsp;拥塞窗口（cwdn）  \n &nbsp;&nbsp;&nbsp;慢启动门限（ssthresh）  \n\n拥塞避免算法  \n &nbsp;&nbsp;&nbsp;cwdn 每次大小加1（线性增长）, 出现拥塞时cwdn和ssthresh被重置（一般ssthresh=cwdn/2, cwdn=1）， 然后进入慢启动算法  \n &nbsp;&nbsp;&nbsp;加法增大，乘法减小  \n\n快重传：  \n &nbsp;&nbsp;&nbsp;接收方收到一个失序的报文段， 会不断重发相同的ACK（没收到包的序号）  \n &nbsp;&nbsp;&nbsp;发送方连续收到三个相同的Ack, 会立即发送对方Ack的包  \n &nbsp;&nbsp;&nbsp;解决了超时的问题， 但是没有解决重传哪些包的问题（需要sack算法）                            \n\n快恢复：  \n &nbsp;&nbsp;&nbsp;出现超时重传或快重传（连续三个重复的ACK包)时:  \n &nbsp;&nbsp;&nbsp;ssthresh &nbsp;= cwdn/2  \n &nbsp;&nbsp;&nbsp;cwdn = ssthresh  \n\n## 重传机制  \n快速重传与超时重传  \n超时重传:  \n &nbsp;&nbsp;&nbsp;RTO:(超时重传时间，发送方发出一个包，会启动定时器，定时器超时未收到包，则会重发，这个时间成为重传超时)， 由RTT（数据往返时间）根据公式计算出  \n &nbsp;&nbsp;&nbsp;RTO时间指数方式增加  \n &nbsp;&nbsp;&nbsp;定时器超时后，在滑动窗口内没有收到ACK的包都会重传（sack算法）  \n设置重发次数：  \n &nbsp;&nbsp;&nbsp;/proc/sys/net/ipv4/tcp_retries1  \n &nbsp;&nbsp;&nbsp;/proc/sys/net/ipv4/tcp_retries2  \n\n## 保活机制  \n保活定时器  \n服务端探测死连机制（探测客户端宕机或重启, &nbsp;如果是主动关闭连接）  \n缺点：无法识别客户端宕机和还是报文不可达  \n设置：SO_KEEPALIVE  \n\n## 数据在不同层的叫法  \n数据链路层 帧  \n网络层 包（tcp）, 报（udp）  \n传输层 段  \n\n## arp是什么，实现，怎么找到MAC, arp欺骗  \n利用arp缓存中ip与mac的映射，如果有对方mac可以直接通信，没有发给rap广播， 当对方收到后会将自己的MAC填到包里面返回  \n同时将发送方的ip和mac映射放在arp缓存中  \narp欺骗: 主要方式是中间人攻击，达到获取通信双方数据又不被发现的效果  \n预防：使用arp网关  \n\n\n## TCP粘包处理  \n利用包体长度，bodylen  \n &nbsp;&nbsp;&nbsp;1. 如果缓冲区里面的消息长度小于消息头长度，不处理  \n &nbsp;&nbsp;&nbsp;2. 如果缓冲区长度大于等于bodylen + headlen, 处理  \n\n\n## HTTP 请求的过程  \n建立TCP连接->发送请求行->发送请求头->（到达服务器）发送状态行->发送响应头->发送响应数据->断TCP连接  \n\n\n\n\n参考：  \n[TCP的TIME_WAIT快速回收与重用](https://blog.csdn.net/dog250/article/details/13760985)  \n[解决TIME_WAIT过多造成的问题](https://www.cnblogs.com/dadonggg/p/8778318.html)  \n[TCP/IP TIME_WAIT状态原理](https://elf8848.iteye.com/blog/1739571)  \n[tcp状态介绍最详细--没有之一](https://blog.csdn.net/wuji0447/article/details/78356875)  \n[“三次握手，四次挥手”你真的懂吗？](https://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&mid=2666543559&idx=1&sn=83cf0e9367511d6b311909a5b3dfc81e&chksm=80dcfd6cb7ab747af19259cce70621b269c5fae25582af7c57f5be904bc18e216625cf6f4157&mpshare=1&scene=24&srcid=0110n9eggIf8eEIoZnl2Loe5&key=02793bf78abe30c4c571e7a6695d4645e0c3637a779c7915ba755677395083d39ee60f9a9d204e28b6d06d279fff9d0a25171eac0cb3e8f126cf46a027d6459f015c13308729af2f9d27c88c38e270c4&ascene=14&uin=ODI0NTI3MTg0&devicetype=Windows+7&version=62060728&lang=zh_CN&pass_ticket=wXb/sgBYyv1S7izs0CuJXuDgNxtBHPyjdhjnyZMw7twBDQnbBA0IyQV1EnfMvwsI)  \n[TCP-IP详解：Delay ACK](https://blog.csdn.net/wdscq1234/article/details/52430382)  \n[TCP Nagle算法&&延迟确认机制](https://my.oschina.net/xinxingegeya/blog/485643)  \n[TCP中的Nagle算法](https://blog.csdn.net/ce123_zhouwei/article/details/9050797)  \n[TCP-IP详解：滑动窗口（Sliding Window)](https://blog.csdn.net/wdscq1234/article/details/52444277)  \n[TCP协议的滑动窗口具体是怎样控制流量的](https://www.zhihu.com/question/32255109)  \n[TCP带外数据（URG，MSG_OOB](https://blog.csdn.net/ordeder/article/details/43243425)  \n[带外数据和TCP紧急指针](https://blog.csdn.net/gbasp2008/article/details/47666421)  \n[TCP紧急数据](https://blog.csdn.net/u012122743/article/details/46484675)  \n[TCP-IP详解：超时重传机制](https://blog.csdn.net/wdscq1234/article/details/52476231)  \n[TCP-IP详解：SACK选项（Selective Acknowledgment）](https://blog.csdn.net/wdscq1234/article/details/52503315)  \n[27-TCP 协议（快重传与快恢复）](https://blog.csdn.net/q1007729991/article/details/70185266)  \n[聊一聊重传次数](https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/)  \n[TCP/IP重传超时--RTO](http://www.orczhou.com/index.php/2011/10/tcpip-protocol-start-rto/)  \n[0-Linux 网络编程修炼指南——内功心法](https://blog.csdn.net/q1007729991/article/details/69091877)  \n[TCP 的那些事儿（上）](https://coolshell.cn/articles/11564.html)  \n[从TCP三次握手说起--浅析TCP协议中的疑难杂症（1)](https://zhuanlan.zhihu.com/p/25569676)  \n[从TCP三次握手说起--浅析TCP协议中的疑难杂症（2）](https://zhuanlan.zhihu.com/p/25596865)  \n[中间人攻击——ARP欺骗的原理、实战及防御](http://netsecurity.51cto.com/art/201303/386031.htm)  \n[ARP欺骗的两种方式](https://blog.csdn.net/qq_37969433/article/details/79587026)  \n[浅析TCP之头部可选项](https://blog.csdn.net/Mary19920410/article/details/72857764)  \n[TCP报文格式详解](https://blog.csdn.net/mary19920410/article/details/58030147)  \n[TCP和UDP的优缺点及区别](https://www.cnblogs.com/xiaomayizoe/p/5258754.html)  \n[muduo库chat server对TCP粘包问题的处理](https://blog.csdn.net/freeelinux/article/details/53823731)  \n[TCP分包方法 && 粘包处理策略](https://blog.csdn.net/yusiguyuan/article/details/17270679)  \n[Linux 网络编程——TCP 粘包及其解决方案](https://blog.csdn.net/lu_embedded/article/details/77430050)  \n[HTTP面试题都在这里](https://juejin.im/post/5a8102e0f265da4e710f5910)  \n[HTTP是一个无状态的协议。这句话里的无状态是什么意思](https://www.zhihu.com/question/23202402)  \n[服务端是如何主动推送信息到客户端的？](https://www.zhihu.com/question/24938934)  \n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)  \n[程序员过关斩将--面试官再问你Http请求过程，怼回去！](https://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&mid=2247484323&idx=1&sn=5513334623b73352034a828badfe985d&chksm=972afa86a05d7390fe96222718fd9ce6c21fe700af7e7f9396449815a5323e7315d96681bcac&scene=0&xtrack=1&key=a539a6045067ac190e5c71cc4876a35ec2cab39ecc57c3618a3c22861a71c8bfa13cb8c4e1190e7ca56b6fa54c00b894874dabfdb24eb7aa3f45382bd07dd271a25982549dfd70f959b71db7aeb5d371&ascene=14&uin=ODI0NTI3MTg0&devicetype=Windows+7&version=62060739&lang=zh_CN&pass_ticket=UG6jIZiPy0h82EWKj8fu5ZN0dIyjwygUpMCiLLSskgXdEE9mhfeXBtYPbOR2lLEE)  \n\n\n\n\n\n\n","slug":"面试/tcp-ip面试","published":1,"updated":"2020-03-03T12:22:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhhss51l002754yncach8vsu","content":"<h2 id=\"tcp和udp的区别\">TCP和UDP的区别</h2>\n<p>tcp连接是永久的只要没断开<br />\ntcp连接是指tcp协议栈维护的状态<br />\ntcp 流式协议，数据是有序的。面向连接可靠，慢，开销大，容易受攻击<br />\nudp 数据报协议，数据不保证有序。不需要连接， 不可靠，快，开销小</p>\n<a id=\"more\"></a>\n<h2 id=\"三次握手与四次挥手\">三次握手与四次挥手</h2>\n<p>三次握手：<br />\n   1.客户端发起连接请求，SYN=1，seq=y, 客户端进入SYN_SENT状态<br />\n   2.服务端收到连接，SYN=1,ack=y+1, seq=q, 服务端进入SYN_RCVD状态<br />\n   3.客户端收到服务端的回应, ACK=1，ack=q+1, 客户端进入ESTABLISHED，服务端收到后也进入ESTABLISHED</p>\n<p>四次挥手：<br />\n    主动关闭：<br />\n       1.主动关闭方close FIN=1, 进入FIN_WAIT_1状态<br />\n       2.被动关闭方收到请求, 发送 ACK=1确认后进入CLOSE_WAIT状态，主动关闭方收到后进入FIN_WAIT_2<br />\n       3.被动关闭close 发送FIN=1, 进入LAST_ACK状态<br />\n       4.主动关闭方收到后，发送ACK=1，进入TIME_WAIT状态<br />\n    同时关闭：<br />\n       双方发送ACK后进入CLOSING，不会有FIN_WAIT_2,LAST_ACK, CLOSEWAIT</p>\n<p>序号：<br />\n   每个字节的数据都有自己的序号，对端接收的数据是乱序时用来确定顺序</p>\n<p>ISN:<br />\n   三次握手第一个连接时的序列号</p>\n<p>判断syn flood攻击：</p>\n<pre><code>    netstat -nap | grep SYN_RECV        </code></pre>\n<p>防止Syn Flood方法：<br />\n   1.清除所有的半连接<br />\n   2.syn cookie(sysctl.conf tcp_syncookies选项)</p>\n<p>半关闭状态：<br />\n       主动关闭端发送FIN，被动关闭端回ACK后</p>\n<p>三次握手中握手包丢了会怎么样<br />\n       在第三次握手中丢包，服务端会有一个定时器，负责重发，会重发5次，第一次1s，以后时间在上次基础上翻倍，如果客户端还是回ack服务端会发rst</p>\n<h2 id=\"三次握手四次挥手的原因\">三次握手，四次挥手的原因</h2>\n<p>三次握手:<br />\n       1.服务端的seq(序号)和ack(确认号)是一起发给客户端的<br />\n       2.客户端如果不发ack包， 服务端一直会超时重传（防止syn flood攻击）<br />\n       3.三次握手的本质是为了确认连接双方的初始序列号<br />\n四次挥手：<br />\n       1.ACK 和 FIN 是分开的<br />\n       2.TCP是全双工协议，一端可读可写，半关闭只关闭了写端，还可以读数据</p>\n<h2 id=\"time_wait状态是什么为什么会有那一方会有\">TIME_WAIT状态是什么，为什么会有，那一方会有</h2>\n<p>time_wait:<br />\n       主动关闭的一端发出ACK包后进入的状态，等待2MSL时间后进入CLOSE状态<br />\n       主动发送 RST段的一方，不会进入TIME_WAIT 状态<br />\n原因:<br />\n      1.保证TCP全双工通信可靠性<br />\n          如果有TIME_WAIT，对端没收到ACK包会重发FIN包，在2MSL内会重发ACK包<br />\n          如果没有TIME_WAIT，主动关闭方直接进入CLOSE状态，收到FIN包时会返回RST错误(ECONNRESET)<br />\n          如果主动关闭方挂掉，对端会一直重发FIN，知道重置连接<br />\n      2. 保证建立新连接时，旧连接重传的包在网络中小时而不影响新连接<br />\nTIME_WAIT引发的问题:<br />\n       1.进程退出后，端口不能再次绑定(解决:SO_REUSEADDR)<br />\n       2.出现大量的TIME_WAIT<br />\n       一般在高并发短连接，服务器主动关闭socket, 出现大量TIME_WAIT，导致部分用户连不上<br />\n       解决办法：修改内核相关参数(/etc/sysctl.conf, 重用与快速回收)</p>\n<h2 id=\"tcp相关操作\">TCP相关操作</h2>\n<p>查看系统支持端口号范围：<br />\n           cat /proc/sys/net/ipv4/ip_local_port_range<br />\n扩大可用端口范围:<br />\n           echo 15000 65000 &gt; /proc/sys/net/ipv4/ip_local_port_range<br />\n查看tcp连接默认的timeout时长:<br />\n           cat /proc/sys/net/ipv4/tcp_fin_timeout<br />\n缩短timeout的时间:<br />\n           echo 30 &gt; /proc/sys/net/ipv4/tcp_fin_timeout<br />\n统计tcp各个状态数:<br />\n           netstat -ant|awk '/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}'<br />\n知名服务器端口定义：<br />\n           /etc/services</p>\n<h2 id=\"tcp头部\">TCP头部</h2>\n<p>固定20 + 可选项40 = 最大60<br />\nmss在可选项中<br />\nmss和MTU：<br />\n       mss: 最大报文段长度，tcp能发的数据长度，只在三次握手的第一次握手发送给对端（一般1460）<br />\n       mtu: 最大传输单元， 网卡一次发送数据的大小（一般是1500）<br />\n修改mss iptable<br />\n       查看mtu netstat -i<br />\n       修改mtu vim /etc/network/interfaces /etc/init.d/networking restart<br />\nPUSH:<br />\n       发送方最后发送的TCP段将会被标记为push<br />\n       接收方收到push标志到段，将接收缓冲区的内容拷贝到应用进程</p>\n<p>URG与紧急指针:<br />\n紧急指针只在URG=1的时候有用<br />\n紧急指针实际是序列号的偏移量<br />\nTCP只支持一个字节的紧急数据<br />\n紧急数据及linux中的带外数据（MSG_OOB）<br />\n可以在select设置exceptfds，在epoll中EPOLLPRI监听<br />\nseq:<br />\n       解决乱序<br />\nack:<br />\n       解决丢包<br />\nwindow:<br />\n       流控<br />\ntcpflag:<br />\n       tcp状态机<br />\ntcp头中的窗口是指真个滑动窗口大小吗？</p>\n<h2 id=\"流量控制\">流量控制</h2>\n<p>延时ack：<br />\n   接收数据的一方会根据需要延时发送ack(linux 中动态调节算法在快速ack和延时ack中切换)<br />\n   一般情况下：<br />\n           1.当接收方有数据发送，ack会和数据一起发送<br />\n           2.如果没有数据会延时200ms，在这期间有数据会和数据一起发送，如果过了时间没有数据，ack会被发送<br />\n           3.如果延时期间又有第二个数据到来会立即发送ack<br />\n   优点：减少了发送的分段，提高了网络利用率，节省带宽<br />\n   缺点：增大网络延迟<br />\n   关闭延时发送：TCP_QUICKACK<br />\n   注意：每次recv后要重新设置<br />\nnagle算法:<br />\n   发送数据的一方会累积数据直到接收方发来ack包后才将数据一起发送出去（最多累积到一个mss的大小），为了尽可能的发送大块数据<br />\n   优点：提高了吞吐量<br />\n   缺点：增大网络延时<br />\n   nagle和延时确认都是为了减少小包</p>\n<p>滑动窗口:<br />\n   目的为了做流量控制，防止对方发送过快导致缓冲区被塞满, 在tcp头的窗口字段确定其大小<br />\n   持续定时器：<br />\n       当对端窗口为0是，为防止本端死等，会定时发送长度为1的探测报文段（时间层指数增长）<br />\n   问题：<br />\n       糊涂窗口综合征：<br />\n           滑动窗口变小导致发送的数据量表小，久之导致网络传输效率变低<br />\n       解决方法:<br />\n           nagle算法<br />\n           Clark算法和延时ACK</p>\n<h2 id=\"拥塞控制\">拥塞控制</h2>\n<p>网络拥塞:<br />\n   路由器等网络设备来不及处理高数率到来的流量出现的丢包现象<br />\n   判断：1.ack超时 2.连续收到同样的ack</p>\n<p>慢启动：<br />\n   tcp会将大的数据分成若干小的分组，分为若干次发送，而不是一次全部发出去<br />\n   cwdn按照两倍大小增加，大于慢启动门限是进入拥塞避免算法（指数增长）<br />\n   拥塞窗口（cwdn）<br />\n   慢启动门限（ssthresh）</p>\n<p>拥塞避免算法<br />\n   cwdn 每次大小加1（线性增长）, 出现拥塞时cwdn和ssthresh被重置（一般ssthresh=cwdn/2, cwdn=1）， 然后进入慢启动算法<br />\n   加法增大，乘法减小</p>\n<p>快重传：<br />\n   接收方收到一个失序的报文段， 会不断重发相同的ACK（没收到包的序号）<br />\n   发送方连续收到三个相同的Ack, 会立即发送对方Ack的包<br />\n   解决了超时的问题， 但是没有解决重传哪些包的问题（需要sack算法）</p>\n<p>快恢复：<br />\n   出现超时重传或快重传（连续三个重复的ACK包)时:<br />\n   ssthresh  = cwdn/2<br />\n   cwdn = ssthresh</p>\n<h2 id=\"重传机制\">重传机制</h2>\n<p>快速重传与超时重传<br />\n超时重传:<br />\n   RTO:(超时重传时间，发送方发出一个包，会启动定时器，定时器超时未收到包，则会重发，这个时间成为重传超时)， 由RTT（数据往返时间）根据公式计算出<br />\n   RTO时间指数方式增加<br />\n   定时器超时后，在滑动窗口内没有收到ACK的包都会重传（sack算法）<br />\n设置重发次数：<br />\n   /proc/sys/net/ipv4/tcp_retries1<br />\n   /proc/sys/net/ipv4/tcp_retries2</p>\n<h2 id=\"保活机制\">保活机制</h2>\n<p>保活定时器<br />\n服务端探测死连机制（探测客户端宕机或重启,  如果是主动关闭连接）<br />\n缺点：无法识别客户端宕机和还是报文不可达<br />\n设置：SO_KEEPALIVE</p>\n<h2 id=\"数据在不同层的叫法\">数据在不同层的叫法</h2>\n<p>数据链路层 帧<br />\n网络层 包（tcp）, 报（udp）<br />\n传输层 段</p>\n<h2 id=\"arp是什么实现怎么找到mac-arp欺骗\">arp是什么，实现，怎么找到MAC, arp欺骗</h2>\n<p>利用arp缓存中ip与mac的映射，如果有对方mac可以直接通信，没有发给rap广播， 当对方收到后会将自己的MAC填到包里面返回<br />\n同时将发送方的ip和mac映射放在arp缓存中<br />\narp欺骗: 主要方式是中间人攻击，达到获取通信双方数据又不被发现的效果<br />\n预防：使用arp网关</p>\n<h2 id=\"tcp粘包处理\">TCP粘包处理</h2>\n<p>利用包体长度，bodylen<br />\n   1. 如果缓冲区里面的消息长度小于消息头长度，不处理<br />\n   2. 如果缓冲区长度大于等于bodylen + headlen, 处理</p>\n<h2 id=\"http-请求的过程\">HTTP 请求的过程</h2>\n<p>建立TCP连接-&gt;发送请求行-&gt;发送请求头-&gt;（到达服务器）发送状态行-&gt;发送响应头-&gt;发送响应数据-&gt;断TCP连接</p>\n<p>参考：<br />\n<a href=\"https://blog.csdn.net/dog250/article/details/13760985\" target=\"_blank\" rel=\"noopener\">TCP的TIME_WAIT快速回收与重用</a><br />\n<a href=\"https://www.cnblogs.com/dadonggg/p/8778318.html\" target=\"_blank\" rel=\"noopener\">解决TIME_WAIT过多造成的问题</a><br />\n<a href=\"https://elf8848.iteye.com/blog/1739571\" target=\"_blank\" rel=\"noopener\">TCP/IP TIME_WAIT状态原理</a><br />\n<a href=\"https://blog.csdn.net/wuji0447/article/details/78356875\" target=\"_blank\" rel=\"noopener\">tcp状态介绍最详细--没有之一</a><br />\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666543559&amp;idx=1&amp;sn=83cf0e9367511d6b311909a5b3dfc81e&amp;chksm=80dcfd6cb7ab747af19259cce70621b269c5fae25582af7c57f5be904bc18e216625cf6f4157&amp;mpshare=1&amp;scene=24&amp;srcid=0110n9eggIf8eEIoZnl2Loe5&amp;key=02793bf78abe30c4c571e7a6695d4645e0c3637a779c7915ba755677395083d39ee60f9a9d204e28b6d06d279fff9d0a25171eac0cb3e8f126cf46a027d6459f015c13308729af2f9d27c88c38e270c4&amp;ascene=14&amp;uin=ODI0NTI3MTg0&amp;devicetype=Windows+7&amp;version=62060728&amp;lang=zh_CN&amp;pass_ticket=wXb/sgBYyv1S7izs0CuJXuDgNxtBHPyjdhjnyZMw7twBDQnbBA0IyQV1EnfMvwsI\" target=\"_blank\" rel=\"noopener\">“三次握手，四次挥手”你真的懂吗？</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52430382\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：Delay ACK</a><br />\n<a href=\"https://my.oschina.net/xinxingegeya/blog/485643\" target=\"_blank\" rel=\"noopener\">TCP Nagle算法&amp;&amp;延迟确认机制</a><br />\n<a href=\"https://blog.csdn.net/ce123_zhouwei/article/details/9050797\" target=\"_blank\" rel=\"noopener\">TCP中的Nagle算法</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52444277\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：滑动窗口（Sliding Window)</a><br />\n<a href=\"https://www.zhihu.com/question/32255109\" target=\"_blank\" rel=\"noopener\">TCP协议的滑动窗口具体是怎样控制流量的</a><br />\n<a href=\"https://blog.csdn.net/ordeder/article/details/43243425\" target=\"_blank\" rel=\"noopener\">TCP带外数据（URG，MSG_OOB</a><br />\n<a href=\"https://blog.csdn.net/gbasp2008/article/details/47666421\" target=\"_blank\" rel=\"noopener\">带外数据和TCP紧急指针</a><br />\n<a href=\"https://blog.csdn.net/u012122743/article/details/46484675\" target=\"_blank\" rel=\"noopener\">TCP紧急数据</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52476231\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：超时重传机制</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52503315\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：SACK选项（Selective Acknowledgment）</a><br />\n<a href=\"https://blog.csdn.net/q1007729991/article/details/70185266\" target=\"_blank\" rel=\"noopener\">27-TCP 协议（快重传与快恢复）</a><br />\n<a href=\"https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/\" target=\"_blank\" rel=\"noopener\">聊一聊重传次数</a><br />\n<a href=\"http://www.orczhou.com/index.php/2011/10/tcpip-protocol-start-rto/\" target=\"_blank\" rel=\"noopener\">TCP/IP重传超时--RTO</a><br />\n<a href=\"https://blog.csdn.net/q1007729991/article/details/69091877\" target=\"_blank\" rel=\"noopener\">0-Linux 网络编程修炼指南——内功心法</a><br />\n<a href=\"https://coolshell.cn/articles/11564.html\" target=\"_blank\" rel=\"noopener\">TCP 的那些事儿（上）</a><br />\n<a href=\"https://zhuanlan.zhihu.com/p/25569676\" target=\"_blank\" rel=\"noopener\">从TCP三次握手说起--浅析TCP协议中的疑难杂症（1)</a><br />\n<a href=\"https://zhuanlan.zhihu.com/p/25596865\" target=\"_blank\" rel=\"noopener\">从TCP三次握手说起--浅析TCP协议中的疑难杂症（2）</a><br />\n<a href=\"http://netsecurity.51cto.com/art/201303/386031.htm\" target=\"_blank\" rel=\"noopener\">中间人攻击——ARP欺骗的原理、实战及防御</a><br />\n<a href=\"https://blog.csdn.net/qq_37969433/article/details/79587026\" target=\"_blank\" rel=\"noopener\">ARP欺骗的两种方式</a><br />\n<a href=\"https://blog.csdn.net/Mary19920410/article/details/72857764\" target=\"_blank\" rel=\"noopener\">浅析TCP之头部可选项</a><br />\n<a href=\"https://blog.csdn.net/mary19920410/article/details/58030147\" target=\"_blank\" rel=\"noopener\">TCP报文格式详解</a><br />\n<a href=\"https://www.cnblogs.com/xiaomayizoe/p/5258754.html\" target=\"_blank\" rel=\"noopener\">TCP和UDP的优缺点及区别</a><br />\n<a href=\"https://blog.csdn.net/freeelinux/article/details/53823731\" target=\"_blank\" rel=\"noopener\">muduo库chat server对TCP粘包问题的处理</a><br />\n<a href=\"https://blog.csdn.net/yusiguyuan/article/details/17270679\" target=\"_blank\" rel=\"noopener\">TCP分包方法 &amp;&amp; 粘包处理策略</a><br />\n<a href=\"https://blog.csdn.net/lu_embedded/article/details/77430050\" target=\"_blank\" rel=\"noopener\">Linux 网络编程——TCP 粘包及其解决方案</a><br />\n<a href=\"https://juejin.im/post/5a8102e0f265da4e710f5910\" target=\"_blank\" rel=\"noopener\">HTTP面试题都在这里</a><br />\n<a href=\"https://www.zhihu.com/question/23202402\" target=\"_blank\" rel=\"noopener\">HTTP是一个无状态的协议。这句话里的无状态是什么意思</a><br />\n<a href=\"https://www.zhihu.com/question/24938934\" target=\"_blank\" rel=\"noopener\">服务端是如何主动推送信息到客户端的？</a><br />\n<a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" target=\"_blank\" rel=\"noopener\">HTTP 协议入门</a><br />\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&amp;mid=2247484323&amp;idx=1&amp;sn=5513334623b73352034a828badfe985d&amp;chksm=972afa86a05d7390fe96222718fd9ce6c21fe700af7e7f9396449815a5323e7315d96681bcac&amp;scene=0&amp;xtrack=1&amp;key=a539a6045067ac190e5c71cc4876a35ec2cab39ecc57c3618a3c22861a71c8bfa13cb8c4e1190e7ca56b6fa54c00b894874dabfdb24eb7aa3f45382bd07dd271a25982549dfd70f959b71db7aeb5d371&amp;ascene=14&amp;uin=ODI0NTI3MTg0&amp;devicetype=Windows+7&amp;version=62060739&amp;lang=zh_CN&amp;pass_ticket=UG6jIZiPy0h82EWKj8fu5ZN0dIyjwygUpMCiLLSskgXdEE9mhfeXBtYPbOR2lLEE\" target=\"_blank\" rel=\"noopener\">程序员过关斩将--面试官再问你Http请求过程，怼回去！</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"tcp和udp的区别\">TCP和UDP的区别</h2>\n<p>tcp连接是永久的只要没断开<br />\ntcp连接是指tcp协议栈维护的状态<br />\ntcp 流式协议，数据是有序的。面向连接可靠，慢，开销大，容易受攻击<br />\nudp 数据报协议，数据不保证有序。不需要连接， 不可靠，快，开销小</p>","more":"<h2 id=\"三次握手与四次挥手\">三次握手与四次挥手</h2>\n<p>三次握手：<br />\n   1.客户端发起连接请求，SYN=1，seq=y, 客户端进入SYN_SENT状态<br />\n   2.服务端收到连接，SYN=1,ack=y+1, seq=q, 服务端进入SYN_RCVD状态<br />\n   3.客户端收到服务端的回应, ACK=1，ack=q+1, 客户端进入ESTABLISHED，服务端收到后也进入ESTABLISHED</p>\n<p>四次挥手：<br />\n    主动关闭：<br />\n       1.主动关闭方close FIN=1, 进入FIN_WAIT_1状态<br />\n       2.被动关闭方收到请求, 发送 ACK=1确认后进入CLOSE_WAIT状态，主动关闭方收到后进入FIN_WAIT_2<br />\n       3.被动关闭close 发送FIN=1, 进入LAST_ACK状态<br />\n       4.主动关闭方收到后，发送ACK=1，进入TIME_WAIT状态<br />\n    同时关闭：<br />\n       双方发送ACK后进入CLOSING，不会有FIN_WAIT_2,LAST_ACK, CLOSEWAIT</p>\n<p>序号：<br />\n   每个字节的数据都有自己的序号，对端接收的数据是乱序时用来确定顺序</p>\n<p>ISN:<br />\n   三次握手第一个连接时的序列号</p>\n<p>判断syn flood攻击：</p>\n<pre><code>    netstat -nap | grep SYN_RECV        </code></pre>\n<p>防止Syn Flood方法：<br />\n   1.清除所有的半连接<br />\n   2.syn cookie(sysctl.conf tcp_syncookies选项)</p>\n<p>半关闭状态：<br />\n       主动关闭端发送FIN，被动关闭端回ACK后</p>\n<p>三次握手中握手包丢了会怎么样<br />\n       在第三次握手中丢包，服务端会有一个定时器，负责重发，会重发5次，第一次1s，以后时间在上次基础上翻倍，如果客户端还是回ack服务端会发rst</p>\n<h2 id=\"三次握手四次挥手的原因\">三次握手，四次挥手的原因</h2>\n<p>三次握手:<br />\n       1.服务端的seq(序号)和ack(确认号)是一起发给客户端的<br />\n       2.客户端如果不发ack包， 服务端一直会超时重传（防止syn flood攻击）<br />\n       3.三次握手的本质是为了确认连接双方的初始序列号<br />\n四次挥手：<br />\n       1.ACK 和 FIN 是分开的<br />\n       2.TCP是全双工协议，一端可读可写，半关闭只关闭了写端，还可以读数据</p>\n<h2 id=\"time_wait状态是什么为什么会有那一方会有\">TIME_WAIT状态是什么，为什么会有，那一方会有</h2>\n<p>time_wait:<br />\n       主动关闭的一端发出ACK包后进入的状态，等待2MSL时间后进入CLOSE状态<br />\n       主动发送 RST段的一方，不会进入TIME_WAIT 状态<br />\n原因:<br />\n      1.保证TCP全双工通信可靠性<br />\n          如果有TIME_WAIT，对端没收到ACK包会重发FIN包，在2MSL内会重发ACK包<br />\n          如果没有TIME_WAIT，主动关闭方直接进入CLOSE状态，收到FIN包时会返回RST错误(ECONNRESET)<br />\n          如果主动关闭方挂掉，对端会一直重发FIN，知道重置连接<br />\n      2. 保证建立新连接时，旧连接重传的包在网络中小时而不影响新连接<br />\nTIME_WAIT引发的问题:<br />\n       1.进程退出后，端口不能再次绑定(解决:SO_REUSEADDR)<br />\n       2.出现大量的TIME_WAIT<br />\n       一般在高并发短连接，服务器主动关闭socket, 出现大量TIME_WAIT，导致部分用户连不上<br />\n       解决办法：修改内核相关参数(/etc/sysctl.conf, 重用与快速回收)</p>\n<h2 id=\"tcp相关操作\">TCP相关操作</h2>\n<p>查看系统支持端口号范围：<br />\n           cat /proc/sys/net/ipv4/ip_local_port_range<br />\n扩大可用端口范围:<br />\n           echo 15000 65000 &gt; /proc/sys/net/ipv4/ip_local_port_range<br />\n查看tcp连接默认的timeout时长:<br />\n           cat /proc/sys/net/ipv4/tcp_fin_timeout<br />\n缩短timeout的时间:<br />\n           echo 30 &gt; /proc/sys/net/ipv4/tcp_fin_timeout<br />\n统计tcp各个状态数:<br />\n           netstat -ant|awk '/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}'<br />\n知名服务器端口定义：<br />\n           /etc/services</p>\n<h2 id=\"tcp头部\">TCP头部</h2>\n<p>固定20 + 可选项40 = 最大60<br />\nmss在可选项中<br />\nmss和MTU：<br />\n       mss: 最大报文段长度，tcp能发的数据长度，只在三次握手的第一次握手发送给对端（一般1460）<br />\n       mtu: 最大传输单元， 网卡一次发送数据的大小（一般是1500）<br />\n修改mss iptable<br />\n       查看mtu netstat -i<br />\n       修改mtu vim /etc/network/interfaces /etc/init.d/networking restart<br />\nPUSH:<br />\n       发送方最后发送的TCP段将会被标记为push<br />\n       接收方收到push标志到段，将接收缓冲区的内容拷贝到应用进程</p>\n<p>URG与紧急指针:<br />\n紧急指针只在URG=1的时候有用<br />\n紧急指针实际是序列号的偏移量<br />\nTCP只支持一个字节的紧急数据<br />\n紧急数据及linux中的带外数据（MSG_OOB）<br />\n可以在select设置exceptfds，在epoll中EPOLLPRI监听<br />\nseq:<br />\n       解决乱序<br />\nack:<br />\n       解决丢包<br />\nwindow:<br />\n       流控<br />\ntcpflag:<br />\n       tcp状态机<br />\ntcp头中的窗口是指真个滑动窗口大小吗？</p>\n<h2 id=\"流量控制\">流量控制</h2>\n<p>延时ack：<br />\n   接收数据的一方会根据需要延时发送ack(linux 中动态调节算法在快速ack和延时ack中切换)<br />\n   一般情况下：<br />\n           1.当接收方有数据发送，ack会和数据一起发送<br />\n           2.如果没有数据会延时200ms，在这期间有数据会和数据一起发送，如果过了时间没有数据，ack会被发送<br />\n           3.如果延时期间又有第二个数据到来会立即发送ack<br />\n   优点：减少了发送的分段，提高了网络利用率，节省带宽<br />\n   缺点：增大网络延迟<br />\n   关闭延时发送：TCP_QUICKACK<br />\n   注意：每次recv后要重新设置<br />\nnagle算法:<br />\n   发送数据的一方会累积数据直到接收方发来ack包后才将数据一起发送出去（最多累积到一个mss的大小），为了尽可能的发送大块数据<br />\n   优点：提高了吞吐量<br />\n   缺点：增大网络延时<br />\n   nagle和延时确认都是为了减少小包</p>\n<p>滑动窗口:<br />\n   目的为了做流量控制，防止对方发送过快导致缓冲区被塞满, 在tcp头的窗口字段确定其大小<br />\n   持续定时器：<br />\n       当对端窗口为0是，为防止本端死等，会定时发送长度为1的探测报文段（时间层指数增长）<br />\n   问题：<br />\n       糊涂窗口综合征：<br />\n           滑动窗口变小导致发送的数据量表小，久之导致网络传输效率变低<br />\n       解决方法:<br />\n           nagle算法<br />\n           Clark算法和延时ACK</p>\n<h2 id=\"拥塞控制\">拥塞控制</h2>\n<p>网络拥塞:<br />\n   路由器等网络设备来不及处理高数率到来的流量出现的丢包现象<br />\n   判断：1.ack超时 2.连续收到同样的ack</p>\n<p>慢启动：<br />\n   tcp会将大的数据分成若干小的分组，分为若干次发送，而不是一次全部发出去<br />\n   cwdn按照两倍大小增加，大于慢启动门限是进入拥塞避免算法（指数增长）<br />\n   拥塞窗口（cwdn）<br />\n   慢启动门限（ssthresh）</p>\n<p>拥塞避免算法<br />\n   cwdn 每次大小加1（线性增长）, 出现拥塞时cwdn和ssthresh被重置（一般ssthresh=cwdn/2, cwdn=1）， 然后进入慢启动算法<br />\n   加法增大，乘法减小</p>\n<p>快重传：<br />\n   接收方收到一个失序的报文段， 会不断重发相同的ACK（没收到包的序号）<br />\n   发送方连续收到三个相同的Ack, 会立即发送对方Ack的包<br />\n   解决了超时的问题， 但是没有解决重传哪些包的问题（需要sack算法）</p>\n<p>快恢复：<br />\n   出现超时重传或快重传（连续三个重复的ACK包)时:<br />\n   ssthresh  = cwdn/2<br />\n   cwdn = ssthresh</p>\n<h2 id=\"重传机制\">重传机制</h2>\n<p>快速重传与超时重传<br />\n超时重传:<br />\n   RTO:(超时重传时间，发送方发出一个包，会启动定时器，定时器超时未收到包，则会重发，这个时间成为重传超时)， 由RTT（数据往返时间）根据公式计算出<br />\n   RTO时间指数方式增加<br />\n   定时器超时后，在滑动窗口内没有收到ACK的包都会重传（sack算法）<br />\n设置重发次数：<br />\n   /proc/sys/net/ipv4/tcp_retries1<br />\n   /proc/sys/net/ipv4/tcp_retries2</p>\n<h2 id=\"保活机制\">保活机制</h2>\n<p>保活定时器<br />\n服务端探测死连机制（探测客户端宕机或重启,  如果是主动关闭连接）<br />\n缺点：无法识别客户端宕机和还是报文不可达<br />\n设置：SO_KEEPALIVE</p>\n<h2 id=\"数据在不同层的叫法\">数据在不同层的叫法</h2>\n<p>数据链路层 帧<br />\n网络层 包（tcp）, 报（udp）<br />\n传输层 段</p>\n<h2 id=\"arp是什么实现怎么找到mac-arp欺骗\">arp是什么，实现，怎么找到MAC, arp欺骗</h2>\n<p>利用arp缓存中ip与mac的映射，如果有对方mac可以直接通信，没有发给rap广播， 当对方收到后会将自己的MAC填到包里面返回<br />\n同时将发送方的ip和mac映射放在arp缓存中<br />\narp欺骗: 主要方式是中间人攻击，达到获取通信双方数据又不被发现的效果<br />\n预防：使用arp网关</p>\n<h2 id=\"tcp粘包处理\">TCP粘包处理</h2>\n<p>利用包体长度，bodylen<br />\n   1. 如果缓冲区里面的消息长度小于消息头长度，不处理<br />\n   2. 如果缓冲区长度大于等于bodylen + headlen, 处理</p>\n<h2 id=\"http-请求的过程\">HTTP 请求的过程</h2>\n<p>建立TCP连接-&gt;发送请求行-&gt;发送请求头-&gt;（到达服务器）发送状态行-&gt;发送响应头-&gt;发送响应数据-&gt;断TCP连接</p>\n<p>参考：<br />\n<a href=\"https://blog.csdn.net/dog250/article/details/13760985\" target=\"_blank\" rel=\"noopener\">TCP的TIME_WAIT快速回收与重用</a><br />\n<a href=\"https://www.cnblogs.com/dadonggg/p/8778318.html\" target=\"_blank\" rel=\"noopener\">解决TIME_WAIT过多造成的问题</a><br />\n<a href=\"https://elf8848.iteye.com/blog/1739571\" target=\"_blank\" rel=\"noopener\">TCP/IP TIME_WAIT状态原理</a><br />\n<a href=\"https://blog.csdn.net/wuji0447/article/details/78356875\" target=\"_blank\" rel=\"noopener\">tcp状态介绍最详细--没有之一</a><br />\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666543559&amp;idx=1&amp;sn=83cf0e9367511d6b311909a5b3dfc81e&amp;chksm=80dcfd6cb7ab747af19259cce70621b269c5fae25582af7c57f5be904bc18e216625cf6f4157&amp;mpshare=1&amp;scene=24&amp;srcid=0110n9eggIf8eEIoZnl2Loe5&amp;key=02793bf78abe30c4c571e7a6695d4645e0c3637a779c7915ba755677395083d39ee60f9a9d204e28b6d06d279fff9d0a25171eac0cb3e8f126cf46a027d6459f015c13308729af2f9d27c88c38e270c4&amp;ascene=14&amp;uin=ODI0NTI3MTg0&amp;devicetype=Windows+7&amp;version=62060728&amp;lang=zh_CN&amp;pass_ticket=wXb/sgBYyv1S7izs0CuJXuDgNxtBHPyjdhjnyZMw7twBDQnbBA0IyQV1EnfMvwsI\" target=\"_blank\" rel=\"noopener\">“三次握手，四次挥手”你真的懂吗？</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52430382\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：Delay ACK</a><br />\n<a href=\"https://my.oschina.net/xinxingegeya/blog/485643\" target=\"_blank\" rel=\"noopener\">TCP Nagle算法&amp;&amp;延迟确认机制</a><br />\n<a href=\"https://blog.csdn.net/ce123_zhouwei/article/details/9050797\" target=\"_blank\" rel=\"noopener\">TCP中的Nagle算法</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52444277\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：滑动窗口（Sliding Window)</a><br />\n<a href=\"https://www.zhihu.com/question/32255109\" target=\"_blank\" rel=\"noopener\">TCP协议的滑动窗口具体是怎样控制流量的</a><br />\n<a href=\"https://blog.csdn.net/ordeder/article/details/43243425\" target=\"_blank\" rel=\"noopener\">TCP带外数据（URG，MSG_OOB</a><br />\n<a href=\"https://blog.csdn.net/gbasp2008/article/details/47666421\" target=\"_blank\" rel=\"noopener\">带外数据和TCP紧急指针</a><br />\n<a href=\"https://blog.csdn.net/u012122743/article/details/46484675\" target=\"_blank\" rel=\"noopener\">TCP紧急数据</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52476231\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：超时重传机制</a><br />\n<a href=\"https://blog.csdn.net/wdscq1234/article/details/52503315\" target=\"_blank\" rel=\"noopener\">TCP-IP详解：SACK选项（Selective Acknowledgment）</a><br />\n<a href=\"https://blog.csdn.net/q1007729991/article/details/70185266\" target=\"_blank\" rel=\"noopener\">27-TCP 协议（快重传与快恢复）</a><br />\n<a href=\"https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/\" target=\"_blank\" rel=\"noopener\">聊一聊重传次数</a><br />\n<a href=\"http://www.orczhou.com/index.php/2011/10/tcpip-protocol-start-rto/\" target=\"_blank\" rel=\"noopener\">TCP/IP重传超时--RTO</a><br />\n<a href=\"https://blog.csdn.net/q1007729991/article/details/69091877\" target=\"_blank\" rel=\"noopener\">0-Linux 网络编程修炼指南——内功心法</a><br />\n<a href=\"https://coolshell.cn/articles/11564.html\" target=\"_blank\" rel=\"noopener\">TCP 的那些事儿（上）</a><br />\n<a href=\"https://zhuanlan.zhihu.com/p/25569676\" target=\"_blank\" rel=\"noopener\">从TCP三次握手说起--浅析TCP协议中的疑难杂症（1)</a><br />\n<a href=\"https://zhuanlan.zhihu.com/p/25596865\" target=\"_blank\" rel=\"noopener\">从TCP三次握手说起--浅析TCP协议中的疑难杂症（2）</a><br />\n<a href=\"http://netsecurity.51cto.com/art/201303/386031.htm\" target=\"_blank\" rel=\"noopener\">中间人攻击——ARP欺骗的原理、实战及防御</a><br />\n<a href=\"https://blog.csdn.net/qq_37969433/article/details/79587026\" target=\"_blank\" rel=\"noopener\">ARP欺骗的两种方式</a><br />\n<a href=\"https://blog.csdn.net/Mary19920410/article/details/72857764\" target=\"_blank\" rel=\"noopener\">浅析TCP之头部可选项</a><br />\n<a href=\"https://blog.csdn.net/mary19920410/article/details/58030147\" target=\"_blank\" rel=\"noopener\">TCP报文格式详解</a><br />\n<a href=\"https://www.cnblogs.com/xiaomayizoe/p/5258754.html\" target=\"_blank\" rel=\"noopener\">TCP和UDP的优缺点及区别</a><br />\n<a href=\"https://blog.csdn.net/freeelinux/article/details/53823731\" target=\"_blank\" rel=\"noopener\">muduo库chat server对TCP粘包问题的处理</a><br />\n<a href=\"https://blog.csdn.net/yusiguyuan/article/details/17270679\" target=\"_blank\" rel=\"noopener\">TCP分包方法 &amp;&amp; 粘包处理策略</a><br />\n<a href=\"https://blog.csdn.net/lu_embedded/article/details/77430050\" target=\"_blank\" rel=\"noopener\">Linux 网络编程——TCP 粘包及其解决方案</a><br />\n<a href=\"https://juejin.im/post/5a8102e0f265da4e710f5910\" target=\"_blank\" rel=\"noopener\">HTTP面试题都在这里</a><br />\n<a href=\"https://www.zhihu.com/question/23202402\" target=\"_blank\" rel=\"noopener\">HTTP是一个无状态的协议。这句话里的无状态是什么意思</a><br />\n<a href=\"https://www.zhihu.com/question/24938934\" target=\"_blank\" rel=\"noopener\">服务端是如何主动推送信息到客户端的？</a><br />\n<a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" target=\"_blank\" rel=\"noopener\">HTTP 协议入门</a><br />\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzIwNTc3OTAxOA==&amp;mid=2247484323&amp;idx=1&amp;sn=5513334623b73352034a828badfe985d&amp;chksm=972afa86a05d7390fe96222718fd9ce6c21fe700af7e7f9396449815a5323e7315d96681bcac&amp;scene=0&amp;xtrack=1&amp;key=a539a6045067ac190e5c71cc4876a35ec2cab39ecc57c3618a3c22861a71c8bfa13cb8c4e1190e7ca56b6fa54c00b894874dabfdb24eb7aa3f45382bd07dd271a25982549dfd70f959b71db7aeb5d371&amp;ascene=14&amp;uin=ODI0NTI3MTg0&amp;devicetype=Windows+7&amp;version=62060739&amp;lang=zh_CN&amp;pass_ticket=UG6jIZiPy0h82EWKj8fu5ZN0dIyjwygUpMCiLLSskgXdEE9mhfeXBtYPbOR2lLEE\" target=\"_blank\" rel=\"noopener\">程序员过关斩将--面试官再问你Http请求过程，怼回去！</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhhss4va000054ync37b28cd","category_id":"ckhhss4vh000454ynbpmq50o2","_id":"ckhhss4vo000f54yn87jocpcm"},{"post_id":"ckhhss4ve000254ynckn3fkkl","category_id":"ckhhss4vh000454ynbpmq50o2","_id":"ckhhss4vr000k54yn5ruacpz6"},{"post_id":"ckhhss4vi000554yn89o01k6f","category_id":"ckhhss4vo000e54yn6r8dd54f","_id":"ckhhss4vt000q54yn6xvd17ag"},{"post_id":"ckhhss4vr000m54yn7ovn1wlo","category_id":"ckhhss4vr000l54ynhfengdsa","_id":"ckhhss4vw000v54yn9ax2euh1"},{"post_id":"ckhhss4vm000a54yn8swx5ouo","category_id":"ckhhss4vr000l54ynhfengdsa","_id":"ckhhss4vx000z54yn3ft2edg9"},{"post_id":"ckhhss4vt000o54ynclr8aw9a","category_id":"ckhhss4vr000l54ynhfengdsa","_id":"ckhhss4vy001254yn4e2sdaoe"},{"post_id":"ckhhss4vo000d54yn38sr3kpc","category_id":"ckhhss4vr000l54ynhfengdsa","_id":"ckhhss4vz001654ynhe582i1z"},{"post_id":"ckhhss4vp000g54ynaxvt6yu3","category_id":"ckhhss4vr000l54ynhfengdsa","_id":"ckhhss4w1001b54yng0yq35or"},{"post_id":"ckhhss4vy001154yn29bxbrug","category_id":"ckhhss4vr000l54ynhfengdsa","_id":"ckhhss4w2001d54ynfhjxh9ew"},{"post_id":"ckhhss4vq000i54yn830ygcmk","category_id":"ckhhss4vr000l54ynhfengdsa","_id":"ckhhss4w3001g54yngh4f8jzz"},{"post_id":"ckhhss4w1001c54yn8xkdfs4m","category_id":"ckhhss4vh000454ynbpmq50o2","_id":"ckhhss4w5001k54yn61ij9052"},{"post_id":"ckhhss4vu000s54yn9u2t7mi5","category_id":"ckhhss4w1001a54yn2sakhw34","_id":"ckhhss4w5001o54yn8qusedqd"},{"post_id":"ckhhss4vv000u54yneh5vc7ds","category_id":"ckhhss4w1001a54yn2sakhw34","_id":"ckhhss4w6001s54yn2k1s16bv"},{"post_id":"ckhhss4vw000y54yn2uy3ghta","category_id":"ckhhss4w1001a54yn2sakhw34","_id":"ckhhss4w7001v54yn80pgci70"},{"post_id":"ckhhss4vz001554ynfyz3hk1a","category_id":"ckhhss4w6001r54yngieueue1","_id":"ckhhss4wa001z54ynhfjl3tcm"},{"post_id":"ckhhss4w0001854ynehhybmre","category_id":"ckhhss4w7001x54yn6n5w30wr","_id":"ckhhss4wb002254ynf7c04jps"},{"post_id":"ckhhss4w3001j54yn87l1045t","category_id":"ckhhss4wa002154yn8rj7a459","_id":"ckhhss4wb002454yn9zpvf5bf"},{"post_id":"ckhhss51k002554ynhl8tbecv","category_id":"ckhhss4vh000454ynbpmq50o2","_id":"ckhhss51m002954yn1jv016ac"},{"post_id":"ckhhss51l002654yn83p7ac7j","category_id":"ckhhss51m002854yna3kvbqo3","_id":"ckhhss51o002c54yn2kxzhyfy"},{"post_id":"ckhhss51l002754yncach8vsu","category_id":"ckhhss51n002b54yn1qks95jd","_id":"ckhhss51p002d54yn2i2x6zpd"}],"PostTag":[{"post_id":"ckhhss4ve000254ynckn3fkkl","tag_id":"ckhhss4vj000654ynhp06cxwm","_id":"ckhhss4vn000c54yn92akax9q"},{"post_id":"ckhhss4vj000754yn22xvcj2g","tag_id":"ckhhss4vn000b54ynf2mv3fke","_id":"ckhhss4vr000j54yn7ewjfeel"},{"post_id":"ckhhss4vk000854ync4wi0tdf","tag_id":"ckhhss4vn000b54ynf2mv3fke","_id":"ckhhss4vt000p54yn3n1g2860"},{"post_id":"ckhhss4vo000d54yn38sr3kpc","tag_id":"ckhhss4vs000n54yn42wr0o50","_id":"ckhhss4vw000w54yn8d0gb5x8"},{"post_id":"ckhhss4vp000g54ynaxvt6yu3","tag_id":"ckhhss4vs000n54yn42wr0o50","_id":"ckhhss4vy001354yn9t120ctl"},{"post_id":"ckhhss4vt000o54ynclr8aw9a","tag_id":"ckhhss4vx001054yncyay6y9f","_id":"ckhhss4w1001954yn09b12buy"},{"post_id":"ckhhss4vu000s54yn9u2t7mi5","tag_id":"ckhhss4w0001754yn76ui2phf","_id":"ckhhss4w3001h54yn7959es55"},{"post_id":"ckhhss4vv000u54yneh5vc7ds","tag_id":"ckhhss4w0001754yn76ui2phf","_id":"ckhhss4w5001m54yn70cv2l0j"},{"post_id":"ckhhss4vw000y54yn2uy3ghta","tag_id":"ckhhss4vn000b54ynf2mv3fke","_id":"ckhhss4w6001q54ynetx7dqj8"},{"post_id":"ckhhss4vw000y54yn2uy3ghta","tag_id":"ckhhss4w0001754yn76ui2phf","_id":"ckhhss4w7001t54ynguvaankq"},{"post_id":"ckhhss4w0001854ynehhybmre","tag_id":"ckhhss4w6001p54ynar5y7fti","_id":"ckhhss4w7001w54yn77reeqvk"},{"post_id":"ckhhss4w1001c54yn8xkdfs4m","tag_id":"ckhhss4w7001u54yn1wx4c6a9","_id":"ckhhss4wa002054yne39t0v07"},{"post_id":"ckhhss4w2001e54yn1jhb0eiu","tag_id":"ckhhss4w8001y54yn6myfdmr8","_id":"ckhhss4wb002354yn1iolekxz"},{"post_id":"ckhhss51l002754yncach8vsu","tag_id":"ckhhss4vn000b54ynf2mv3fke","_id":"ckhhss51m002a54yne8t27pde"}],"Tag":[{"name":"并发","_id":"ckhhss4vj000654ynhp06cxwm"},{"name":"面试","_id":"ckhhss4vn000b54ynf2mv3fke"},{"name":"Linux内核","_id":"ckhhss4vs000n54yn42wr0o50"},{"name":"网络编程","_id":"ckhhss4vx001054yncyay6y9f"},{"name":"mysql","_id":"ckhhss4w0001754yn76ui2phf"},{"name":"go","_id":"ckhhss4w6001p54ynar5y7fti"},{"name":"泛型","_id":"ckhhss4w7001u54yn1wx4c6a9"},{"name":"linux","_id":"ckhhss4w8001y54yn6myfdmr8"}]}}