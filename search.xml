<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>post title</title>
    <url>/2020/01/08/cpp/cpp%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h2 id="移动构造函数中如果有拷贝动态内存要注意将指针赋空"><a href="#移动构造函数中如果有拷贝动态内存要注意将指针赋空" class="headerlink" title="移动构造函数中如果有拷贝动态内存要注意将指针赋空"></a>移动构造函数中如果有拷贝动态内存要注意将指针赋空</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_ptr(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">0</span>))&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"construct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a) : m_ptr(a.m_ptr)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"copy construct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    A(A&amp;&amp; a) : m_ptr(a.m_ptr)&#123;a.m_ptr = <span class="literal">nullptr</span>; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"move construct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~A()&#123;<span class="keyword">delete</span> m_ptr; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"destruct"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span>* m_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h2 id="重载决议"><a href="#重载决议" class="headerlink" title="重载决议"></a>重载决议</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a_;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">foo(T&amp;&amp; v) : a_&#123;<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(v)&#125;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="keyword">const</span> foo&amp; rhs) : a_&#123;rhs.a_&#125;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">operator</span> <span class="built_in">std</span>::<span class="keyword">uint8_t</span>()&#123;<span class="keyword">return</span> a_;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo bar1&#123;<span class="number">256</span>&#125;, bar2&#123;bar1&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bar1.a_ == bar2.a_)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码中，编译器会选择会选择移动构造函数而不是拷贝构造，应为如果调用拷贝构造bar1会存在隐式转换.但是如果是默认的拷贝构造则会优先被调用<br><a href="https://stackoverflow.com/questions/53902448/template-constructor-and-copy-constructor" target="_blank" rel="noopener">Template constructor and copy constructor</a></p>
<h2 id="vector删除性能对比"><a href="#vector删除性能对比" class="headerlink" title="vector删除性能对比"></a>vector删除性能对比</h2><p><a href="https://sourcegraph.com/github.com/colinblack/language/-/blob/c++/stl/vector/vector_pop_back.cc#L14" target="_blank" rel="noopener">vector_pop_back.cc</a></p>
<h2 id="vector-构造函数"><a href="#vector-构造函数" class="headerlink" title="vector 构造函数"></a>vector 构造函数</h2><p>vector<inv> v(10)　构造一个size(不是capacity)为10的vector</p>
<h2 id="关联容器的构造函数"><a href="#关联容器的构造函数" class="headerlink" title="关联容器的构造函数"></a>关联容器的构造函数</h2><p>如map set unordered_map 中 使用[]操作符，首先会调无参构造函数，插入元素正确的方式是使用insert, 但是这会调用两次拷贝构造，需使用std::move。使用[]操作符复制是调用的是拷贝操作符，使用insert会调拷贝构造</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    Item(<span class="keyword">int</span> a): i(a)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a_;</span><br><span class="line">    <span class="keyword">int</span> b_;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Item&gt; v_;</span><br><span class="line">    Demo()</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = <span class="number">0</span>;    </span><br><span class="line">        b_ = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"no param "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Demo(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="built_in">vector</span>&lt;Item&gt;&amp; v)</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = a;    </span><br><span class="line">        b_ = b;</span><br><span class="line">        v_ = v;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"param "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Demo(<span class="keyword">const</span> Demo&amp; obj)</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = obj.a_;    </span><br><span class="line">        b_ = obj.b_;</span><br><span class="line">        v_ = <span class="built_in">std</span>::move(obj.v_);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"copy construct "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Demo&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> Demo&amp; obj)</span><br><span class="line">    &#123;</span><br><span class="line">        a_ = obj.a_;</span><br><span class="line">        b_ = obj.b_;</span><br><span class="line">        v_ = <span class="built_in">std</span>::move(obj.v_);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"copy operator "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Item&gt; v;</span><br><span class="line">    v.push_back(Item(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">unsigned</span>, Demo&gt; m;</span><br><span class="line">    m.insert(&#123;<span class="number">1</span>, Demo(<span class="number">1</span>, <span class="number">2</span>, v)&#125;);</span><br><span class="line">    m[<span class="number">1</span>] = Demo(<span class="number">1</span>, <span class="number">2</span>, v);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m[<span class="number">1</span>].a_ &lt;&lt; <span class="string">" "</span> &lt;&lt; m[<span class="number">1</span>].b_ &lt;&lt; <span class="string">" "</span> &lt;&lt; m[<span class="number">1</span>].v_.size() &lt;&lt; <span class="string">" "</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C中的结构体"><a href="#C中的结构体" class="headerlink" title="C中的结构体"></a>C中的结构体</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd_set rd;</span><br><span class="line">fd_set all;</span><br><span class="line">ll = rd; <span class="comment">//合法</span></span><br><span class="line">fd_set 是个结构体, 里面有一个整型数组， c++中则会调用拷贝操作符</span><br></pre></td></tr></table></figure>

<h2 id="STL-中的类型"><a href="#STL-中的类型" class="headerlink" title="STL 中的类型"></a>STL 中的类型</h2><p>SIZE_TYPE：不同平台下长度不一样， 64位下是8字节，unsigned log<br><img src="/source/_posts/cpp/f1a84799-5f3b-41a6-a52d-d75a92fdea4d.png" alt="size_type"></p>
<p>这里返回值不能用unsigned去接， 否则找不到会返回-1, 实际find找不到只会返回sting::npos, 显然是类型溢出</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
</search>
